GlobalICFGNode0
CopyStmt: [Var1 <-- Var0]	
 i8* null { constant data }
AddrStmt: [Var10 <-- Var11]	
 i32 1 { constant data }
AddrStmt: [Var28 <-- Var29]	
 i32 0 { constant data }
AddrStmt: [Var49 <-- Var50]	
 i32 3456 { constant data }
AddrStmt: [Var4 <-- Var5]	
Function: TestBad6 { "ln": 17, "file": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }
AddrStmt: [Var36 <-- Var37]	
Function: llvm.dbg.declare 
AddrStmt: [Var42 <-- Var43]	
Function: main { "ln": 25, "file": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }
-----------Var and Value-----------
Var10	 Value: [1, 1]
Var11	 Value: [1, 1]
Var28	 Value: [0, 0]
Var29	 Value: [0, 0]
Var49	 Value: [3456, 3456]
Var50	 Value: [3456, 3456]
Var0	 Value: [ 0x7f000000(0) ,]
Var4	 Value: [ 0x7f000005(5) ,]
Var5	 Value: [ 0x7f000005(5) ,]
Var36	 Value: [ 0x7f000025(37) ,]
Var37	 Value: [ 0x7f000025(37) ,]
Var42	 Value: [ 0x7f00002b(43) ,]
Var43	 Value: [ 0x7f00002b(43) ,]
-----------------------------------------
IntraICFGNode22 {fun: main{ "ln": 26, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }}
AddrStmt: [Var45 <-- Var46]	
   %p = alloca i32, align 4 { "ln": 26, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }
-----------Var and Value-----------
Var1	 Value: [-INF, +INF]
Var0	 Value: [ 0x7f000000(0) ,]
-----------------------------------------
IntraICFGNode32 {fun: main{ "ln": 26, "cl": 9, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }}
   call void @llvm.dbg.declare(metadata i32* %p, metadata !45, metadata !DIExpression()), !dbg !46 { "ln": 26, "cl": 9, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }
-----------Var and Value-----------
Var1	 Value: [-INF, +INF]
Var0	 Value: [ 0x7f000000(0) ,]
-----------------------------------------
IntraICFGNode23 {fun: main{ "ln": 26, "cl": 9, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }}
StoreStmt: [Var45 <-- Var49]	
   store i32 3456, i32* %p, align 4, !dbg !27 { "ln": 26, "cl": 9, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }
-----------Var and Value-----------
Var1	 Value: [-INF, +INF]
Var46	 Value: [3456, 3456]
Var0	 Value: [ 0x7f000000(0) ,]
-----------------------------------------
IntraICFGNode24 {fun: main{ "ln": 27, "cl": 14, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }}
CopyStmt: [Var51 <-- Var45]	
   %0 = bitcast i32* %p to i8*, !dbg !28 { "ln": 27, "cl": 14, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }
arr type size: 4
arr type size: 4
-----------Var and Value-----------
Var1	 Value: [-INF, +INF]
Var46	 Value: [3456, 3456]
Var0	 Value: [ 0x7f000000(0) ,]
-----------------------------------------
CallICFGNode25 {fun: main{ "ln": 27, "cl": 5, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }}
CallPE: [Var7 <-- Var51]	
   call void @TestBad6(i8* noundef %0), !dbg !29 { "ln": 27, "cl": 5, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }
IntraICFGNode2 {fun: TestBad6{ "ln": 17, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }}
AddrStmt: [Var8 <-- Var9]	
   %p.addr = alloca i8*, align 8 { "ln": 17, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }
-----------Var and Value-----------
Var1	 Value: [-INF, +INF]
Var46	 Value: [3456, 3456]
Var0	 Value: [ 0x7f000000(0) ,]
-----------------------------------------
IntraICFGNode3 {fun: TestBad6{ "ln": 19, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }}
AddrStmt: [Var12 <-- Var13]	
   %s1 = alloca %struct.S1*, align 8 { "ln": 19, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }
-----------Var and Value-----------
Var1	 Value: [-INF, +INF]
Var46	 Value: [3456, 3456]
Var0	 Value: [ 0x7f000000(0) ,]
-----------------------------------------
IntraICFGNode4 {fun: TestBad6{ "ln": 20, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }}
AddrStmt: [Var14 <-- Var15]	
   %s2 = alloca %struct.S2*, align 8 { "ln": 20, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }
-----------Var and Value-----------
Var1	 Value: [-INF, +INF]
Var46	 Value: [3456, 3456]
Var0	 Value: [ 0x7f000000(0) ,]
-----------------------------------------
IntraICFGNode5 {fun: TestBad6}
StoreStmt: [Var8 <-- Var7]	
   store i8* %p, i8** %p.addr, align 8 
-----------Var and Value-----------
Var1	 Value: [-INF, +INF]
Var46	 Value: [3456, 3456]
Var0	 Value: [ 0x7f000000(0) ,]
Var9	 Value: [ 0x7f00002e(46) ,]
-----------------------------------------
IntraICFGNode29 {fun: TestBad6{ "ln": 17, "cl": 21, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }}
   call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !26, metadata !DIExpression()), !dbg !27 { "ln": 17, "cl": 21, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }
-----------Var and Value-----------
Var1	 Value: [-INF, +INF]
Var46	 Value: [3456, 3456]
Var0	 Value: [ 0x7f000000(0) ,]
Var9	 Value: [ 0x7f00002e(46) ,]
-----------------------------------------
IntraICFGNode30 {fun: TestBad6{ "ln": 19, "cl": 16, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }}
   call void @llvm.dbg.declare(metadata %struct.S1** %s1, metadata !28, metadata !DIExpression()), !dbg !29 { "ln": 19, "cl": 16, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }
-----------Var and Value-----------
Var1	 Value: [-INF, +INF]
Var46	 Value: [3456, 3456]
Var0	 Value: [ 0x7f000000(0) ,]
Var9	 Value: [ 0x7f00002e(46) ,]
-----------------------------------------
IntraICFGNode6 {fun: TestBad6{ "ln": 19, "cl": 34, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }}
LoadStmt: [Var19 <-- Var8]	
   %0 = load i8*, i8** %p.addr, align 8, !dbg !30 { "ln": 19, "cl": 34, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }
-----------Var and Value-----------
Var1	 Value: [-INF, +INF]
Var46	 Value: [3456, 3456]
Var0	 Value: [ 0x7f000000(0) ,]
Var9	 Value: [ 0x7f00002e(46) ,]
-----------------------------------------
IntraICFGNode7 {fun: TestBad6{ "ln": 19, "cl": 21, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }}
CopyStmt: [Var20 <-- Var19]	
   %1 = bitcast i8* %0 to %struct.S1*, !dbg !31 { "ln": 19, "cl": 21, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }
arr type size: 4
arr type size: 4
-----------Var and Value-----------
Var1	 Value: [-INF, +INF]
Var46	 Value: [3456, 3456]
Var0	 Value: [ 0x7f000000(0) ,]
Var9	 Value: [ 0x7f00002e(46) ,]
-----------------------------------------
IntraICFGNode8 {fun: TestBad6{ "ln": 19, "cl": 16, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }}
StoreStmt: [Var12 <-- Var20]	
   store %struct.S1* %1, %struct.S1** %s1, align 8, !dbg !29 { "ln": 19, "cl": 16, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }
-----------Var and Value-----------
Var1	 Value: [-INF, +INF]
Var46	 Value: [3456, 3456]
Var0	 Value: [ 0x7f000000(0) ,]
Var9	 Value: [ 0x7f00002e(46) ,]
Var13	 Value: [ 0x7f00002e(46) ,]
-----------------------------------------
IntraICFGNode31 {fun: TestBad6{ "ln": 20, "cl": 16, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }}
   call void @llvm.dbg.declare(metadata %struct.S2** %s2, metadata !32, metadata !DIExpression()), !dbg !33 { "ln": 20, "cl": 16, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }
-----------Var and Value-----------
Var1	 Value: [-INF, +INF]
Var46	 Value: [3456, 3456]
Var0	 Value: [ 0x7f000000(0) ,]
Var9	 Value: [ 0x7f00002e(46) ,]
Var13	 Value: [ 0x7f00002e(46) ,]
-----------------------------------------
IntraICFGNode9 {fun: TestBad6{ "ln": 20, "cl": 34, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }}
LoadStmt: [Var23 <-- Var8]	
   %2 = load i8*, i8** %p.addr, align 8, !dbg !34 { "ln": 20, "cl": 34, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }
-----------Var and Value-----------
Var1	 Value: [-INF, +INF]
Var46	 Value: [3456, 3456]
Var0	 Value: [ 0x7f000000(0) ,]
Var9	 Value: [ 0x7f00002e(46) ,]
Var13	 Value: [ 0x7f00002e(46) ,]
-----------------------------------------
IntraICFGNode10 {fun: TestBad6{ "ln": 20, "cl": 21, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }}
CopyStmt: [Var24 <-- Var23]	
   %3 = bitcast i8* %2 to %struct.S2*, !dbg !35 { "ln": 20, "cl": 21, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }
arr type size: 4
arr type size: 4
-----------Var and Value-----------
Var1	 Value: [-INF, +INF]
Var46	 Value: [3456, 3456]
Var0	 Value: [ 0x7f000000(0) ,]
Var9	 Value: [ 0x7f00002e(46) ,]
Var13	 Value: [ 0x7f00002e(46) ,]
-----------------------------------------
IntraICFGNode11 {fun: TestBad6{ "ln": 20, "cl": 16, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }}
StoreStmt: [Var14 <-- Var24]	
   store %struct.S2* %3, %struct.S2** %s2, align 8, !dbg !33 { "ln": 20, "cl": 16, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }
-----------Var and Value-----------
Var1	 Value: [-INF, +INF]
Var46	 Value: [3456, 3456]
Var0	 Value: [ 0x7f000000(0) ,]
Var9	 Value: [ 0x7f00002e(46) ,]
Var13	 Value: [ 0x7f00002e(46) ,]
-----------------------------------------
IntraICFGNode12 {fun: TestBad6{ "ln": 22, "cl": 13, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }}
LoadStmt: [Var26 <-- Var12]	
   %4 = load %struct.S1*, %struct.S1** %s1, align 8, !dbg !36 { "ln": 22, "cl": 13, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }
-----------Var and Value-----------
Var1	 Value: [-INF, +INF]
Var46	 Value: [3456, 3456]
Var0	 Value: [ 0x7f000000(0) ,]
Var9	 Value: [ 0x7f00002e(46) ,]
Var13	 Value: [ 0x7f00002e(46) ,]
-----------------------------------------
IntraICFGNode13 {fun: TestBad6{ "ln": 22, "cl": 17, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }}
GepStmt: [Var27 <-- Var26]	
   %i = getelementptr inbounds %struct.S1, %struct.S1* %4, i32 0, i32 0, !dbg !37 { "ln": 22, "cl": 17, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }
%struct.S1*, byteOffset:[0, 0]
arr type size: 4
arr type size: 4
Buffer Overflow Check Safe
-----------Var and Value-----------
Var1	 Value: [-INF, +INF]
Var46	 Value: [3456, 3456]
Var0	 Value: [ 0x7f000000(0) ,]
Var9	 Value: [ 0x7f00002e(46) ,]
Var13	 Value: [ 0x7f00002e(46) ,]
-----------------------------------------
IntraICFGNode14 {fun: TestBad6{ "ln": 22, "cl": 17, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }}
LoadStmt: [Var30 <-- Var27]	
   %5 = load i32, i32* %i, align 4, !dbg !37 { "ln": 22, "cl": 17, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }
-----------Var and Value-----------
Var1	 Value: [-INF, +INF]
Var46	 Value: [3456, 3456]
Var0	 Value: [ 0x7f000000(0) ,]
Var9	 Value: [ 0x7f00002e(46) ,]
Var13	 Value: [ 0x7f00002e(46) ,]
-----------------------------------------
IntraICFGNode15 {fun: TestBad6{ "ln": 22, "cl": 13, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }}
CopyStmt: [Var31 <-- Var30]	
   %conv = sext i32 %5 to i64, !dbg !36 { "ln": 22, "cl": 13, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }
-----------Var and Value-----------
Var1	 Value: [-INF, +INF]
Var46	 Value: [3456, 3456]
Var0	 Value: [ 0x7f000000(0) ,]
Var9	 Value: [ 0x7f00002e(46) ,]
Var13	 Value: [ 0x7f00002e(46) ,]
-----------------------------------------
IntraICFGNode16 {fun: TestBad6{ "ln": 22, "cl": 5, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }}
LoadStmt: [Var32 <-- Var14]	
   %6 = load %struct.S2*, %struct.S2** %s2, align 8, !dbg !38 { "ln": 22, "cl": 5, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }
-----------Var and Value-----------
Var1	 Value: [-INF, +INF]
Var46	 Value: [3456, 3456]
Var0	 Value: [ 0x7f000000(0) ,]
Var9	 Value: [ 0x7f00002e(46) ,]
Var13	 Value: [ 0x7f00002e(46) ,]
-----------------------------------------
IntraICFGNode17 {fun: TestBad6{ "ln": 22, "cl": 9, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }}
GepStmt: [Var33 <-- Var32]	
   %l = getelementptr inbounds %struct.S2, %struct.S2* %6, i32 0, i32 0, !dbg !39 { "ln": 22, "cl": 9, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }
%struct.S2*, byteOffset:[0, 0]
-----------Var and Value-----------
Var1	 Value: [-INF, +INF]
Var46	 Value: [3456, 3456]
Var0	 Value: [ 0x7f000000(0) ,]
Var9	 Value: [ 0x7f00002e(46) ,]
Var13	 Value: [ 0x7f00002e(46) ,]
-----------------------------------------
IntraICFGNode18 {fun: TestBad6{ "ln": 22, "cl": 11, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }}
StoreStmt: [Var33 <-- Var31]	
   store i64 %conv, i64* %l, align 8, !dbg !40 { "ln": 22, "cl": 11, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }
-----------Var and Value-----------
Var1	 Value: [-INF, +INF]
Var46	 Value: [3456, 3456]
Var0	 Value: [ 0x7f000000(0) ,]
Var9	 Value: [ 0x7f00002e(46) ,]
Var13	 Value: [ 0x7f00002e(46) ,]
-----------------------------------------
IntraICFGNode19 {fun: TestBad6{ "ln": 23, "cl": 1, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }}
   ret void, !dbg !41 { "ln": 23, "cl": 1, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }
-----------Var and Value-----------
Var1	 Value: [-INF, +INF]
Var46	 Value: [3456, 3456]
Var0	 Value: [ 0x7f000000(0) ,]
Var9	 Value: [ 0x7f00002e(46) ,]
Var13	 Value: [ 0x7f00002e(46) ,]
-----------------------------------------
-----------Var and Value-----------
Var1	 Value: [-INF, +INF]
Var46	 Value: [3456, 3456]
Var0	 Value: [ 0x7f000000(0) ,]
Var9	 Value: [ 0x7f00002e(46) ,]
Var13	 Value: [ 0x7f00002e(46) ,]
-----------------------------------------
FunExitICFGNode20 {fun: TestBad6{ "ln": 17, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }}
-----------Var and Value-----------
Var1	 Value: [-INF, +INF]
Var46	 Value: [3456, 3456]
Var0	 Value: [ 0x7f000000(0) ,]
Var9	 Value: [ 0x7f00002e(46) ,]
Var13	 Value: [ 0x7f00002e(46) ,]
-----------------------------------------
RetICFGNode26 {fun: main{ "ln": 27, "cl": 5, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }}
-----------Var and Value-----------
Var1	 Value: [-INF, +INF]
Var46	 Value: [3456, 3456]
Var0	 Value: [ 0x7f000000(0) ,]
Var9	 Value: [ 0x7f00002e(46) ,]
Var13	 Value: [ 0x7f00002e(46) ,]
-----------------------------------------
IntraICFGNode27 {fun: main{ "ln": 28, "cl": 1, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }}
   ret i32 0, !dbg !30 { "ln": 28, "cl": 1, "fl": "function/Overlapping_Copy_Memory_Copy_BadCase06-1.c" }
-----------Var and Value-----------
Var1	 Value: [-INF, +INF]
Var46	 Value: [3456, 3456]
Var0	 Value: [ 0x7f000000(0) ,]
Var9	 Value: [ 0x7f00002e(46) ,]
Var13	 Value: [ 0x7f00002e(46) ,]
-----------------------------------------
