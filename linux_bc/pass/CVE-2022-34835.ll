; ModuleID = 'linux_bc/pass/CVE-2022-34835.ll'
source_filename = "/home/SVF-tools/SSE-TestCases/src/pass/CVE-2022-34835.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.i2c_msg = type { i8* }

@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @do_i2c_md(i32 %argc, i8** %argv) #0 !dbg !9 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %length = alloca i32, align 4
  %nbytes = alloca i32, align 4
  %linebytes = alloca i32, align 4
  %linebuf = alloca [16 x i8], align 16
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !18, metadata !DIExpression()), !dbg !19
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !20, metadata !DIExpression()), !dbg !21
  call void @llvm.dbg.declare(metadata i32* %length, metadata !22, metadata !DIExpression()), !dbg !28
  store i32 0, i32* %length, align 4, !dbg !28
  call void @llvm.dbg.declare(metadata i32* %nbytes, metadata !29, metadata !DIExpression()), !dbg !33
  call void @llvm.dbg.declare(metadata i32* %linebytes, metadata !34, metadata !DIExpression()), !dbg !35
  %0 = load i32, i32* %argc.addr, align 4, !dbg !36
  %cmp = icmp slt i32 %0, 3, !dbg !38
  br i1 %cmp, label %if.then, label %if.end, !dbg !39

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4, !dbg !40
  br label %return, !dbg !40

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %argc.addr, align 4, !dbg !42
  %cmp1 = icmp sgt i32 %1, 3, !dbg !44
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !45

if.then2:                                         ; preds = %if.end
  %2 = load i8**, i8*** %argv.addr, align 8, !dbg !46
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 3, !dbg !46
  %3 = load i8*, i8** %arrayidx, align 8, !dbg !46
  %call = call i64 @strtol(i8* %3, i8** null, i32 16) #4, !dbg !48
  %conv = trunc i64 %call to i32, !dbg !48
  store i32 %conv, i32* %length, align 4, !dbg !49
  br label %if.end3, !dbg !50

if.end3:                                          ; preds = %if.then2, %if.end
  %4 = load i32, i32* %length, align 4, !dbg !51
  store i32 %4, i32* %nbytes, align 4, !dbg !52
  br label %do.body, !dbg !53

do.body:                                          ; preds = %do.cond, %if.end3
  call void @llvm.dbg.declare(metadata [16 x i8]* %linebuf, metadata !54, metadata !DIExpression()), !dbg !60
  %5 = load i32, i32* %nbytes, align 4, !dbg !61
  %cmp4 = icmp sgt i32 %5, 16, !dbg !62
  br i1 %cmp4, label %cond.true, label %cond.false, !dbg !63

cond.true:                                        ; preds = %do.body
  br label %cond.end, !dbg !63

cond.false:                                       ; preds = %do.body
  %6 = load i32, i32* %nbytes, align 4, !dbg !64
  br label %cond.end, !dbg !63

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 16, %cond.true ], [ %6, %cond.false ], !dbg !63
  store i32 %cond, i32* %linebytes, align 4, !dbg !65
  %7 = load i32, i32* %linebytes, align 4, !dbg !66
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7), !dbg !67
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %linebuf, i64 0, i64 0, !dbg !68
  %8 = load i32, i32* %linebytes, align 4, !dbg !69
  %call7 = call i32 @i2c_read_bytewise(i8* %arraydecay, i32 %8), !dbg !70
  %9 = load i32, i32* %linebytes, align 4, !dbg !71
  %10 = load i32, i32* %nbytes, align 4, !dbg !72
  %sub = sub nsw i32 %10, %9, !dbg !72
  store i32 %sub, i32* %nbytes, align 4, !dbg !72
  br label %do.cond, !dbg !73

do.cond:                                          ; preds = %cond.end
  %11 = load i32, i32* %nbytes, align 4, !dbg !74
  %cmp8 = icmp sgt i32 %11, 0, !dbg !75
  br i1 %cmp8, label %do.body, label %do.end, !dbg !73, !llvm.loop !76

do.end:                                           ; preds = %do.cond
  store i32 0, i32* %retval, align 4, !dbg !79
  br label %return, !dbg !79

return:                                           ; preds = %do.end, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !80
  ret i32 %12, !dbg !80
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local i64 @strtol(i8*, i8**, i32) #2

declare dso_local i32 @printf(i8*, ...) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @i2c_read_bytewise(i8* %buffer, i32 %len) #0 !dbg !81 {
entry:
  %buffer.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %msg = alloca [2 x %struct.i2c_msg], align 16
  %ptr = alloca %struct.i2c_msg*, align 8
  %i = alloca i32, align 4
  store i8* %buffer, i8** %buffer.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buffer.addr, metadata !87, metadata !DIExpression()), !dbg !88
  store i32 %len, i32* %len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len.addr, metadata !89, metadata !DIExpression()), !dbg !90
  call void @llvm.dbg.declare(metadata [2 x %struct.i2c_msg]* %msg, metadata !91, metadata !DIExpression()), !dbg !98
  call void @llvm.dbg.declare(metadata %struct.i2c_msg** %ptr, metadata !99, metadata !DIExpression()), !dbg !101
  call void @llvm.dbg.declare(metadata i32* %i, metadata !102, metadata !DIExpression()), !dbg !103
  store i32 0, i32* %i, align 4, !dbg !104
  br label %for.cond, !dbg !106

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !107
  %1 = load i32, i32* %len.addr, align 4, !dbg !109
  %cmp = icmp ult i32 %0, %1, !dbg !110
  br i1 %cmp, label %for.body, label %for.end, !dbg !111

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [2 x %struct.i2c_msg], [2 x %struct.i2c_msg]* %msg, i64 0, i64 0, !dbg !112
  %add.ptr = getelementptr inbounds %struct.i2c_msg, %struct.i2c_msg* %arraydecay, i64 1, !dbg !114
  store %struct.i2c_msg* %add.ptr, %struct.i2c_msg** %ptr, align 8, !dbg !115
  %2 = load i8*, i8** %buffer.addr, align 8, !dbg !116
  %3 = load i32, i32* %i, align 4, !dbg !117
  %idxprom = sext i32 %3 to i64, !dbg !116
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %idxprom, !dbg !116
  %4 = load %struct.i2c_msg*, %struct.i2c_msg** %ptr, align 8, !dbg !118
  %buf = getelementptr inbounds %struct.i2c_msg, %struct.i2c_msg* %4, i32 0, i32 0, !dbg !119
  store i8* %arrayidx, i8** %buf, align 8, !dbg !120
  %5 = load %struct.i2c_msg*, %struct.i2c_msg** %ptr, align 8, !dbg !121
  %incdec.ptr = getelementptr inbounds %struct.i2c_msg, %struct.i2c_msg* %5, i32 1, !dbg !121
  store %struct.i2c_msg* %incdec.ptr, %struct.i2c_msg** %ptr, align 8, !dbg !121
  br label %for.inc, !dbg !122

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4, !dbg !123
  %inc = add nsw i32 %6, 1, !dbg !123
  store i32 %inc, i32* %i, align 4, !dbg !123
  br label %for.cond, !dbg !124, !llvm.loop !125

for.end:                                          ; preds = %for.cond
  ret i32 0, !dbg !127
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %argc, i8** %argv) #0 !dbg !128 {
entry:
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !132, metadata !DIExpression()), !dbg !133
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !134, metadata !DIExpression()), !dbg !135
  %0 = load i32, i32* %argc.addr, align 4, !dbg !136
  %1 = load i8**, i8*** %argv.addr, align 8, !dbg !137
  %call = call i32 @do_i2c_md(i32 %0, i8** %1), !dbg !138
  ret i32 0, !dbg !139
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4, !5, !6, !7}
!llvm.ident = !{!8}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/SVF-tools/SSE-TestCases/src/pass/CVE-2022-34835.c", directory: "/home/SVF-tools/SSE-TestCases")
!2 = !{}
!3 = !{i32 7, !"Dwarf Version", i32 4}
!4 = !{i32 2, !"Debug Info Version", i32 3}
!5 = !{i32 1, !"wchar_size", i32 4}
!6 = !{i32 7, !"uwtable", i32 1}
!7 = !{i32 7, !"frame-pointer", i32 2}
!8 = !{!"clang version 13.0.0"}
!9 = distinct !DISubprogram(name: "do_i2c_md", scope: !10, file: !10, line: 15, type: !11, scopeLine: 15, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!10 = !DIFile(filename: "src/pass/CVE-2022-34835.c", directory: "/home/SVF-tools/SSE-TestCases")
!11 = !DISubroutineType(types: !12)
!12 = !{!13, !13, !14}
!13 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!14 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15, size: 64)
!15 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !16)
!16 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17, size: 64)
!17 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!18 = !DILocalVariable(name: "argc", arg: 1, scope: !9, file: !10, line: 15, type: !13)
!19 = !DILocation(line: 15, column: 19, scope: !9)
!20 = !DILocalVariable(name: "argv", arg: 2, scope: !9, file: !10, line: 15, type: !14)
!21 = !DILocation(line: 15, column: 37, scope: !9)
!22 = !DILocalVariable(name: "length", scope: !9, file: !10, line: 16, type: !23)
!23 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !24, line: 26, baseType: !25)
!24 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h", directory: "")
!25 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint32_t", file: !26, line: 42, baseType: !27)
!26 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!27 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!28 = !DILocation(line: 16, column: 11, scope: !9)
!29 = !DILocalVariable(name: "nbytes", scope: !9, file: !10, line: 17, type: !30)
!30 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !31, line: 26, baseType: !32)
!31 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h", directory: "")
!32 = !DIDerivedType(tag: DW_TAG_typedef, name: "__int32_t", file: !26, line: 41, baseType: !13)
!33 = !DILocation(line: 17, column: 10, scope: !9)
!34 = !DILocalVariable(name: "linebytes", scope: !9, file: !10, line: 18, type: !30)
!35 = !DILocation(line: 18, column: 10, scope: !9)
!36 = !DILocation(line: 20, column: 6, scope: !37)
!37 = distinct !DILexicalBlock(scope: !9, file: !10, line: 20, column: 6)
!38 = !DILocation(line: 20, column: 11, scope: !37)
!39 = !DILocation(line: 20, column: 6, scope: !9)
!40 = !DILocation(line: 21, column: 3, scope: !41)
!41 = distinct !DILexicalBlock(scope: !37, file: !10, line: 20, column: 16)
!42 = !DILocation(line: 24, column: 6, scope: !43)
!43 = distinct !DILexicalBlock(scope: !9, file: !10, line: 24, column: 6)
!44 = !DILocation(line: 24, column: 11, scope: !43)
!45 = !DILocation(line: 24, column: 6, scope: !9)
!46 = !DILocation(line: 25, column: 19, scope: !47)
!47 = distinct !DILexicalBlock(scope: !43, file: !10, line: 24, column: 16)
!48 = !DILocation(line: 25, column: 12, scope: !47)
!49 = !DILocation(line: 25, column: 10, scope: !47)
!50 = !DILocation(line: 26, column: 2, scope: !47)
!51 = !DILocation(line: 28, column: 11, scope: !9)
!52 = !DILocation(line: 28, column: 9, scope: !9)
!53 = !DILocation(line: 29, column: 2, scope: !9)
!54 = !DILocalVariable(name: "linebuf", scope: !55, file: !10, line: 30, type: !56)
!55 = distinct !DILexicalBlock(scope: !9, file: !10, line: 29, column: 5)
!56 = !DICompositeType(tag: DW_TAG_array_type, baseType: !57, size: 128, elements: !58)
!57 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!58 = !{!59}
!59 = !DISubrange(count: 16)
!60 = !DILocation(line: 30, column: 17, scope: !55)
!61 = !DILocation(line: 31, column: 16, scope: !55)
!62 = !DILocation(line: 31, column: 23, scope: !55)
!63 = !DILocation(line: 31, column: 15, scope: !55)
!64 = !DILocation(line: 31, column: 58, scope: !55)
!65 = !DILocation(line: 31, column: 13, scope: !55)
!66 = !DILocation(line: 32, column: 18, scope: !55)
!67 = !DILocation(line: 32, column: 3, scope: !55)
!68 = !DILocation(line: 33, column: 21, scope: !55)
!69 = !DILocation(line: 33, column: 30, scope: !55)
!70 = !DILocation(line: 33, column: 3, scope: !55)
!71 = !DILocation(line: 34, column: 13, scope: !55)
!72 = !DILocation(line: 34, column: 10, scope: !55)
!73 = !DILocation(line: 35, column: 2, scope: !55)
!74 = !DILocation(line: 35, column: 11, scope: !9)
!75 = !DILocation(line: 35, column: 18, scope: !9)
!76 = distinct !{!76, !53, !77, !78}
!77 = !DILocation(line: 35, column: 21, scope: !9)
!78 = !{!"llvm.loop.mustprogress"}
!79 = !DILocation(line: 37, column: 2, scope: !9)
!80 = !DILocation(line: 38, column: 1, scope: !9)
!81 = distinct !DISubprogram(name: "i2c_read_bytewise", scope: !10, file: !10, line: 45, type: !82, scopeLine: 45, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!82 = !DISubroutineType(types: !83)
!83 = !{!13, !84, !23}
!84 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !85, size: 64)
!85 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !24, line: 24, baseType: !86)
!86 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint8_t", file: !26, line: 38, baseType: !57)
!87 = !DILocalVariable(name: "buffer", arg: 1, scope: !81, file: !10, line: 45, type: !84)
!88 = !DILocation(line: 45, column: 32, scope: !81)
!89 = !DILocalVariable(name: "len", arg: 2, scope: !81, file: !10, line: 45, type: !23)
!90 = !DILocation(line: 45, column: 49, scope: !81)
!91 = !DILocalVariable(name: "msg", scope: !81, file: !10, line: 46, type: !92)
!92 = !DICompositeType(tag: DW_TAG_array_type, baseType: !93, size: 128, elements: !96)
!93 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "i2c_msg", file: !10, line: 40, size: 64, elements: !94)
!94 = !{!95}
!95 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !93, file: !10, line: 41, baseType: !84, size: 64)
!96 = !{!97}
!97 = !DISubrange(count: 2)
!98 = !DILocation(line: 46, column: 17, scope: !81)
!99 = !DILocalVariable(name: "ptr", scope: !81, file: !10, line: 46, type: !100)
!100 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !93, size: 64)
!101 = !DILocation(line: 46, column: 26, scope: !81)
!102 = !DILocalVariable(name: "i", scope: !81, file: !10, line: 47, type: !13)
!103 = !DILocation(line: 47, column: 6, scope: !81)
!104 = !DILocation(line: 50, column: 9, scope: !105)
!105 = distinct !DILexicalBlock(scope: !81, file: !10, line: 50, column: 2)
!106 = !DILocation(line: 50, column: 7, scope: !105)
!107 = !DILocation(line: 50, column: 14, scope: !108)
!108 = distinct !DILexicalBlock(scope: !105, file: !10, line: 50, column: 2)
!109 = !DILocation(line: 50, column: 18, scope: !108)
!110 = !DILocation(line: 50, column: 16, scope: !108)
!111 = !DILocation(line: 50, column: 2, scope: !105)
!112 = !DILocation(line: 51, column: 9, scope: !113)
!113 = distinct !DILexicalBlock(scope: !108, file: !10, line: 50, column: 28)
!114 = !DILocation(line: 51, column: 13, scope: !113)
!115 = !DILocation(line: 51, column: 7, scope: !113)
!116 = !DILocation(line: 53, column: 15, scope: !113)
!117 = !DILocation(line: 53, column: 22, scope: !113)
!118 = !DILocation(line: 53, column: 3, scope: !113)
!119 = !DILocation(line: 53, column: 8, scope: !113)
!120 = !DILocation(line: 53, column: 12, scope: !113)
!121 = !DILocation(line: 54, column: 6, scope: !113)
!122 = !DILocation(line: 55, column: 2, scope: !113)
!123 = !DILocation(line: 50, column: 24, scope: !108)
!124 = !DILocation(line: 50, column: 2, scope: !108)
!125 = distinct !{!125, !111, !126, !78}
!126 = !DILocation(line: 55, column: 2, scope: !105)
!127 = !DILocation(line: 57, column: 2, scope: !81)
!128 = distinct !DISubprogram(name: "main", scope: !10, file: !10, line: 60, type: !129, scopeLine: 60, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!129 = !DISubroutineType(types: !130)
!130 = !{!13, !13, !131}
!131 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !16, size: 64)
!132 = !DILocalVariable(name: "argc", arg: 1, scope: !128, file: !10, line: 60, type: !13)
!133 = !DILocation(line: 60, column: 14, scope: !128)
!134 = !DILocalVariable(name: "argv", arg: 2, scope: !128, file: !10, line: 60, type: !131)
!135 = !DILocation(line: 60, column: 26, scope: !128)
!136 = !DILocation(line: 61, column: 12, scope: !128)
!137 = !DILocation(line: 61, column: 18, scope: !128)
!138 = !DILocation(line: 61, column: 2, scope: !128)
!139 = !DILocation(line: 62, column: 1, scope: !128)
