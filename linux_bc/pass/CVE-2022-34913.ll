; ModuleID = 'linux_bc/pass/CVE-2022-34913.ll'
source_filename = "/home/SVF-tools/SSE-TestCases/src/pass/CVE-2022-34913.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque

@.str = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.1 = private unnamed_addr constant [20 x i8] c"Unable to open '%s'\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"fseek failed\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"ftell failed\00", align 1
@.str.4 = private unnamed_addr constant [13 x i8] c"fread failed\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @md2roff(i8* %docname, i8* %source) #0 !dbg !31 {
entry:
  %docname.addr = alloca i8*, align 8
  %source.addr = alloca i8*, align 8
  %p = alloca i8*, align 8
  %appname = alloca [64 x i8], align 16
  store i8* %docname, i8** %docname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %docname.addr, metadata !38, metadata !DIExpression()), !dbg !39
  store i8* %source, i8** %source.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %source.addr, metadata !40, metadata !DIExpression()), !dbg !41
  call void @llvm.dbg.declare(metadata i8** %p, metadata !42, metadata !DIExpression()), !dbg !43
  %0 = load i8*, i8** %source.addr, align 8, !dbg !44
  store i8* %0, i8** %p, align 8, !dbg !43
  call void @llvm.dbg.declare(metadata [64 x i8]* %appname, metadata !45, metadata !DIExpression()), !dbg !49
  br label %while.cond, !dbg !50

while.cond:                                       ; preds = %while.body, %entry
  %call = call i16** @__ctype_b_loc() #6, !dbg !53
  %1 = load i16*, i16** %call, align 8, !dbg !53
  %2 = load i8*, i8** %p, align 8, !dbg !53
  %3 = load i8, i8* %2, align 1, !dbg !53
  %conv = sext i8 %3 to i32, !dbg !53
  %idxprom = sext i32 %conv to i64, !dbg !53
  %arrayidx = getelementptr inbounds i16, i16* %1, i64 %idxprom, !dbg !53
  %4 = load i16, i16* %arrayidx, align 2, !dbg !53
  %conv1 = zext i16 %4 to i32, !dbg !53
  %and = and i32 %conv1, 8192, !dbg !53
  %tobool = icmp ne i32 %and, 0, !dbg !50
  br i1 %tobool, label %while.body, label %while.end, !dbg !50

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %p, align 8, !dbg !54
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1, !dbg !54
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !54
  br label %while.cond, !dbg !50, !llvm.loop !56

while.end:                                        ; preds = %while.cond
  %6 = load i8*, i8** %p, align 8, !dbg !59
  %arrayidx2 = getelementptr inbounds i8, i8* %6, i64 0, !dbg !59
  %7 = load i8, i8* %arrayidx2, align 1, !dbg !59
  %conv3 = sext i8 %7 to i32, !dbg !59
  %cmp = icmp ne i32 %conv3, 35, !dbg !61
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !62

lor.lhs.false:                                    ; preds = %while.end
  %call5 = call i16** @__ctype_b_loc() #6, !dbg !63
  %8 = load i16*, i16** %call5, align 8, !dbg !63
  %9 = load i8*, i8** %p, align 8, !dbg !63
  %arrayidx6 = getelementptr inbounds i8, i8* %9, i64 1, !dbg !63
  %10 = load i8, i8* %arrayidx6, align 1, !dbg !63
  %conv7 = sext i8 %10 to i32, !dbg !63
  %idxprom8 = sext i32 %conv7 to i64, !dbg !63
  %arrayidx9 = getelementptr inbounds i16, i16* %8, i64 %idxprom8, !dbg !63
  %11 = load i16, i16* %arrayidx9, align 2, !dbg !63
  %conv10 = zext i16 %11 to i32, !dbg !63
  %and11 = and i32 %conv10, 1, !dbg !63
  %tobool12 = icmp ne i32 %and11, 0, !dbg !63
  br i1 %tobool12, label %if.end, label %if.then, !dbg !64

if.then:                                          ; preds = %lor.lhs.false, %while.end
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %appname, i64 0, i64 0, !dbg !65
  %12 = load i8*, i8** %docname.addr, align 8, !dbg !67
  %call13 = call i8* @strcpy(i8* %arraydecay, i8* %12) #7, !dbg !68
  br label %if.end, !dbg !69

if.end:                                           ; preds = %if.then, %lor.lhs.false
  ret void, !dbg !70
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind readnone willreturn
declare dso_local i16** @__ctype_b_loc() #2

; Function Attrs: nounwind
declare dso_local i8* @strcpy(i8*, i8*) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @loadfile(i8* %filename) #0 !dbg !71 {
entry:
  %filename.addr = alloca i8*, align 8
  %len = alloca i32, align 4
  %fp = alloca %struct._IO_FILE*, align 8
  %buf = alloca i8*, align 8
  store i8* %filename, i8** %filename.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %filename.addr, metadata !74, metadata !DIExpression()), !dbg !75
  call void @llvm.dbg.declare(metadata i32* %len, metadata !76, metadata !DIExpression()), !dbg !77
  store i32 -1, i32* %len, align 4, !dbg !77
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %fp, metadata !78, metadata !DIExpression()), !dbg !137
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !138, metadata !DIExpression()), !dbg !139
  store i8* null, i8** %buf, align 8, !dbg !139
  %0 = load i8*, i8** %filename.addr, align 8, !dbg !140
  %cmp = icmp ne i8* %0, null, !dbg !142
  br i1 %cmp, label %if.then, label %if.end31, !dbg !143

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %filename.addr, align 8, !dbg !144
  %call = call %struct._IO_FILE* @fopen(i8* %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !146
  store %struct._IO_FILE* %call, %struct._IO_FILE** %fp, align 8, !dbg !147
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !dbg !148
  %cmp1 = icmp eq %struct._IO_FILE* %2, null, !dbg !150
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !151

if.then2:                                         ; preds = %if.then
  %3 = load i8*, i8** %filename.addr, align 8, !dbg !152
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0), i8* %3), !dbg !154
  call void @exit(i32 1) #8, !dbg !155
  unreachable, !dbg !155

if.end:                                           ; preds = %if.then
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !dbg !156
  %call4 = call i32 @fseek(%struct._IO_FILE* %4, i64 0, i32 2), !dbg !158
  %cmp5 = icmp eq i32 %call4, -1, !dbg !159
  br i1 %cmp5, label %if.then6, label %if.end8, !dbg !160

if.then6:                                         ; preds = %if.end
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0)), !dbg !161
  call void @exit(i32 1) #8, !dbg !163
  unreachable, !dbg !163

if.end8:                                          ; preds = %if.end
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !dbg !164
  %call9 = call i64 @ftell(%struct._IO_FILE* %5), !dbg !165
  %conv = trunc i64 %call9 to i32, !dbg !165
  store i32 %conv, i32* %len, align 4, !dbg !166
  %6 = load i32, i32* %len, align 4, !dbg !167
  %cmp10 = icmp eq i32 %6, -1, !dbg !169
  br i1 %cmp10, label %if.then12, label %if.end14, !dbg !170

if.then12:                                        ; preds = %if.end8
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i64 0, i64 0)), !dbg !171
  call void @exit(i32 1) #8, !dbg !173
  unreachable, !dbg !173

if.end14:                                         ; preds = %if.end8
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !dbg !174
  %call15 = call i32 @fseek(%struct._IO_FILE* %7, i64 0, i32 0), !dbg !176
  %cmp16 = icmp eq i32 %call15, -1, !dbg !177
  br i1 %cmp16, label %if.then18, label %if.end20, !dbg !178

if.then18:                                        ; preds = %if.end14
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0)), !dbg !179
  call void @exit(i32 1) #8, !dbg !181
  unreachable, !dbg !181

if.end20:                                         ; preds = %if.end14
  %8 = load i32, i32* %len, align 4, !dbg !182
  %add = add nsw i32 %8, 1, !dbg !183
  %conv21 = sext i32 %add to i64, !dbg !182
  %call22 = call noalias align 16 i8* @malloc(i64 %conv21) #7, !dbg !184
  store i8* %call22, i8** %buf, align 8, !dbg !185
  %9 = load i8*, i8** %buf, align 8, !dbg !186
  %10 = load i32, i32* %len, align 4, !dbg !188
  %conv23 = sext i32 %10 to i64, !dbg !188
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !dbg !189
  %call24 = call i64 @fread(i8* %9, i64 %conv23, i64 1, %struct._IO_FILE* %11), !dbg !190
  %cmp25 = icmp eq i64 %call24, -1, !dbg !191
  br i1 %cmp25, label %if.then27, label %if.end29, !dbg !192

if.then27:                                        ; preds = %if.end20
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i64 0, i64 0)), !dbg !193
  call void @exit(i32 1) #8, !dbg !195
  unreachable, !dbg !195

if.end29:                                         ; preds = %if.end20
  %12 = load i8*, i8** %buf, align 8, !dbg !196
  %13 = load i32, i32* %len, align 4, !dbg !197
  %idxprom = sext i32 %13 to i64, !dbg !196
  %arrayidx = getelementptr inbounds i8, i8* %12, i64 %idxprom, !dbg !196
  store i8 0, i8* %arrayidx, align 1, !dbg !198
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !dbg !199
  %call30 = call i32 @fclose(%struct._IO_FILE* %14), !dbg !200
  br label %if.end31, !dbg !201

if.end31:                                         ; preds = %if.end29, %entry
  %15 = load i8*, i8** %buf, align 8, !dbg !202
  ret i8* %15, !dbg !203
}

declare dso_local %struct._IO_FILE* @fopen(i8*, i8*) #4

declare dso_local i32 @printf(i8*, ...) #4

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #5

declare dso_local i32 @fseek(%struct._IO_FILE*, i64, i32) #4

declare dso_local i64 @ftell(%struct._IO_FILE*) #4

; Function Attrs: nounwind
declare dso_local noalias align 16 i8* @malloc(i64) #3

declare dso_local i64 @fread(i8*, i64, i64, %struct._IO_FILE*) #4

declare dso_local i32 @fclose(%struct._IO_FILE*) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %argc, i8** %argv) #0 !dbg !204 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %files = alloca [64 x i32], align 16
  %fc = alloca i32, align 4
  %i = alloca i32, align 4
  %i7 = alloca i32, align 4
  %buf = alloca i8*, align 8
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !208, metadata !DIExpression()), !dbg !209
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !210, metadata !DIExpression()), !dbg !211
  call void @llvm.dbg.declare(metadata [64 x i32]* %files, metadata !212, metadata !DIExpression()), !dbg !214
  call void @llvm.dbg.declare(metadata i32* %fc, metadata !215, metadata !DIExpression()), !dbg !216
  store i32 0, i32* %fc, align 4, !dbg !216
  call void @llvm.dbg.declare(metadata i32* %i, metadata !217, metadata !DIExpression()), !dbg !219
  store i32 1, i32* %i, align 4, !dbg !219
  br label %for.cond, !dbg !220

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !221
  %1 = load i32, i32* %argc.addr, align 4, !dbg !223
  %cmp = icmp slt i32 %0, %1, !dbg !224
  br i1 %cmp, label %for.body, label %for.end, !dbg !225

for.body:                                         ; preds = %for.cond
  %2 = load i8**, i8*** %argv.addr, align 8, !dbg !226
  %3 = load i32, i32* %i, align 4, !dbg !229
  %idxprom = sext i32 %3 to i64, !dbg !226
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 %idxprom, !dbg !226
  %4 = load i8*, i8** %arrayidx, align 8, !dbg !226
  %arrayidx1 = getelementptr inbounds i8, i8* %4, i64 0, !dbg !226
  %5 = load i8, i8* %arrayidx1, align 1, !dbg !226
  %conv = sext i8 %5 to i32, !dbg !226
  %cmp2 = icmp ne i32 %conv, 45, !dbg !230
  br i1 %cmp2, label %if.then, label %if.end, !dbg !231

if.then:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4, !dbg !232
  %7 = load i32, i32* %fc, align 4, !dbg !234
  %idxprom4 = sext i32 %7 to i64, !dbg !235
  %arrayidx5 = getelementptr inbounds [64 x i32], [64 x i32]* %files, i64 0, i64 %idxprom4, !dbg !235
  store i32 %6, i32* %arrayidx5, align 4, !dbg !236
  %8 = load i32, i32* %fc, align 4, !dbg !237
  %inc = add nsw i32 %8, 1, !dbg !237
  store i32 %inc, i32* %fc, align 4, !dbg !237
  br label %if.end, !dbg !238

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !239

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %i, align 4, !dbg !240
  %inc6 = add nsw i32 %9, 1, !dbg !240
  store i32 %inc6, i32* %i, align 4, !dbg !240
  br label %for.cond, !dbg !241, !llvm.loop !242

for.end:                                          ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %i7, metadata !244, metadata !DIExpression()), !dbg !246
  store i32 0, i32* %i7, align 4, !dbg !246
  br label %for.cond8, !dbg !247

for.cond8:                                        ; preds = %for.inc20, %for.end
  %10 = load i32, i32* %i7, align 4, !dbg !248
  %11 = load i32, i32* %fc, align 4, !dbg !250
  %cmp9 = icmp slt i32 %10, %11, !dbg !251
  br i1 %cmp9, label %for.body11, label %for.end22, !dbg !252

for.body11:                                       ; preds = %for.cond8
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !253, metadata !DIExpression()), !dbg !255
  %12 = load i8**, i8*** %argv.addr, align 8, !dbg !256
  %13 = load i32, i32* %i7, align 4, !dbg !257
  %idxprom12 = sext i32 %13 to i64, !dbg !258
  %arrayidx13 = getelementptr inbounds [64 x i32], [64 x i32]* %files, i64 0, i64 %idxprom12, !dbg !258
  %14 = load i32, i32* %arrayidx13, align 4, !dbg !258
  %idxprom14 = sext i32 %14 to i64, !dbg !256
  %arrayidx15 = getelementptr inbounds i8*, i8** %12, i64 %idxprom14, !dbg !256
  %15 = load i8*, i8** %arrayidx15, align 8, !dbg !256
  %call = call i8* @loadfile(i8* %15), !dbg !259
  store i8* %call, i8** %buf, align 8, !dbg !255
  %16 = load i8**, i8*** %argv.addr, align 8, !dbg !260
  %17 = load i32, i32* %i7, align 4, !dbg !261
  %idxprom16 = sext i32 %17 to i64, !dbg !262
  %arrayidx17 = getelementptr inbounds [64 x i32], [64 x i32]* %files, i64 0, i64 %idxprom16, !dbg !262
  %18 = load i32, i32* %arrayidx17, align 4, !dbg !262
  %idxprom18 = sext i32 %18 to i64, !dbg !260
  %arrayidx19 = getelementptr inbounds i8*, i8** %16, i64 %idxprom18, !dbg !260
  %19 = load i8*, i8** %arrayidx19, align 8, !dbg !260
  %20 = load i8*, i8** %buf, align 8, !dbg !263
  call void @md2roff(i8* %19, i8* %20), !dbg !264
  %21 = load i8*, i8** %buf, align 8, !dbg !265
  call void @free(i8* %21) #7, !dbg !266
  br label %for.inc20, !dbg !267

for.inc20:                                        ; preds = %for.body11
  %22 = load i32, i32* %i7, align 4, !dbg !268
  %inc21 = add nsw i32 %22, 1, !dbg !268
  store i32 %inc21, i32* %i7, align 4, !dbg !268
  br label %for.cond8, !dbg !269, !llvm.loop !270

for.end22:                                        ; preds = %for.cond8
  %23 = load i32, i32* %retval, align 4, !dbg !272
  ret i32 %23, !dbg !272
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #3

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { nounwind readnone willreturn "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind readnone willreturn }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!25, !26, !27, !28, !29}
!llvm.ident = !{!30}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !19, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/SVF-tools/SSE-TestCases/src/pass/CVE-2022-34913.c", directory: "/home/SVF-tools/SSE-TestCases")
!2 = !{!3}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !4, line: 46, baseType: !5, size: 32, elements: !6)
!4 = !DIFile(filename: "/usr/include/ctype.h", directory: "")
!5 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!6 = !{!7, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17, !18}
!7 = !DIEnumerator(name: "_ISupper", value: 256)
!8 = !DIEnumerator(name: "_ISlower", value: 512)
!9 = !DIEnumerator(name: "_ISalpha", value: 1024)
!10 = !DIEnumerator(name: "_ISdigit", value: 2048)
!11 = !DIEnumerator(name: "_ISxdigit", value: 4096)
!12 = !DIEnumerator(name: "_ISspace", value: 8192)
!13 = !DIEnumerator(name: "_ISprint", value: 16384)
!14 = !DIEnumerator(name: "_ISgraph", value: 32768)
!15 = !DIEnumerator(name: "_ISblank", value: 1)
!16 = !DIEnumerator(name: "_IScntrl", value: 2)
!17 = !DIEnumerator(name: "_ISpunct", value: 4)
!18 = !DIEnumerator(name: "_ISalnum", value: 8)
!19 = !{!20, !21, !22, !23}
!20 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!21 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !24, size: 64)
!24 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!25 = !{i32 7, !"Dwarf Version", i32 4}
!26 = !{i32 2, !"Debug Info Version", i32 3}
!27 = !{i32 1, !"wchar_size", i32 4}
!28 = !{i32 7, !"uwtable", i32 1}
!29 = !{i32 7, !"frame-pointer", i32 2}
!30 = !{!"clang version 13.0.0"}
!31 = distinct !DISubprogram(name: "md2roff", scope: !32, file: !32, line: 18, type: !33, scopeLine: 18, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !37)
!32 = !DIFile(filename: "src/pass/CVE-2022-34913.c", directory: "/home/SVF-tools/SSE-TestCases")
!33 = !DISubroutineType(types: !34)
!34 = !{null, !35, !35}
!35 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !36, size: 64)
!36 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !24)
!37 = !{}
!38 = !DILocalVariable(name: "docname", arg: 1, scope: !31, file: !32, line: 18, type: !35)
!39 = !DILocation(line: 18, column: 26, scope: !31)
!40 = !DILocalVariable(name: "source", arg: 2, scope: !31, file: !32, line: 18, type: !35)
!41 = !DILocation(line: 18, column: 47, scope: !31)
!42 = !DILocalVariable(name: "p", scope: !31, file: !32, line: 19, type: !35)
!43 = !DILocation(line: 19, column: 14, scope: !31)
!44 = !DILocation(line: 19, column: 18, scope: !31)
!45 = !DILocalVariable(name: "appname", scope: !31, file: !32, line: 20, type: !46)
!46 = !DICompositeType(tag: DW_TAG_array_type, baseType: !24, size: 512, elements: !47)
!47 = !{!48}
!48 = !DISubrange(count: 64)
!49 = !DILocation(line: 20, column: 7, scope: !31)
!50 = !DILocation(line: 23, column: 3, scope: !51)
!51 = distinct !DILexicalBlock(scope: !52, file: !32, line: 22, column: 12)
!52 = distinct !DILexicalBlock(scope: !31, file: !32, line: 22, column: 6)
!53 = !DILocation(line: 23, column: 11, scope: !51)
!54 = !DILocation(line: 24, column: 6, scope: !55)
!55 = distinct !DILexicalBlock(scope: !51, file: !32, line: 23, column: 25)
!56 = distinct !{!56, !50, !57, !58}
!57 = !DILocation(line: 25, column: 3, scope: !51)
!58 = !{!"llvm.loop.mustprogress"}
!59 = !DILocation(line: 27, column: 7, scope: !60)
!60 = distinct !DILexicalBlock(scope: !51, file: !32, line: 27, column: 7)
!61 = !DILocation(line: 27, column: 12, scope: !60)
!62 = !DILocation(line: 27, column: 19, scope: !60)
!63 = !DILocation(line: 27, column: 23, scope: !60)
!64 = !DILocation(line: 27, column: 7, scope: !51)
!65 = !DILocation(line: 29, column: 11, scope: !66)
!66 = distinct !DILexicalBlock(scope: !60, file: !32, line: 27, column: 39)
!67 = !DILocation(line: 29, column: 20, scope: !66)
!68 = !DILocation(line: 29, column: 4, scope: !66)
!69 = !DILocation(line: 30, column: 3, scope: !66)
!70 = !DILocation(line: 32, column: 1, scope: !31)
!71 = distinct !DISubprogram(name: "loadfile", scope: !32, file: !32, line: 34, type: !72, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !37)
!72 = !DISubroutineType(types: !73)
!73 = !{!23, !35}
!74 = !DILocalVariable(name: "filename", arg: 1, scope: !71, file: !32, line: 34, type: !35)
!75 = !DILocation(line: 34, column: 28, scope: !71)
!76 = !DILocalVariable(name: "len", scope: !71, file: !32, line: 35, type: !20)
!77 = !DILocation(line: 35, column: 6, scope: !71)
!78 = !DILocalVariable(name: "fp", scope: !71, file: !32, line: 36, type: !79)
!79 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !80, size: 64)
!80 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !81, line: 7, baseType: !82)
!81 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!82 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !83, line: 49, size: 1728, elements: !84)
!83 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!84 = !{!85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !100, !102, !103, !104, !108, !109, !111, !115, !118, !120, !123, !126, !127, !128, !132, !133}
!85 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !82, file: !83, line: 51, baseType: !20, size: 32)
!86 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !82, file: !83, line: 54, baseType: !23, size: 64, offset: 64)
!87 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !82, file: !83, line: 55, baseType: !23, size: 64, offset: 128)
!88 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !82, file: !83, line: 56, baseType: !23, size: 64, offset: 192)
!89 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !82, file: !83, line: 57, baseType: !23, size: 64, offset: 256)
!90 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !82, file: !83, line: 58, baseType: !23, size: 64, offset: 320)
!91 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !82, file: !83, line: 59, baseType: !23, size: 64, offset: 384)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !82, file: !83, line: 60, baseType: !23, size: 64, offset: 448)
!93 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !82, file: !83, line: 61, baseType: !23, size: 64, offset: 512)
!94 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !82, file: !83, line: 64, baseType: !23, size: 64, offset: 576)
!95 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !82, file: !83, line: 65, baseType: !23, size: 64, offset: 640)
!96 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !82, file: !83, line: 66, baseType: !23, size: 64, offset: 704)
!97 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !82, file: !83, line: 68, baseType: !98, size: 64, offset: 768)
!98 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !99, size: 64)
!99 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !83, line: 36, flags: DIFlagFwdDecl)
!100 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !82, file: !83, line: 70, baseType: !101, size: 64, offset: 832)
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!102 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !82, file: !83, line: 72, baseType: !20, size: 32, offset: 896)
!103 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !82, file: !83, line: 73, baseType: !20, size: 32, offset: 928)
!104 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !82, file: !83, line: 74, baseType: !105, size: 64, offset: 960)
!105 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !106, line: 152, baseType: !107)
!106 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!107 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!108 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !82, file: !83, line: 77, baseType: !21, size: 16, offset: 1024)
!109 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !82, file: !83, line: 78, baseType: !110, size: 8, offset: 1040)
!110 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!111 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !82, file: !83, line: 79, baseType: !112, size: 8, offset: 1048)
!112 = !DICompositeType(tag: DW_TAG_array_type, baseType: !24, size: 8, elements: !113)
!113 = !{!114}
!114 = !DISubrange(count: 1)
!115 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !82, file: !83, line: 81, baseType: !116, size: 64, offset: 1088)
!116 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !117, size: 64)
!117 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !83, line: 43, baseType: null)
!118 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !82, file: !83, line: 89, baseType: !119, size: 64, offset: 1152)
!119 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !106, line: 153, baseType: !107)
!120 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !82, file: !83, line: 91, baseType: !121, size: 64, offset: 1216)
!121 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !122, size: 64)
!122 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !83, line: 37, flags: DIFlagFwdDecl)
!123 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !82, file: !83, line: 92, baseType: !124, size: 64, offset: 1280)
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !125, size: 64)
!125 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !83, line: 38, flags: DIFlagFwdDecl)
!126 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !82, file: !83, line: 93, baseType: !101, size: 64, offset: 1344)
!127 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !82, file: !83, line: 94, baseType: !22, size: 64, offset: 1408)
!128 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !82, file: !83, line: 95, baseType: !129, size: 64, offset: 1472)
!129 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !130, line: 46, baseType: !131)
!130 = !DIFile(filename: "SVF/llvm-13.0.0.obj/lib/clang/13.0.0/include/stddef.h", directory: "/home/SVF-tools")
!131 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!132 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !82, file: !83, line: 96, baseType: !20, size: 32, offset: 1536)
!133 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !82, file: !83, line: 98, baseType: !134, size: 160, offset: 1568)
!134 = !DICompositeType(tag: DW_TAG_array_type, baseType: !24, size: 160, elements: !135)
!135 = !{!136}
!136 = !DISubrange(count: 20)
!137 = !DILocation(line: 36, column: 8, scope: !71)
!138 = !DILocalVariable(name: "buf", scope: !71, file: !32, line: 37, type: !23)
!139 = !DILocation(line: 37, column: 8, scope: !71)
!140 = !DILocation(line: 39, column: 7, scope: !141)
!141 = distinct !DILexicalBlock(scope: !71, file: !32, line: 39, column: 7)
!142 = !DILocation(line: 39, column: 16, scope: !141)
!143 = !DILocation(line: 39, column: 7, scope: !71)
!144 = !DILocation(line: 40, column: 14, scope: !145)
!145 = distinct !DILexicalBlock(scope: !141, file: !32, line: 39, column: 26)
!146 = !DILocation(line: 40, column: 8, scope: !145)
!147 = !DILocation(line: 40, column: 6, scope: !145)
!148 = !DILocation(line: 41, column: 7, scope: !149)
!149 = distinct !DILexicalBlock(scope: !145, file: !32, line: 41, column: 7)
!150 = !DILocation(line: 41, column: 10, scope: !149)
!151 = !DILocation(line: 41, column: 7, scope: !145)
!152 = !DILocation(line: 42, column: 34, scope: !153)
!153 = distinct !DILexicalBlock(scope: !149, file: !32, line: 41, column: 19)
!154 = !DILocation(line: 42, column: 4, scope: !153)
!155 = !DILocation(line: 43, column: 4, scope: !153)
!156 = !DILocation(line: 45, column: 13, scope: !157)
!157 = distinct !DILexicalBlock(scope: !145, file: !32, line: 45, column: 7)
!158 = !DILocation(line: 45, column: 7, scope: !157)
!159 = !DILocation(line: 45, column: 31, scope: !157)
!160 = !DILocation(line: 45, column: 7, scope: !145)
!161 = !DILocation(line: 46, column: 4, scope: !162)
!162 = distinct !DILexicalBlock(scope: !157, file: !32, line: 45, column: 38)
!163 = !DILocation(line: 47, column: 4, scope: !162)
!164 = !DILocation(line: 49, column: 15, scope: !145)
!165 = !DILocation(line: 49, column: 9, scope: !145)
!166 = !DILocation(line: 49, column: 7, scope: !145)
!167 = !DILocation(line: 50, column: 7, scope: !168)
!168 = distinct !DILexicalBlock(scope: !145, file: !32, line: 50, column: 7)
!169 = !DILocation(line: 50, column: 11, scope: !168)
!170 = !DILocation(line: 50, column: 7, scope: !145)
!171 = !DILocation(line: 51, column: 4, scope: !172)
!172 = distinct !DILexicalBlock(scope: !168, file: !32, line: 50, column: 18)
!173 = !DILocation(line: 52, column: 4, scope: !172)
!174 = !DILocation(line: 54, column: 12, scope: !175)
!175 = distinct !DILexicalBlock(scope: !145, file: !32, line: 54, column: 6)
!176 = !DILocation(line: 54, column: 6, scope: !175)
!177 = !DILocation(line: 54, column: 30, scope: !175)
!178 = !DILocation(line: 54, column: 6, scope: !145)
!179 = !DILocation(line: 55, column: 4, scope: !180)
!180 = distinct !DILexicalBlock(scope: !175, file: !32, line: 54, column: 37)
!181 = !DILocation(line: 56, column: 4, scope: !180)
!182 = !DILocation(line: 58, column: 25, scope: !145)
!183 = !DILocation(line: 58, column: 28, scope: !145)
!184 = !DILocation(line: 58, column: 18, scope: !145)
!185 = !DILocation(line: 58, column: 7, scope: !145)
!186 = !DILocation(line: 59, column: 12, scope: !187)
!187 = distinct !DILexicalBlock(scope: !145, file: !32, line: 59, column: 6)
!188 = !DILocation(line: 59, column: 17, scope: !187)
!189 = !DILocation(line: 59, column: 25, scope: !187)
!190 = !DILocation(line: 59, column: 6, scope: !187)
!191 = !DILocation(line: 59, column: 29, scope: !187)
!192 = !DILocation(line: 59, column: 6, scope: !145)
!193 = !DILocation(line: 60, column: 4, scope: !194)
!194 = distinct !DILexicalBlock(scope: !187, file: !32, line: 59, column: 36)
!195 = !DILocation(line: 61, column: 4, scope: !194)
!196 = !DILocation(line: 63, column: 3, scope: !145)
!197 = !DILocation(line: 63, column: 7, scope: !145)
!198 = !DILocation(line: 63, column: 12, scope: !145)
!199 = !DILocation(line: 64, column: 10, scope: !145)
!200 = !DILocation(line: 64, column: 3, scope: !145)
!201 = !DILocation(line: 65, column: 2, scope: !145)
!202 = !DILocation(line: 67, column: 9, scope: !71)
!203 = !DILocation(line: 67, column: 2, scope: !71)
!204 = distinct !DISubprogram(name: "main", scope: !32, file: !32, line: 70, type: !205, scopeLine: 70, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !37)
!205 = !DISubroutineType(types: !206)
!206 = !{!20, !20, !207}
!207 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !23, size: 64)
!208 = !DILocalVariable(name: "argc", arg: 1, scope: !204, file: !32, line: 70, type: !20)
!209 = !DILocation(line: 70, column: 14, scope: !204)
!210 = !DILocalVariable(name: "argv", arg: 2, scope: !204, file: !32, line: 70, type: !207)
!211 = !DILocation(line: 70, column: 26, scope: !204)
!212 = !DILocalVariable(name: "files", scope: !204, file: !32, line: 71, type: !213)
!213 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 2048, elements: !47)
!214 = !DILocation(line: 71, column: 6, scope: !204)
!215 = !DILocalVariable(name: "fc", scope: !204, file: !32, line: 72, type: !20)
!216 = !DILocation(line: 72, column: 6, scope: !204)
!217 = !DILocalVariable(name: "i", scope: !218, file: !32, line: 74, type: !20)
!218 = distinct !DILexicalBlock(scope: !204, file: !32, line: 74, column: 2)
!219 = !DILocation(line: 74, column: 12, scope: !218)
!220 = !DILocation(line: 74, column: 8, scope: !218)
!221 = !DILocation(line: 74, column: 19, scope: !222)
!222 = distinct !DILexicalBlock(scope: !218, file: !32, line: 74, column: 2)
!223 = !DILocation(line: 74, column: 23, scope: !222)
!224 = !DILocation(line: 74, column: 21, scope: !222)
!225 = !DILocation(line: 74, column: 2, scope: !218)
!226 = !DILocation(line: 75, column: 8, scope: !227)
!227 = distinct !DILexicalBlock(scope: !228, file: !32, line: 75, column: 8)
!228 = distinct !DILexicalBlock(scope: !222, file: !32, line: 74, column: 36)
!229 = !DILocation(line: 75, column: 13, scope: !227)
!230 = !DILocation(line: 75, column: 19, scope: !227)
!231 = !DILocation(line: 75, column: 8, scope: !228)
!232 = !DILocation(line: 77, column: 16, scope: !233)
!233 = distinct !DILexicalBlock(scope: !227, file: !32, line: 75, column: 28)
!234 = !DILocation(line: 77, column: 10, scope: !233)
!235 = !DILocation(line: 77, column: 4, scope: !233)
!236 = !DILocation(line: 77, column: 14, scope: !233)
!237 = !DILocation(line: 78, column: 7, scope: !233)
!238 = !DILocation(line: 79, column: 3, scope: !233)
!239 = !DILocation(line: 80, column: 2, scope: !228)
!240 = !DILocation(line: 74, column: 31, scope: !222)
!241 = !DILocation(line: 74, column: 2, scope: !222)
!242 = distinct !{!242, !225, !243, !58}
!243 = !DILocation(line: 80, column: 2, scope: !218)
!244 = !DILocalVariable(name: "i", scope: !245, file: !32, line: 82, type: !20)
!245 = distinct !DILexicalBlock(scope: !204, file: !32, line: 82, column: 2)
!246 = !DILocation(line: 82, column: 12, scope: !245)
!247 = !DILocation(line: 82, column: 8, scope: !245)
!248 = !DILocation(line: 82, column: 19, scope: !249)
!249 = distinct !DILexicalBlock(scope: !245, file: !32, line: 82, column: 2)
!250 = !DILocation(line: 82, column: 23, scope: !249)
!251 = !DILocation(line: 82, column: 21, scope: !249)
!252 = !DILocation(line: 82, column: 2, scope: !245)
!253 = !DILocalVariable(name: "buf", scope: !254, file: !32, line: 83, type: !23)
!254 = distinct !DILexicalBlock(scope: !249, file: !32, line: 82, column: 34)
!255 = !DILocation(line: 83, column: 9, scope: !254)
!256 = !DILocation(line: 83, column: 24, scope: !254)
!257 = !DILocation(line: 83, column: 35, scope: !254)
!258 = !DILocation(line: 83, column: 29, scope: !254)
!259 = !DILocation(line: 83, column: 15, scope: !254)
!260 = !DILocation(line: 84, column: 11, scope: !254)
!261 = !DILocation(line: 84, column: 22, scope: !254)
!262 = !DILocation(line: 84, column: 16, scope: !254)
!263 = !DILocation(line: 84, column: 27, scope: !254)
!264 = !DILocation(line: 84, column: 3, scope: !254)
!265 = !DILocation(line: 85, column: 8, scope: !254)
!266 = !DILocation(line: 85, column: 3, scope: !254)
!267 = !DILocation(line: 86, column: 2, scope: !254)
!268 = !DILocation(line: 82, column: 29, scope: !249)
!269 = !DILocation(line: 82, column: 2, scope: !249)
!270 = distinct !{!270, !252, !271, !58}
!271 = !DILocation(line: 86, column: 2, scope: !245)
!272 = !DILocation(line: 87, column: 1, scope: !204)
