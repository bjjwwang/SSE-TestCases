; ModuleID = 'linux_bc/pass/CVE-2020-102320.ll'
source_filename = "/home/SVF-tools/SSE-TestCases/src/pass/CVE-2020-102320.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.tm = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i8* }
%struct.TSK_FS_META = type { i64, i64, i64 }

@.str = private unnamed_addr constant [26 x i8] c"0000-00-00 00:00:00 (UTC)\00", align 1
@.str.1 = private unnamed_addr constant [35 x i8] c"%.4d-%.2d-%.2d %.2d:%.2d:%.2d (%s)\00", align 1
@tzname = dso_local global [2 x i8*] zeroinitializer, align 16, !dbg !0
@.str.2 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.3 = private unnamed_addr constant [24 x i8] c"\0AAdjusted Inode Times:\0A\00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"Accessed:\09%s\0A\00", align 1
@.str.5 = private unnamed_addr constant [19 x i8] c"File Modified:\09%s\0A\00", align 1
@.str.6 = private unnamed_addr constant [20 x i8] c"Inode Modified:\09%s\0A\00", align 1
@.str.7 = private unnamed_addr constant [22 x i8] c"Eastern Standard Time\00", align 1
@.str.8 = private unnamed_addr constant [22 x i8] c"Eastern Daylight Time\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @tsk_fs_time_to_str(i64 %time, i8* %buf) #0 !dbg !20 {
entry:
  %time.addr = alloca i64, align 8
  %buf.addr = alloca i8*, align 8
  %tmTime = alloca %struct.tm*, align 8
  store i64 %time, i64* %time.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %time.addr, metadata !28, metadata !DIExpression()), !dbg !29
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !30, metadata !DIExpression()), !dbg !31
  %0 = load i8*, i8** %buf.addr, align 8, !dbg !32
  %arrayidx = getelementptr inbounds i8, i8* %0, i64 0, !dbg !32
  store i8 0, i8* %arrayidx, align 1, !dbg !33
  %1 = load i64, i64* %time.addr, align 8, !dbg !34
  %cmp = icmp sle i64 %1, 0, !dbg !36
  br i1 %cmp, label %if.then, label %if.else, !dbg !37

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %buf.addr, align 8, !dbg !38
  %call = call i8* @strncpy(i8* %2, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i64 128) #4, !dbg !40
  br label %if.end, !dbg !41

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.tm** %tmTime, metadata !42, metadata !DIExpression()), !dbg !61
  %call1 = call %struct.tm* @localtime(i64* %time.addr) #4, !dbg !62
  store %struct.tm* %call1, %struct.tm** %tmTime, align 8, !dbg !61
  %3 = load i8*, i8** %buf.addr, align 8, !dbg !63
  %4 = load %struct.tm*, %struct.tm** %tmTime, align 8, !dbg !64
  %tm_year = getelementptr inbounds %struct.tm, %struct.tm* %4, i32 0, i32 5, !dbg !65
  %5 = load i32, i32* %tm_year, align 4, !dbg !65
  %add = add nsw i32 %5, 1900, !dbg !66
  %6 = load %struct.tm*, %struct.tm** %tmTime, align 8, !dbg !67
  %tm_mon = getelementptr inbounds %struct.tm, %struct.tm* %6, i32 0, i32 4, !dbg !68
  %7 = load i32, i32* %tm_mon, align 8, !dbg !68
  %add2 = add nsw i32 %7, 1, !dbg !69
  %8 = load %struct.tm*, %struct.tm** %tmTime, align 8, !dbg !70
  %tm_mday = getelementptr inbounds %struct.tm, %struct.tm* %8, i32 0, i32 3, !dbg !71
  %9 = load i32, i32* %tm_mday, align 4, !dbg !71
  %10 = load %struct.tm*, %struct.tm** %tmTime, align 8, !dbg !72
  %tm_hour = getelementptr inbounds %struct.tm, %struct.tm* %10, i32 0, i32 2, !dbg !73
  %11 = load i32, i32* %tm_hour, align 8, !dbg !73
  %12 = load %struct.tm*, %struct.tm** %tmTime, align 8, !dbg !74
  %tm_min = getelementptr inbounds %struct.tm, %struct.tm* %12, i32 0, i32 1, !dbg !75
  %13 = load i32, i32* %tm_min, align 4, !dbg !75
  %14 = load %struct.tm*, %struct.tm** %tmTime, align 8, !dbg !76
  %tm_sec = getelementptr inbounds %struct.tm, %struct.tm* %14, i32 0, i32 0, !dbg !77
  %15 = load i32, i32* %tm_sec, align 8, !dbg !77
  %16 = load %struct.tm*, %struct.tm** %tmTime, align 8, !dbg !78
  %tm_isdst = getelementptr inbounds %struct.tm, %struct.tm* %16, i32 0, i32 8, !dbg !79
  %17 = load i32, i32* %tm_isdst, align 8, !dbg !79
  %cmp3 = icmp eq i32 %17, 0, !dbg !80
  %18 = zext i1 %cmp3 to i64, !dbg !81
  %cond = select i1 %cmp3, i32 0, i32 1, !dbg !81
  %idxprom = sext i32 %cond to i64, !dbg !82
  %arrayidx4 = getelementptr inbounds [2 x i8*], [2 x i8*]* @tzname, i64 0, i64 %idxprom, !dbg !82
  %19 = load i8*, i8** %arrayidx4, align 8, !dbg !82
  %call5 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %3, i64 128, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i64 0, i64 0), i32 %add, i32 %add2, i32 %9, i32 %11, i32 %13, i32 %15, i8* %19) #4, !dbg !83
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %20 = load i8*, i8** %buf.addr, align 8, !dbg !84
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i8* %20), !dbg !85
  %21 = load i8*, i8** %buf.addr, align 8, !dbg !86
  ret i8* %21, !dbg !87
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local i8* @strncpy(i8*, i8*, i64) #2

; Function Attrs: nounwind
declare dso_local %struct.tm* @localtime(i64*) #2

; Function Attrs: nounwind
declare dso_local i32 @snprintf(i8*, i64, i8*, ...) #2

declare dso_local i32 @printf(i8*, ...) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @yaffsfs_istat(%struct.TSK_FS_META* %fs_meta) #0 !dbg !88 {
entry:
  %fs_meta.addr = alloca %struct.TSK_FS_META*, align 8
  %timeBuf = alloca [32 x i8], align 16
  store %struct.TSK_FS_META* %fs_meta, %struct.TSK_FS_META** %fs_meta.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.TSK_FS_META** %fs_meta.addr, metadata !98, metadata !DIExpression()), !dbg !99
  call void @llvm.dbg.declare(metadata [32 x i8]* %timeBuf, metadata !100, metadata !DIExpression()), !dbg !104
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0)), !dbg !105
  %0 = load %struct.TSK_FS_META*, %struct.TSK_FS_META** %fs_meta.addr, align 8, !dbg !108
  %atime = getelementptr inbounds %struct.TSK_FS_META, %struct.TSK_FS_META* %0, i32 0, i32 1, !dbg !109
  %1 = load i64, i64* %atime, align 8, !dbg !109
  %arraydecay = getelementptr inbounds [32 x i8], [32 x i8]* %timeBuf, i64 0, i64 0, !dbg !110
  %call1 = call i8* @tsk_fs_time_to_str(i64 %1, i8* %arraydecay), !dbg !111
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i8* %call1), !dbg !112
  %2 = load %struct.TSK_FS_META*, %struct.TSK_FS_META** %fs_meta.addr, align 8, !dbg !113
  %mtime = getelementptr inbounds %struct.TSK_FS_META, %struct.TSK_FS_META* %2, i32 0, i32 0, !dbg !114
  %3 = load i64, i64* %mtime, align 8, !dbg !114
  %arraydecay3 = getelementptr inbounds [32 x i8], [32 x i8]* %timeBuf, i64 0, i64 0, !dbg !115
  %call4 = call i8* @tsk_fs_time_to_str(i64 %3, i8* %arraydecay3), !dbg !116
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0), i8* %call4), !dbg !117
  %4 = load %struct.TSK_FS_META*, %struct.TSK_FS_META** %fs_meta.addr, align 8, !dbg !118
  %ctime = getelementptr inbounds %struct.TSK_FS_META, %struct.TSK_FS_META* %4, i32 0, i32 2, !dbg !119
  %5 = load i64, i64* %ctime, align 8, !dbg !119
  %arraydecay6 = getelementptr inbounds [32 x i8], [32 x i8]* %timeBuf, i64 0, i64 0, !dbg !120
  %call7 = call i8* @tsk_fs_time_to_str(i64 %5, i8* %arraydecay6), !dbg !121
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6, i64 0, i64 0), i8* %call7), !dbg !122
  ret void, !dbg !123
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !124 {
entry:
  %fs_meta = alloca %struct.TSK_FS_META, align 8
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @tzname, i64 0, i64 0), align 16, !dbg !126
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8, i64 0, i64 0), i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @tzname, i64 0, i64 1), align 8, !dbg !129
  call void @llvm.dbg.declare(metadata %struct.TSK_FS_META* %fs_meta, metadata !130, metadata !DIExpression()), !dbg !131
  %mtime = getelementptr inbounds %struct.TSK_FS_META, %struct.TSK_FS_META* %fs_meta, i32 0, i32 0, !dbg !132
  store i64 1641038400, i64* %mtime, align 8, !dbg !133
  %atime = getelementptr inbounds %struct.TSK_FS_META, %struct.TSK_FS_META* %fs_meta, i32 0, i32 1, !dbg !134
  store i64 1641038400, i64* %atime, align 8, !dbg !135
  %ctime = getelementptr inbounds %struct.TSK_FS_META, %struct.TSK_FS_META* %fs_meta, i32 0, i32 2, !dbg !136
  store i64 1641038400, i64* %ctime, align 8, !dbg !137
  call void @yaffsfs_istat(%struct.TSK_FS_META* %fs_meta), !dbg !138
  ret i32 0, !dbg !139
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!14, !15, !16, !17, !18}
!llvm.ident = !{!19}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "tzname", scope: !2, file: !8, line: 16, type: !9, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !7, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "/home/SVF-tools/SSE-TestCases/src/pass/CVE-2020-102320.c", directory: "/home/SVF-tools/SSE-TestCases")
!4 = !{}
!5 = !{!6}
!6 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!7 = !{!0}
!8 = !DIFile(filename: "src/pass/CVE-2020-102320.c", directory: "/home/SVF-tools/SSE-TestCases")
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !10, size: 128, elements: !12)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!11 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!12 = !{!13}
!13 = !DISubrange(count: 2)
!14 = !{i32 7, !"Dwarf Version", i32 4}
!15 = !{i32 2, !"Debug Info Version", i32 3}
!16 = !{i32 1, !"wchar_size", i32 4}
!17 = !{i32 7, !"uwtable", i32 1}
!18 = !{i32 7, !"frame-pointer", i32 2}
!19 = !{!"clang version 13.0.0"}
!20 = distinct !DISubprogram(name: "tsk_fs_time_to_str", scope: !8, file: !8, line: 25, type: !21, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!21 = !DISubroutineType(types: !22)
!22 = !{!10, !23, !10}
!23 = !DIDerivedType(tag: DW_TAG_typedef, name: "time_t", file: !24, line: 7, baseType: !25)
!24 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/time_t.h", directory: "")
!25 = !DIDerivedType(tag: DW_TAG_typedef, name: "__time_t", file: !26, line: 160, baseType: !27)
!26 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!27 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!28 = !DILocalVariable(name: "time", arg: 1, scope: !20, file: !8, line: 25, type: !23)
!29 = !DILocation(line: 25, column: 34, scope: !20)
!30 = !DILocalVariable(name: "buf", arg: 2, scope: !20, file: !8, line: 25, type: !10)
!31 = !DILocation(line: 25, column: 45, scope: !20)
!32 = !DILocation(line: 26, column: 5, scope: !20)
!33 = !DILocation(line: 26, column: 12, scope: !20)
!34 = !DILocation(line: 27, column: 9, scope: !35)
!35 = distinct !DILexicalBlock(scope: !20, file: !8, line: 27, column: 9)
!36 = !DILocation(line: 27, column: 14, scope: !35)
!37 = !DILocation(line: 27, column: 9, scope: !20)
!38 = !DILocation(line: 28, column: 17, scope: !39)
!39 = distinct !DILexicalBlock(scope: !35, file: !8, line: 27, column: 20)
!40 = !DILocation(line: 28, column: 9, scope: !39)
!41 = !DILocation(line: 29, column: 5, scope: !39)
!42 = !DILocalVariable(name: "tmTime", scope: !43, file: !8, line: 31, type: !44)
!43 = distinct !DILexicalBlock(scope: !35, file: !8, line: 30, column: 10)
!44 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !45, size: 64)
!45 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !46, line: 7, size: 448, elements: !47)
!46 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h", directory: "")
!47 = !{!48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58}
!48 = !DIDerivedType(tag: DW_TAG_member, name: "tm_sec", scope: !45, file: !46, line: 9, baseType: !6, size: 32)
!49 = !DIDerivedType(tag: DW_TAG_member, name: "tm_min", scope: !45, file: !46, line: 10, baseType: !6, size: 32, offset: 32)
!50 = !DIDerivedType(tag: DW_TAG_member, name: "tm_hour", scope: !45, file: !46, line: 11, baseType: !6, size: 32, offset: 64)
!51 = !DIDerivedType(tag: DW_TAG_member, name: "tm_mday", scope: !45, file: !46, line: 12, baseType: !6, size: 32, offset: 96)
!52 = !DIDerivedType(tag: DW_TAG_member, name: "tm_mon", scope: !45, file: !46, line: 13, baseType: !6, size: 32, offset: 128)
!53 = !DIDerivedType(tag: DW_TAG_member, name: "tm_year", scope: !45, file: !46, line: 14, baseType: !6, size: 32, offset: 160)
!54 = !DIDerivedType(tag: DW_TAG_member, name: "tm_wday", scope: !45, file: !46, line: 15, baseType: !6, size: 32, offset: 192)
!55 = !DIDerivedType(tag: DW_TAG_member, name: "tm_yday", scope: !45, file: !46, line: 16, baseType: !6, size: 32, offset: 224)
!56 = !DIDerivedType(tag: DW_TAG_member, name: "tm_isdst", scope: !45, file: !46, line: 17, baseType: !6, size: 32, offset: 256)
!57 = !DIDerivedType(tag: DW_TAG_member, name: "tm_gmtoff", scope: !45, file: !46, line: 20, baseType: !27, size: 64, offset: 320)
!58 = !DIDerivedType(tag: DW_TAG_member, name: "tm_zone", scope: !45, file: !46, line: 21, baseType: !59, size: 64, offset: 384)
!59 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !60, size: 64)
!60 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !11)
!61 = !DILocation(line: 31, column: 20, scope: !43)
!62 = !DILocation(line: 31, column: 29, scope: !43)
!63 = !DILocation(line: 33, column: 18, scope: !43)
!64 = !DILocation(line: 34, column: 19, scope: !43)
!65 = !DILocation(line: 34, column: 27, scope: !43)
!66 = !DILocation(line: 34, column: 35, scope: !43)
!67 = !DILocation(line: 35, column: 19, scope: !43)
!68 = !DILocation(line: 35, column: 27, scope: !43)
!69 = !DILocation(line: 35, column: 34, scope: !43)
!70 = !DILocation(line: 36, column: 19, scope: !43)
!71 = !DILocation(line: 36, column: 27, scope: !43)
!72 = !DILocation(line: 37, column: 13, scope: !43)
!73 = !DILocation(line: 37, column: 21, scope: !43)
!74 = !DILocation(line: 38, column: 19, scope: !43)
!75 = !DILocation(line: 38, column: 27, scope: !43)
!76 = !DILocation(line: 39, column: 19, scope: !43)
!77 = !DILocation(line: 39, column: 27, scope: !43)
!78 = !DILocation(line: 40, column: 21, scope: !43)
!79 = !DILocation(line: 40, column: 29, scope: !43)
!80 = !DILocation(line: 40, column: 38, scope: !43)
!81 = !DILocation(line: 40, column: 20, scope: !43)
!82 = !DILocation(line: 40, column: 13, scope: !43)
!83 = !DILocation(line: 33, column: 9, scope: !43)
!84 = !DILocation(line: 42, column: 20, scope: !20)
!85 = !DILocation(line: 42, column: 5, scope: !20)
!86 = !DILocation(line: 43, column: 12, scope: !20)
!87 = !DILocation(line: 43, column: 5, scope: !20)
!88 = distinct !DISubprogram(name: "yaffsfs_istat", scope: !8, file: !8, line: 46, type: !89, scopeLine: 46, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!89 = !DISubroutineType(types: !90)
!90 = !{null, !91}
!91 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !92, size: 64)
!92 = !DIDerivedType(tag: DW_TAG_typedef, name: "TSK_FS_META", file: !8, line: 23, baseType: !93)
!93 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !8, line: 19, size: 192, elements: !94)
!94 = !{!95, !96, !97}
!95 = !DIDerivedType(tag: DW_TAG_member, name: "mtime", scope: !93, file: !8, line: 20, baseType: !23, size: 64)
!96 = !DIDerivedType(tag: DW_TAG_member, name: "atime", scope: !93, file: !8, line: 21, baseType: !23, size: 64, offset: 64)
!97 = !DIDerivedType(tag: DW_TAG_member, name: "ctime", scope: !93, file: !8, line: 22, baseType: !23, size: 64, offset: 128)
!98 = !DILocalVariable(name: "fs_meta", arg: 1, scope: !88, file: !8, line: 46, type: !91)
!99 = !DILocation(line: 46, column: 33, scope: !88)
!100 = !DILocalVariable(name: "timeBuf", scope: !88, file: !8, line: 47, type: !101)
!101 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 256, elements: !102)
!102 = !{!103}
!103 = !DISubrange(count: 32)
!104 = !DILocation(line: 47, column: 10, scope: !88)
!105 = !DILocation(line: 50, column: 9, scope: !106)
!106 = distinct !DILexicalBlock(scope: !107, file: !8, line: 49, column: 15)
!107 = distinct !DILexicalBlock(scope: !88, file: !8, line: 49, column: 9)
!108 = !DILocation(line: 51, column: 54, scope: !106)
!109 = !DILocation(line: 51, column: 63, scope: !106)
!110 = !DILocation(line: 51, column: 70, scope: !106)
!111 = !DILocation(line: 51, column: 35, scope: !106)
!112 = !DILocation(line: 51, column: 9, scope: !106)
!113 = !DILocation(line: 52, column: 59, scope: !106)
!114 = !DILocation(line: 52, column: 68, scope: !106)
!115 = !DILocation(line: 52, column: 75, scope: !106)
!116 = !DILocation(line: 52, column: 40, scope: !106)
!117 = !DILocation(line: 52, column: 9, scope: !106)
!118 = !DILocation(line: 53, column: 60, scope: !106)
!119 = !DILocation(line: 53, column: 69, scope: !106)
!120 = !DILocation(line: 53, column: 76, scope: !106)
!121 = !DILocation(line: 53, column: 41, scope: !106)
!122 = !DILocation(line: 53, column: 9, scope: !106)
!123 = !DILocation(line: 55, column: 1, scope: !88)
!124 = distinct !DISubprogram(name: "main", scope: !8, file: !8, line: 57, type: !125, scopeLine: 57, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!125 = !DISubroutineType(types: !5)
!126 = !DILocation(line: 59, column: 19, scope: !127)
!127 = distinct !DILexicalBlock(scope: !128, file: !8, line: 58, column: 28)
!128 = distinct !DILexicalBlock(scope: !124, file: !8, line: 58, column: 8)
!129 = !DILocation(line: 60, column: 19, scope: !127)
!130 = !DILocalVariable(name: "fs_meta", scope: !124, file: !8, line: 67, type: !92)
!131 = !DILocation(line: 67, column: 17, scope: !124)
!132 = !DILocation(line: 68, column: 13, scope: !124)
!133 = !DILocation(line: 68, column: 19, scope: !124)
!134 = !DILocation(line: 69, column: 13, scope: !124)
!135 = !DILocation(line: 69, column: 19, scope: !124)
!136 = !DILocation(line: 70, column: 13, scope: !124)
!137 = !DILocation(line: 70, column: 19, scope: !124)
!138 = !DILocation(line: 71, column: 5, scope: !124)
!139 = !DILocation(line: 72, column: 1, scope: !124)
