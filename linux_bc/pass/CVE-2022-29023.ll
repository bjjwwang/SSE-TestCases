; ModuleID = 'linux_bc/pass/CVE-2022-29023.ll'
source_filename = "/home/SVF-tools/SSE-TestCases/src/pass/CVE-2022-29023.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.razer_report = type { [80 x i8] }

@.str = private unnamed_addr constant [7 x i8] c"13aa45\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @get_razer_report(%struct.razer_report* noalias sret(%struct.razer_report) align 1 %agg.result) #0 !dbg !15 {
entry:
  call void @llvm.dbg.declare(metadata %struct.razer_report* %agg.result, metadata !25, metadata !DIExpression()), !dbg !26
  %0 = bitcast %struct.razer_report* %agg.result to i8*, !dbg !26
  call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 0, i64 80, i1 false), !dbg !26
  %1 = bitcast %struct.razer_report* %agg.result to i8*, !dbg !27
  call void @llvm.memset.p0i8.i64(i8* align 1 %1, i8 0, i64 80, i1 false), !dbg !27
  ret void, !dbg !28
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @razer_chroma_standard_matrix_set_custom_frame(%struct.razer_report* noalias sret(%struct.razer_report) align 1 %agg.result, i8 zeroext %start_col, i8 zeroext %stop_col, i8* %rgb_data) #0 !dbg !29 {
entry:
  %start_col.addr = alloca i8, align 1
  %stop_col.addr = alloca i8, align 1
  %rgb_data.addr = alloca i8*, align 8
  %row_length = alloca i64, align 8
  store i8 %start_col, i8* %start_col.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %start_col.addr, metadata !32, metadata !DIExpression()), !dbg !33
  store i8 %stop_col, i8* %stop_col.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %stop_col.addr, metadata !34, metadata !DIExpression()), !dbg !35
  store i8* %rgb_data, i8** %rgb_data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %rgb_data.addr, metadata !36, metadata !DIExpression()), !dbg !37
  call void @llvm.dbg.declare(metadata i64* %row_length, metadata !38, metadata !DIExpression()), !dbg !39
  %0 = load i8, i8* %stop_col.addr, align 1, !dbg !40
  %conv = zext i8 %0 to i32, !dbg !40
  %add = add nsw i32 %conv, 1, !dbg !41
  %1 = load i8, i8* %start_col.addr, align 1, !dbg !42
  %conv1 = zext i8 %1 to i32, !dbg !42
  %sub = sub nsw i32 %add, %conv1, !dbg !43
  %mul = mul nsw i32 %sub, 3, !dbg !44
  %conv2 = sext i32 %mul to i64, !dbg !45
  store i64 %conv2, i64* %row_length, align 8, !dbg !39
  call void @llvm.dbg.declare(metadata %struct.razer_report* %agg.result, metadata !46, metadata !DIExpression()), !dbg !47
  call void @get_razer_report(%struct.razer_report* sret(%struct.razer_report) align 1 %agg.result), !dbg !48
  %arguments = getelementptr inbounds %struct.razer_report, %struct.razer_report* %agg.result, i32 0, i32 0, !dbg !49
  %arrayidx = getelementptr inbounds [80 x i8], [80 x i8]* %arguments, i64 0, i64 4, !dbg !50
  %2 = load i8*, i8** %rgb_data.addr, align 8, !dbg !51
  %3 = load i64, i64* %row_length, align 8, !dbg !52
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %arrayidx, i8* align 1 %2, i64 %3, i1 false), !dbg !53
  ret void, !dbg !54
}

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @razer_attr_write_set_key_row(i8* %buf, i64 %count) #0 !dbg !55 {
entry:
  %buf.addr = alloca i8*, align 8
  %count.addr = alloca i64, align 8
  %report = alloca %struct.razer_report, align 1
  %offset = alloca i64, align 8
  %row_id = alloca i8, align 1
  %start_col = alloca i8, align 1
  %stop_col = alloca i8, align 1
  %row_length = alloca i8, align 1
  %tmp = alloca %struct.razer_report, align 1
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !66, metadata !DIExpression()), !dbg !67
  store i64 %count, i64* %count.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !68, metadata !DIExpression()), !dbg !69
  call void @llvm.dbg.declare(metadata %struct.razer_report* %report, metadata !70, metadata !DIExpression()), !dbg !71
  %0 = bitcast %struct.razer_report* %report to i8*, !dbg !71
  call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 0, i64 80, i1 false), !dbg !71
  call void @llvm.dbg.declare(metadata i64* %offset, metadata !72, metadata !DIExpression()), !dbg !73
  store i64 0, i64* %offset, align 8, !dbg !73
  call void @llvm.dbg.declare(metadata i8* %row_id, metadata !74, metadata !DIExpression()), !dbg !75
  call void @llvm.dbg.declare(metadata i8* %start_col, metadata !76, metadata !DIExpression()), !dbg !77
  call void @llvm.dbg.declare(metadata i8* %stop_col, metadata !78, metadata !DIExpression()), !dbg !79
  call void @llvm.dbg.declare(metadata i8* %row_length, metadata !80, metadata !DIExpression()), !dbg !81
  br label %while.cond, !dbg !82

while.cond:                                       ; preds = %if.end24, %entry
  %1 = load i64, i64* %offset, align 8, !dbg !83
  %2 = load i64, i64* %count.addr, align 8, !dbg !84
  %cmp = icmp ult i64 %1, %2, !dbg !85
  br i1 %cmp, label %while.body, label %while.end, !dbg !82

while.body:                                       ; preds = %while.cond
  %3 = load i64, i64* %offset, align 8, !dbg !86
  %add = add i64 %3, 3, !dbg !89
  %4 = load i64, i64* %count.addr, align 8, !dbg !90
  %cmp1 = icmp ugt i64 %add, %4, !dbg !91
  br i1 %cmp1, label %if.then, label %if.end, !dbg !92

if.then:                                          ; preds = %while.body
  br label %while.end, !dbg !93

if.end:                                           ; preds = %while.body
  %5 = load i8*, i8** %buf.addr, align 8, !dbg !95
  %6 = load i64, i64* %offset, align 8, !dbg !96
  %inc = add i64 %6, 1, !dbg !96
  store i64 %inc, i64* %offset, align 8, !dbg !96
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 %6, !dbg !95
  %7 = load i8, i8* %arrayidx, align 1, !dbg !95
  store i8 %7, i8* %row_id, align 1, !dbg !97
  %8 = load i8*, i8** %buf.addr, align 8, !dbg !98
  %9 = load i64, i64* %offset, align 8, !dbg !99
  %inc2 = add i64 %9, 1, !dbg !99
  store i64 %inc2, i64* %offset, align 8, !dbg !99
  %arrayidx3 = getelementptr inbounds i8, i8* %8, i64 %9, !dbg !98
  %10 = load i8, i8* %arrayidx3, align 1, !dbg !98
  store i8 %10, i8* %start_col, align 1, !dbg !100
  %11 = load i8*, i8** %buf.addr, align 8, !dbg !101
  %12 = load i64, i64* %offset, align 8, !dbg !102
  %inc4 = add i64 %12, 1, !dbg !102
  store i64 %inc4, i64* %offset, align 8, !dbg !102
  %arrayidx5 = getelementptr inbounds i8, i8* %11, i64 %12, !dbg !101
  %13 = load i8, i8* %arrayidx5, align 1, !dbg !101
  store i8 %13, i8* %stop_col, align 1, !dbg !103
  %14 = load i8, i8* %stop_col, align 1, !dbg !104
  %conv = zext i8 %14 to i32, !dbg !104
  %add6 = add nsw i32 %conv, 1, !dbg !105
  %15 = load i8, i8* %start_col, align 1, !dbg !106
  %conv7 = zext i8 %15 to i32, !dbg !106
  %sub = sub nsw i32 %add6, %conv7, !dbg !107
  %mul = mul nsw i32 %sub, 3, !dbg !108
  %conv8 = trunc i32 %mul to i8, !dbg !109
  store i8 %conv8, i8* %row_length, align 1, !dbg !110
  %16 = load i8, i8* %start_col, align 1, !dbg !111
  %conv9 = zext i8 %16 to i32, !dbg !111
  %17 = load i8, i8* %stop_col, align 1, !dbg !113
  %conv10 = zext i8 %17 to i32, !dbg !113
  %cmp11 = icmp sgt i32 %conv9, %conv10, !dbg !114
  br i1 %cmp11, label %if.then17, label %lor.lhs.false, !dbg !115

lor.lhs.false:                                    ; preds = %if.end
  %18 = load i64, i64* %offset, align 8, !dbg !116
  %19 = load i8, i8* %row_length, align 1, !dbg !117
  %conv13 = zext i8 %19 to i64, !dbg !117
  %add14 = add i64 %18, %conv13, !dbg !118
  %20 = load i64, i64* %count.addr, align 8, !dbg !119
  %cmp15 = icmp ugt i64 %add14, %20, !dbg !120
  br i1 %cmp15, label %if.then17, label %if.end18, !dbg !121

if.then17:                                        ; preds = %lor.lhs.false, %if.end
  br label %while.end, !dbg !122

if.end18:                                         ; preds = %lor.lhs.false
  %21 = load i64, i64* %offset, align 8, !dbg !124
  %22 = load i8, i8* %row_length, align 1, !dbg !126
  %conv19 = zext i8 %22 to i64, !dbg !126
  %add20 = add i64 %21, %conv19, !dbg !127
  %23 = load i64, i64* %count.addr, align 8, !dbg !128
  %cmp21 = icmp ugt i64 %add20, %23, !dbg !129
  br i1 %cmp21, label %if.then23, label %if.end24, !dbg !130

if.then23:                                        ; preds = %if.end18
  br label %while.end, !dbg !131

if.end24:                                         ; preds = %if.end18
  %24 = load i8, i8* %start_col, align 1, !dbg !133
  %25 = load i8, i8* %stop_col, align 1, !dbg !134
  %26 = load i8*, i8** %buf.addr, align 8, !dbg !135
  %27 = load i64, i64* %offset, align 8, !dbg !136
  %arrayidx25 = getelementptr inbounds i8, i8* %26, i64 %27, !dbg !135
  call void @razer_chroma_standard_matrix_set_custom_frame(%struct.razer_report* sret(%struct.razer_report) align 1 %tmp, i8 zeroext %24, i8 zeroext %25, i8* %arrayidx25), !dbg !137
  %28 = bitcast %struct.razer_report* %report to i8*, !dbg !137
  %29 = bitcast %struct.razer_report* %tmp to i8*, !dbg !137
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %28, i8* align 1 %29, i64 80, i1 false), !dbg !137
  %30 = load i8, i8* %row_length, align 1, !dbg !138
  %conv26 = zext i8 %30 to i64, !dbg !138
  %31 = load i64, i64* %offset, align 8, !dbg !139
  %add27 = add i64 %31, %conv26, !dbg !139
  store i64 %add27, i64* %offset, align 8, !dbg !139
  br label %while.cond, !dbg !82, !llvm.loop !140

while.end:                                        ; preds = %if.then23, %if.then17, %if.then, %while.cond
  %32 = load i64, i64* %count.addr, align 8, !dbg !143
  ret i64 %32, !dbg !144
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !145 {
entry:
  %call = call i64 @razer_attr_write_set_key_row(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i64 144), !dbg !149
  ret i32 0, !dbg !150
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nofree nounwind willreturn writeonly }
attributes #3 = { argmemonly nofree nounwind willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!9, !10, !11, !12, !13}
!llvm.ident = !{!14}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/SVF-tools/SSE-TestCases/src/pass/CVE-2022-29023.c", directory: "/home/SVF-tools/SSE-TestCases")
!2 = !{}
!3 = !{!4, !7}
!4 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !5, line: 46, baseType: !6)
!5 = !DIFile(filename: "SVF/llvm-13.0.0.obj/lib/clang/13.0.0/include/stddef.h", directory: "/home/SVF-tools")
!6 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64)
!8 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!9 = !{i32 7, !"Dwarf Version", i32 4}
!10 = !{i32 2, !"Debug Info Version", i32 3}
!11 = !{i32 1, !"wchar_size", i32 4}
!12 = !{i32 7, !"uwtable", i32 1}
!13 = !{i32 7, !"frame-pointer", i32 2}
!14 = !{!"clang version 13.0.0"}
!15 = distinct !DISubprogram(name: "get_razer_report", scope: !16, file: !16, line: 27, type: !17, scopeLine: 27, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!16 = !DIFile(filename: "src/pass/CVE-2022-29023.c", directory: "/home/SVF-tools/SSE-TestCases")
!17 = !DISubroutineType(types: !18)
!18 = !{!19}
!19 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "razer_report", file: !16, line: 23, size: 640, elements: !20)
!20 = !{!21}
!21 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !19, file: !16, line: 24, baseType: !22, size: 640)
!22 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 640, elements: !23)
!23 = !{!24}
!24 = !DISubrange(count: 80)
!25 = !DILocalVariable(name: "new_report", scope: !15, file: !16, line: 28, type: !19)
!26 = !DILocation(line: 28, column: 25, scope: !15)
!27 = !DILocation(line: 29, column: 5, scope: !15)
!28 = !DILocation(line: 30, column: 5, scope: !15)
!29 = distinct !DISubprogram(name: "razer_chroma_standard_matrix_set_custom_frame", scope: !16, file: !16, line: 33, type: !30, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!30 = !DISubroutineType(types: !31)
!31 = !{!19, !8, !8, !7}
!32 = !DILocalVariable(name: "start_col", arg: 1, scope: !29, file: !16, line: 33, type: !8)
!33 = !DILocation(line: 33, column: 81, scope: !29)
!34 = !DILocalVariable(name: "stop_col", arg: 2, scope: !29, file: !16, line: 33, type: !8)
!35 = !DILocation(line: 33, column: 106, scope: !29)
!36 = !DILocalVariable(name: "rgb_data", arg: 3, scope: !29, file: !16, line: 33, type: !7)
!37 = !DILocation(line: 33, column: 131, scope: !29)
!38 = !DILocalVariable(name: "row_length", scope: !29, file: !16, line: 34, type: !4)
!39 = !DILocation(line: 34, column: 12, scope: !29)
!40 = !DILocation(line: 34, column: 37, scope: !29)
!41 = !DILocation(line: 34, column: 46, scope: !29)
!42 = !DILocation(line: 34, column: 53, scope: !29)
!43 = !DILocation(line: 34, column: 51, scope: !29)
!44 = !DILocation(line: 34, column: 64, scope: !29)
!45 = !DILocation(line: 34, column: 25, scope: !29)
!46 = !DILocalVariable(name: "report", scope: !29, file: !16, line: 35, type: !19)
!47 = !DILocation(line: 35, column: 25, scope: !29)
!48 = !DILocation(line: 35, column: 34, scope: !29)
!49 = !DILocation(line: 37, column: 20, scope: !29)
!50 = !DILocation(line: 37, column: 13, scope: !29)
!51 = !DILocation(line: 37, column: 34, scope: !29)
!52 = !DILocation(line: 37, column: 44, scope: !29)
!53 = !DILocation(line: 37, column: 5, scope: !29)
!54 = !DILocation(line: 38, column: 5, scope: !29)
!55 = distinct !DISubprogram(name: "razer_attr_write_set_key_row", scope: !16, file: !16, line: 41, type: !56, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!56 = !DISubroutineType(types: !57)
!57 = !{!58, !63, !4}
!58 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssize_t", file: !59, line: 77, baseType: !60)
!59 = !DIFile(filename: "/usr/include/stdio.h", directory: "")
!60 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ssize_t", file: !61, line: 193, baseType: !62)
!61 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!62 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!63 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !64, size: 64)
!64 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !65)
!65 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!66 = !DILocalVariable(name: "buf", arg: 1, scope: !55, file: !16, line: 41, type: !63)
!67 = !DILocation(line: 41, column: 50, scope: !55)
!68 = !DILocalVariable(name: "count", arg: 2, scope: !55, file: !16, line: 41, type: !4)
!69 = !DILocation(line: 41, column: 62, scope: !55)
!70 = !DILocalVariable(name: "report", scope: !55, file: !16, line: 42, type: !19)
!71 = !DILocation(line: 42, column: 25, scope: !55)
!72 = !DILocalVariable(name: "offset", scope: !55, file: !16, line: 43, type: !4)
!73 = !DILocation(line: 43, column: 12, scope: !55)
!74 = !DILocalVariable(name: "row_id", scope: !55, file: !16, line: 44, type: !8)
!75 = !DILocation(line: 44, column: 19, scope: !55)
!76 = !DILocalVariable(name: "start_col", scope: !55, file: !16, line: 45, type: !8)
!77 = !DILocation(line: 45, column: 19, scope: !55)
!78 = !DILocalVariable(name: "stop_col", scope: !55, file: !16, line: 46, type: !8)
!79 = !DILocation(line: 46, column: 19, scope: !55)
!80 = !DILocalVariable(name: "row_length", scope: !55, file: !16, line: 47, type: !8)
!81 = !DILocation(line: 47, column: 19, scope: !55)
!82 = !DILocation(line: 49, column: 5, scope: !55)
!83 = !DILocation(line: 49, column: 11, scope: !55)
!84 = !DILocation(line: 49, column: 20, scope: !55)
!85 = !DILocation(line: 49, column: 18, scope: !55)
!86 = !DILocation(line: 50, column: 12, scope: !87)
!87 = distinct !DILexicalBlock(scope: !88, file: !16, line: 50, column: 12)
!88 = distinct !DILexicalBlock(scope: !55, file: !16, line: 49, column: 27)
!89 = !DILocation(line: 50, column: 19, scope: !87)
!90 = !DILocation(line: 50, column: 25, scope: !87)
!91 = !DILocation(line: 50, column: 23, scope: !87)
!92 = !DILocation(line: 50, column: 12, scope: !88)
!93 = !DILocation(line: 51, column: 13, scope: !94)
!94 = distinct !DILexicalBlock(scope: !87, file: !16, line: 50, column: 32)
!95 = !DILocation(line: 54, column: 18, scope: !88)
!96 = !DILocation(line: 54, column: 28, scope: !88)
!97 = !DILocation(line: 54, column: 16, scope: !88)
!98 = !DILocation(line: 55, column: 21, scope: !88)
!99 = !DILocation(line: 55, column: 31, scope: !88)
!100 = !DILocation(line: 55, column: 19, scope: !88)
!101 = !DILocation(line: 56, column: 20, scope: !88)
!102 = !DILocation(line: 56, column: 30, scope: !88)
!103 = !DILocation(line: 56, column: 18, scope: !88)
!104 = !DILocation(line: 57, column: 24, scope: !88)
!105 = !DILocation(line: 57, column: 32, scope: !88)
!106 = !DILocation(line: 57, column: 38, scope: !88)
!107 = !DILocation(line: 57, column: 36, scope: !88)
!108 = !DILocation(line: 57, column: 49, scope: !88)
!109 = !DILocation(line: 57, column: 22, scope: !88)
!110 = !DILocation(line: 57, column: 20, scope: !88)
!111 = !DILocation(line: 62, column: 12, scope: !112)
!112 = distinct !DILexicalBlock(scope: !88, file: !16, line: 62, column: 12)
!113 = !DILocation(line: 62, column: 24, scope: !112)
!114 = !DILocation(line: 62, column: 22, scope: !112)
!115 = !DILocation(line: 62, column: 33, scope: !112)
!116 = !DILocation(line: 62, column: 36, scope: !112)
!117 = !DILocation(line: 62, column: 45, scope: !112)
!118 = !DILocation(line: 62, column: 43, scope: !112)
!119 = !DILocation(line: 62, column: 58, scope: !112)
!120 = !DILocation(line: 62, column: 56, scope: !112)
!121 = !DILocation(line: 62, column: 12, scope: !88)
!122 = !DILocation(line: 63, column: 13, scope: !123)
!123 = distinct !DILexicalBlock(scope: !112, file: !16, line: 62, column: 65)
!124 = !DILocation(line: 65, column: 12, scope: !125)
!125 = distinct !DILexicalBlock(scope: !88, file: !16, line: 65, column: 12)
!126 = !DILocation(line: 65, column: 21, scope: !125)
!127 = !DILocation(line: 65, column: 19, scope: !125)
!128 = !DILocation(line: 65, column: 34, scope: !125)
!129 = !DILocation(line: 65, column: 32, scope: !125)
!130 = !DILocation(line: 65, column: 12, scope: !88)
!131 = !DILocation(line: 66, column: 13, scope: !132)
!132 = distinct !DILexicalBlock(scope: !125, file: !16, line: 65, column: 41)
!133 = !DILocation(line: 69, column: 64, scope: !88)
!134 = !DILocation(line: 69, column: 75, scope: !88)
!135 = !DILocation(line: 69, column: 102, scope: !88)
!136 = !DILocation(line: 69, column: 106, scope: !88)
!137 = !DILocation(line: 69, column: 18, scope: !88)
!138 = !DILocation(line: 70, column: 19, scope: !88)
!139 = !DILocation(line: 70, column: 16, scope: !88)
!140 = distinct !{!140, !82, !141, !142}
!141 = !DILocation(line: 71, column: 5, scope: !55)
!142 = !{!"llvm.loop.mustprogress"}
!143 = !DILocation(line: 72, column: 12, scope: !55)
!144 = !DILocation(line: 72, column: 5, scope: !55)
!145 = distinct !DISubprogram(name: "main", scope: !16, file: !16, line: 75, type: !146, scopeLine: 75, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!146 = !DISubroutineType(types: !147)
!147 = !{!148}
!148 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!149 = !DILocation(line: 76, column: 5, scope: !145)
!150 = !DILocation(line: 77, column: 1, scope: !145)
