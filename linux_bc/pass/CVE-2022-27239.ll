; ModuleID = 'linux_bc/pass/CVE-2022-27239.ll'
source_filename = "/home/SVF-tools/SSE-TestCases/src/pass/CVE-2022-27239.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.parsed_mount_info = type { [45 x i8], i8, [2 x i8] }

@.str = private unnamed_addr constant [28 x i8] c"parse opt token, token: %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"ip\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"addr\00", align 1
@.str.3 = private unnamed_addr constant [25 x i8] c"parse option, buffer:%s\0A\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c",\00", align 1
@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str.5 = private unnamed_addr constant [34 x i8] c"ip address %s override specified\0A\00", align 1
@.str.6 = private unnamed_addr constant [74 x i8] c"keyword,ip=VapodinGmVAFzAbsPWGkWdPQI2gozcQulsHW1hJRsyVlaZ,keyword3=value3\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @parse_opt_token(i8* %token) #0 !dbg !11 {
entry:
  %retval = alloca i32, align 4
  %token.addr = alloca i8*, align 8
  store i8* %token, i8** %token.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %token.addr, metadata !19, metadata !DIExpression()), !dbg !20
  %0 = load i8*, i8** %token.addr, align 8, !dbg !21
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i64 0, i64 0), i8* %0), !dbg !22
  %1 = load i8*, i8** %token.addr, align 8, !dbg !23
  %cmp = icmp eq i8* %1, null, !dbg !25
  br i1 %cmp, label %if.then, label %if.end, !dbg !26

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4, !dbg !27
  br label %return, !dbg !27

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %token.addr, align 8, !dbg !28
  %call1 = call i32 @strcmp(i8* %2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !30
  %cmp2 = icmp eq i32 %call1, 0, !dbg !31
  br i1 %cmp2, label %if.then5, label %lor.lhs.false, !dbg !32

lor.lhs.false:                                    ; preds = %if.end
  %3 = load i8*, i8** %token.addr, align 8, !dbg !33
  %call3 = call i32 @strcmp(i8* %3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0)) #6, !dbg !34
  %cmp4 = icmp eq i32 %call3, 0, !dbg !35
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !36

if.then5:                                         ; preds = %lor.lhs.false, %if.end
  store i32 6, i32* %retval, align 4, !dbg !37
  br label %return, !dbg !37

if.end6:                                          ; preds = %lor.lhs.false
  store i32 -1, i32* %retval, align 4, !dbg !38
  br label %return, !dbg !38

return:                                           ; preds = %if.end6, %if.then5, %if.then
  %4 = load i32, i32* %retval, align 4, !dbg !39
  ret i32 %4, !dbg !39
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: nounwind readonly willreturn
declare dso_local i32 @strcmp(i8*, i8*) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @parse_options(i8* %data, %struct.parsed_mount_info* %parsed_info) #0 !dbg !40 {
entry:
  %retval = alloca i32, align 4
  %data.addr = alloca i8*, align 8
  %parsed_info.addr = alloca %struct.parsed_mount_info*, align 8
  %value = alloca i8*, align 8
  %equals = alloca i8*, align 8
  %next_keyword = alloca i8*, align 8
  %saved_stack = alloca i8*, align 8
  %__vla_expr0 = alloca i64, align 8
  %token = alloca i8*, align 8
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !52, metadata !DIExpression()), !dbg !53
  store %struct.parsed_mount_info* %parsed_info, %struct.parsed_mount_info** %parsed_info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.parsed_mount_info** %parsed_info.addr, metadata !54, metadata !DIExpression()), !dbg !55
  call void @llvm.dbg.declare(metadata i8** %value, metadata !56, metadata !DIExpression()), !dbg !58
  %0 = load i8*, i8** %data.addr, align 8, !dbg !59
  %call = call i64 @strlen(i8* %0) #6, !dbg !60
  %add = add i64 %call, 1, !dbg !61
  %call1 = call noalias align 16 i8* @malloc(i64 %add) #7, !dbg !62
  store i8* %call1, i8** %value, align 8, !dbg !58
  call void @llvm.dbg.declare(metadata i8** %equals, metadata !63, metadata !DIExpression()), !dbg !64
  %1 = load i8*, i8** %data.addr, align 8, !dbg !65
  %call2 = call i64 @strlen(i8* %1) #6, !dbg !66
  %add3 = add i64 %call2, 1, !dbg !67
  %call4 = call noalias align 16 i8* @malloc(i64 %add3) #7, !dbg !68
  store i8* %call4, i8** %equals, align 8, !dbg !64
  call void @llvm.dbg.declare(metadata i8** %next_keyword, metadata !69, metadata !DIExpression()), !dbg !70
  %2 = load i8*, i8** %data.addr, align 8, !dbg !71
  %call5 = call i64 @strlen(i8* %2) #6, !dbg !72
  %add6 = add i64 %call5, 1, !dbg !73
  %call7 = call noalias align 16 i8* @malloc(i64 %add6) #7, !dbg !74
  store i8* %call7, i8** %next_keyword, align 8, !dbg !70
  %3 = load i8*, i8** %data.addr, align 8, !dbg !75
  %tobool = icmp ne i8* %3, null, !dbg !75
  br i1 %tobool, label %if.end, label %if.then, !dbg !77

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !78
  br label %return, !dbg !78

if.end:                                           ; preds = %entry
  %4 = load i8*, i8** %data.addr, align 8, !dbg !79
  %call8 = call i64 @strlen(i8* %4) #6, !dbg !80
  %add9 = add i64 %call8, 1, !dbg !81
  %5 = call i8* @llvm.stacksave(), !dbg !82
  store i8* %5, i8** %saved_stack, align 8, !dbg !82
  %vla = alloca i8, i64 %add9, align 16, !dbg !82
  store i64 %add9, i64* %__vla_expr0, align 8, !dbg !82
  call void @llvm.dbg.declare(metadata i64* %__vla_expr0, metadata !83, metadata !DIExpression()), !dbg !85
  call void @llvm.dbg.declare(metadata i8* %vla, metadata !86, metadata !DIExpression()), !dbg !90
  %6 = load i8*, i8** %data.addr, align 8, !dbg !91
  %call10 = call i8* @strcpy(i8* %vla, i8* %6) #7, !dbg !92
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3, i64 0, i64 0), i8* %vla), !dbg !93
  call void @llvm.dbg.declare(metadata i8** %token, metadata !94, metadata !DIExpression()), !dbg !95
  %call12 = call i8* @strtok(i8* %vla, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)) #7, !dbg !96
  store i8* %call12, i8** %token, align 8, !dbg !95
  br label %while.cond, !dbg !97

while.cond:                                       ; preds = %if.end31, %if.end
  %7 = load i8*, i8** %token, align 8, !dbg !98
  %cmp = icmp ne i8* %7, null, !dbg !99
  br i1 %cmp, label %while.body, label %while.end, !dbg !97

while.body:                                       ; preds = %while.cond
  %8 = load i8*, i8** %next_keyword, align 8, !dbg !100
  %9 = load i8*, i8** %token, align 8, !dbg !102
  %call13 = call i8* @strcpy(i8* %8, i8* %9) #7, !dbg !103
  store i8* null, i8** %value, align 8, !dbg !104
  %10 = load i8*, i8** %next_keyword, align 8, !dbg !105
  %call14 = call i8* @strchr(i8* %10, i32 61) #6, !dbg !107
  store i8* %call14, i8** %equals, align 8, !dbg !108
  %cmp15 = icmp ne i8* %call14, null, !dbg !109
  br i1 %cmp15, label %if.then16, label %if.end17, !dbg !110

if.then16:                                        ; preds = %while.body
  %11 = load i8*, i8** %equals, align 8, !dbg !111
  store i8 0, i8* %11, align 1, !dbg !113
  %12 = load i8*, i8** %equals, align 8, !dbg !114
  %add.ptr = getelementptr inbounds i8, i8* %12, i64 1, !dbg !115
  store i8* %add.ptr, i8** %value, align 8, !dbg !116
  br label %if.end17, !dbg !117

if.end17:                                         ; preds = %if.then16, %while.body
  %13 = load i8*, i8** %value, align 8, !dbg !118
  %tobool18 = icmp ne i8* %13, null, !dbg !118
  br i1 %tobool18, label %land.lhs.true, label %if.end31, !dbg !120

land.lhs.true:                                    ; preds = %if.end17
  %14 = load i8*, i8** %next_keyword, align 8, !dbg !121
  %call19 = call i32 @parse_opt_token(i8* %14), !dbg !122
  %cmp20 = icmp eq i32 %call19, 6, !dbg !123
  br i1 %cmp20, label %if.then21, label %if.end31, !dbg !124

if.then21:                                        ; preds = %land.lhs.true
  %15 = load i8*, i8** %value, align 8, !dbg !125
  %call22 = call i64 @strnlen(i8* %15, i64 46) #6, !dbg !128
  %cmp23 = icmp ule i64 %call22, 46, !dbg !129
  br i1 %cmp23, label %if.then24, label %if.end30, !dbg !130

if.then24:                                        ; preds = %if.then21
  %16 = load %struct.parsed_mount_info*, %struct.parsed_mount_info** %parsed_info.addr, align 8, !dbg !131
  %addrlist = getelementptr inbounds %struct.parsed_mount_info, %struct.parsed_mount_info* %16, i32 0, i32 0, !dbg !133
  %arraydecay = getelementptr inbounds [45 x i8], [45 x i8]* %addrlist, i64 0, i64 0, !dbg !131
  %17 = load i8*, i8** %value, align 8, !dbg !134
  %call25 = call i8* @strcpy(i8* %arraydecay, i8* %17) #7, !dbg !135
  %18 = load %struct.parsed_mount_info*, %struct.parsed_mount_info** %parsed_info.addr, align 8, !dbg !136
  %verboseflag = getelementptr inbounds %struct.parsed_mount_info, %struct.parsed_mount_info* %18, i32 0, i32 1, !dbg !138
  %bf.load = load i8, i8* %verboseflag, align 1, !dbg !138
  %bf.clear = and i8 %bf.load, 1, !dbg !138
  %bf.cast = zext i8 %bf.clear to i32, !dbg !138
  %tobool26 = icmp ne i32 %bf.cast, 0, !dbg !136
  br i1 %tobool26, label %if.then27, label %if.end29, !dbg !139

if.then27:                                        ; preds = %if.then24
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !140
  %20 = load i8*, i8** %value, align 8, !dbg !141
  %call28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5, i64 0, i64 0), i8* %20), !dbg !142
  br label %if.end29, !dbg !142

if.end29:                                         ; preds = %if.then27, %if.then24
  br label %if.end30, !dbg !143

if.end30:                                         ; preds = %if.end29, %if.then21
  br label %if.end31, !dbg !144

if.end31:                                         ; preds = %if.end30, %land.lhs.true, %if.end17
  %call32 = call i8* @strtok(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)) #7, !dbg !145
  store i8* %call32, i8** %token, align 8, !dbg !146
  br label %while.cond, !dbg !97, !llvm.loop !147

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %retval, align 4, !dbg !150
  %21 = load i8*, i8** %saved_stack, align 8, !dbg !151
  call void @llvm.stackrestore(i8* %21), !dbg !151
  br label %return

return:                                           ; preds = %while.end, %if.then
  %22 = load i32, i32* %retval, align 4, !dbg !151
  ret i32 %22, !dbg !151
}

; Function Attrs: nounwind
declare dso_local noalias align 16 i8* @malloc(i64) #4

; Function Attrs: nounwind readonly willreturn
declare dso_local i64 @strlen(i8*) #3

; Function Attrs: nofree nosync nounwind willreturn
declare i8* @llvm.stacksave() #5

; Function Attrs: nounwind
declare dso_local i8* @strcpy(i8*, i8*) #4

; Function Attrs: nounwind
declare dso_local i8* @strtok(i8*, i8*) #4

; Function Attrs: nounwind readonly willreturn
declare dso_local i8* @strchr(i8*, i32) #3

; Function Attrs: nounwind readonly willreturn
declare dso_local i64 @strnlen(i8*, i64) #3

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

; Function Attrs: nofree nosync nounwind willreturn
declare void @llvm.stackrestore(i8*) #5

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !152 {
entry:
  %parsed_info = alloca %struct.parsed_mount_info, align 4
  call void @llvm.dbg.declare(metadata %struct.parsed_mount_info* %parsed_info, metadata !155, metadata !DIExpression()), !dbg !156
  %call = call i32 @parse_options(i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.6, i64 0, i64 0), %struct.parsed_mount_info* %parsed_info), !dbg !157
  ret i32 0, !dbg !158
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind readonly willreturn "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nofree nosync nounwind willreturn }
attributes #6 = { nounwind readonly willreturn }
attributes #7 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!5, !6, !7, !8, !9}
!llvm.ident = !{!10}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/SVF-tools/SSE-TestCases/src/pass/CVE-2022-27239.c", directory: "/home/SVF-tools/SSE-TestCases")
!2 = !{}
!3 = !{!4}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!5 = !{i32 7, !"Dwarf Version", i32 4}
!6 = !{i32 2, !"Debug Info Version", i32 3}
!7 = !{i32 1, !"wchar_size", i32 4}
!8 = !{i32 7, !"uwtable", i32 1}
!9 = !{i32 7, !"frame-pointer", i32 2}
!10 = !{!"clang version 13.0.0"}
!11 = distinct !DISubprogram(name: "parse_opt_token", scope: !12, file: !12, line: 22, type: !13, scopeLine: 22, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!12 = !DIFile(filename: "src/pass/CVE-2022-27239.c", directory: "/home/SVF-tools/SSE-TestCases")
!13 = !DISubroutineType(types: !14)
!14 = !{!15, !16}
!15 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!16 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17, size: 64)
!17 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !18)
!18 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!19 = !DILocalVariable(name: "token", arg: 1, scope: !11, file: !12, line: 22, type: !16)
!20 = !DILocation(line: 22, column: 33, scope: !11)
!21 = !DILocation(line: 23, column: 44, scope: !11)
!22 = !DILocation(line: 23, column: 5, scope: !11)
!23 = !DILocation(line: 24, column: 6, scope: !24)
!24 = distinct !DILexicalBlock(scope: !11, file: !12, line: 24, column: 6)
!25 = !DILocation(line: 24, column: 12, scope: !24)
!26 = !DILocation(line: 24, column: 6, scope: !11)
!27 = !DILocation(line: 25, column: 3, scope: !24)
!28 = !DILocation(line: 31, column: 13, scope: !29)
!29 = distinct !DILexicalBlock(scope: !11, file: !12, line: 31, column: 6)
!30 = !DILocation(line: 31, column: 6, scope: !29)
!31 = !DILocation(line: 31, column: 26, scope: !29)
!32 = !DILocation(line: 31, column: 31, scope: !29)
!33 = !DILocation(line: 31, column: 41, scope: !29)
!34 = !DILocation(line: 31, column: 34, scope: !29)
!35 = !DILocation(line: 31, column: 56, scope: !29)
!36 = !DILocation(line: 31, column: 6, scope: !11)
!37 = !DILocation(line: 32, column: 3, scope: !29)
!38 = !DILocation(line: 34, column: 2, scope: !11)
!39 = !DILocation(line: 35, column: 1, scope: !11)
!40 = distinct !DISubprogram(name: "parse_options", scope: !12, file: !12, line: 38, type: !41, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!41 = !DISubroutineType(types: !42)
!42 = !{!15, !16, !43}
!43 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !44, size: 64)
!44 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "parsed_mount_info", file: !12, line: 17, size: 384, elements: !45)
!45 = !{!46, !50}
!46 = !DIDerivedType(tag: DW_TAG_member, name: "addrlist", scope: !44, file: !12, line: 18, baseType: !47, size: 360)
!47 = !DICompositeType(tag: DW_TAG_array_type, baseType: !18, size: 360, elements: !48)
!48 = !{!49}
!49 = !DISubrange(count: 45)
!50 = !DIDerivedType(tag: DW_TAG_member, name: "verboseflag", scope: !44, file: !12, line: 19, baseType: !51, size: 1, offset: 360, flags: DIFlagBitField, extraData: i64 360)
!51 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!52 = !DILocalVariable(name: "data", arg: 1, scope: !40, file: !12, line: 38, type: !16)
!53 = !DILocation(line: 38, column: 31, scope: !40)
!54 = !DILocalVariable(name: "parsed_info", arg: 2, scope: !40, file: !12, line: 38, type: !43)
!55 = !DILocation(line: 38, column: 63, scope: !40)
!56 = !DILocalVariable(name: "value", scope: !40, file: !12, line: 39, type: !57)
!57 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !18, size: 64)
!58 = !DILocation(line: 39, column: 8, scope: !40)
!59 = !DILocation(line: 39, column: 30, scope: !40)
!60 = !DILocation(line: 39, column: 23, scope: !40)
!61 = !DILocation(line: 39, column: 36, scope: !40)
!62 = !DILocation(line: 39, column: 16, scope: !40)
!63 = !DILocalVariable(name: "equals", scope: !40, file: !12, line: 40, type: !57)
!64 = !DILocation(line: 40, column: 8, scope: !40)
!65 = !DILocation(line: 40, column: 31, scope: !40)
!66 = !DILocation(line: 40, column: 24, scope: !40)
!67 = !DILocation(line: 40, column: 37, scope: !40)
!68 = !DILocation(line: 40, column: 17, scope: !40)
!69 = !DILocalVariable(name: "next_keyword", scope: !40, file: !12, line: 41, type: !57)
!70 = !DILocation(line: 41, column: 8, scope: !40)
!71 = !DILocation(line: 41, column: 37, scope: !40)
!72 = !DILocation(line: 41, column: 30, scope: !40)
!73 = !DILocation(line: 41, column: 43, scope: !40)
!74 = !DILocation(line: 41, column: 23, scope: !40)
!75 = !DILocation(line: 43, column: 7, scope: !76)
!76 = distinct !DILexicalBlock(scope: !40, file: !12, line: 43, column: 6)
!77 = !DILocation(line: 43, column: 6, scope: !40)
!78 = !DILocation(line: 44, column: 3, scope: !76)
!79 = !DILocation(line: 46, column: 24, scope: !40)
!80 = !DILocation(line: 46, column: 17, scope: !40)
!81 = !DILocation(line: 46, column: 30, scope: !40)
!82 = !DILocation(line: 46, column: 5, scope: !40)
!83 = !DILocalVariable(name: "__vla_expr0", scope: !40, type: !84, flags: DIFlagArtificial)
!84 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!85 = !DILocation(line: 0, scope: !40)
!86 = !DILocalVariable(name: "buffer", scope: !40, file: !12, line: 46, type: !87)
!87 = !DICompositeType(tag: DW_TAG_array_type, baseType: !18, elements: !88)
!88 = !{!89}
!89 = !DISubrange(count: !83)
!90 = !DILocation(line: 46, column: 10, scope: !40)
!91 = !DILocation(line: 47, column: 20, scope: !40)
!92 = !DILocation(line: 47, column: 5, scope: !40)
!93 = !DILocation(line: 48, column: 5, scope: !40)
!94 = !DILocalVariable(name: "token", scope: !40, file: !12, line: 49, type: !57)
!95 = !DILocation(line: 49, column: 11, scope: !40)
!96 = !DILocation(line: 49, column: 19, scope: !40)
!97 = !DILocation(line: 50, column: 5, scope: !40)
!98 = !DILocation(line: 50, column: 11, scope: !40)
!99 = !DILocation(line: 50, column: 17, scope: !40)
!100 = !DILocation(line: 51, column: 16, scope: !101)
!101 = distinct !DILexicalBlock(scope: !40, file: !12, line: 50, column: 26)
!102 = !DILocation(line: 51, column: 30, scope: !101)
!103 = !DILocation(line: 51, column: 9, scope: !101)
!104 = !DILocation(line: 54, column: 15, scope: !101)
!105 = !DILocation(line: 55, column: 24, scope: !106)
!106 = distinct !DILexicalBlock(scope: !101, file: !12, line: 55, column: 7)
!107 = !DILocation(line: 55, column: 17, scope: !106)
!108 = !DILocation(line: 55, column: 15, scope: !106)
!109 = !DILocation(line: 55, column: 44, scope: !106)
!110 = !DILocation(line: 55, column: 7, scope: !101)
!111 = !DILocation(line: 56, column: 5, scope: !112)
!112 = distinct !DILexicalBlock(scope: !106, file: !12, line: 55, column: 53)
!113 = !DILocation(line: 56, column: 12, scope: !112)
!114 = !DILocation(line: 57, column: 12, scope: !112)
!115 = !DILocation(line: 57, column: 19, scope: !112)
!116 = !DILocation(line: 57, column: 10, scope: !112)
!117 = !DILocation(line: 58, column: 3, scope: !112)
!118 = !DILocation(line: 60, column: 12, scope: !119)
!119 = distinct !DILexicalBlock(scope: !101, file: !12, line: 60, column: 12)
!120 = !DILocation(line: 60, column: 18, scope: !119)
!121 = !DILocation(line: 60, column: 37, scope: !119)
!122 = !DILocation(line: 60, column: 21, scope: !119)
!123 = !DILocation(line: 60, column: 51, scope: !119)
!124 = !DILocation(line: 60, column: 12, scope: !101)
!125 = !DILocation(line: 61, column: 16, scope: !126)
!126 = distinct !DILexicalBlock(scope: !127, file: !12, line: 61, column: 8)
!127 = distinct !DILexicalBlock(scope: !119, file: !12, line: 60, column: 62)
!128 = !DILocation(line: 61, column: 8, scope: !126)
!129 = !DILocation(line: 61, column: 40, scope: !126)
!130 = !DILocation(line: 61, column: 8, scope: !127)
!131 = !DILocation(line: 64, column: 12, scope: !132)
!132 = distinct !DILexicalBlock(scope: !126, file: !12, line: 61, column: 60)
!133 = !DILocation(line: 64, column: 25, scope: !132)
!134 = !DILocation(line: 64, column: 35, scope: !132)
!135 = !DILocation(line: 64, column: 5, scope: !132)
!136 = !DILocation(line: 65, column: 9, scope: !137)
!137 = distinct !DILexicalBlock(scope: !132, file: !12, line: 65, column: 9)
!138 = !DILocation(line: 65, column: 22, scope: !137)
!139 = !DILocation(line: 65, column: 9, scope: !132)
!140 = !DILocation(line: 66, column: 14, scope: !137)
!141 = !DILocation(line: 66, column: 60, scope: !137)
!142 = !DILocation(line: 66, column: 6, scope: !137)
!143 = !DILocation(line: 67, column: 4, scope: !132)
!144 = !DILocation(line: 68, column: 3, scope: !127)
!145 = !DILocation(line: 70, column: 17, scope: !101)
!146 = !DILocation(line: 70, column: 15, scope: !101)
!147 = distinct !{!147, !97, !148, !149}
!148 = !DILocation(line: 71, column: 5, scope: !40)
!149 = !{!"llvm.loop.mustprogress"}
!150 = !DILocation(line: 73, column: 2, scope: !40)
!151 = !DILocation(line: 74, column: 1, scope: !40)
!152 = distinct !DISubprogram(name: "main", scope: !12, file: !12, line: 76, type: !153, scopeLine: 76, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!153 = !DISubroutineType(types: !154)
!154 = !{!15}
!155 = !DILocalVariable(name: "parsed_info", scope: !152, file: !12, line: 77, type: !44)
!156 = !DILocation(line: 77, column: 30, scope: !152)
!157 = !DILocation(line: 78, column: 5, scope: !152)
!158 = !DILocation(line: 79, column: 1, scope: !152)
