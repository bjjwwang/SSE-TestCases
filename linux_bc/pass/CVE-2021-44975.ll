; ModuleID = 'linux_bc/pass/CVE-2021-44975.ll'
source_filename = "/home/SVF-tools/SSE-TestCases/src/pass/CVE-2021-44975.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.r_io_t = type { i8 }
%struct.RCoreObjc = type { %struct.r_core_t*, i64, %struct.r_bin_section_t*, %struct.r_bin_section_t* }
%struct.r_core_t = type { %struct.r_io_t* }
%struct.r_bin_section_t = type { i64 }

@.str = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.1 = private unnamed_addr constant [46 x i8] c"aao: Cannot read the whole const section %zu\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @r_io_pread_at(%struct.r_io_t* %io, i8* %buf, i32 %len) #0 !dbg !9 {
entry:
  %retval = alloca i32, align 4
  %io.addr = alloca %struct.r_io_t*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  store %struct.r_io_t* %io, %struct.r_io_t** %io.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.r_io_t** %io.addr, metadata !21, metadata !DIExpression()), !dbg !22
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !23, metadata !DIExpression()), !dbg !24
  store i32 %len, i32* %len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len.addr, metadata !25, metadata !DIExpression()), !dbg !26
  %0 = load %struct.r_io_t*, %struct.r_io_t** %io.addr, align 8, !dbg !27
  %tobool = icmp ne %struct.r_io_t* %0, null, !dbg !27
  br i1 %tobool, label %land.lhs.true, label %if.then, !dbg !29

land.lhs.true:                                    ; preds = %entry
  %1 = load i8*, i8** %buf.addr, align 8, !dbg !30
  %tobool1 = icmp ne i8* %1, null, !dbg !30
  br i1 %tobool1, label %land.lhs.true2, label %if.then, !dbg !31

land.lhs.true2:                                   ; preds = %land.lhs.true
  %2 = load i32, i32* %len.addr, align 4, !dbg !32
  %cmp = icmp sge i32 %2, 0, !dbg !33
  br i1 %cmp, label %if.end, label %if.then, !dbg !34

if.then:                                          ; preds = %land.lhs.true2, %land.lhs.true, %entry
  store i32 -1, i32* %retval, align 4, !dbg !35
  br label %return, !dbg !35

if.end:                                           ; preds = %land.lhs.true2
  %3 = load i8*, i8** %buf.addr, align 8, !dbg !37
  %4 = load %struct.r_io_t*, %struct.r_io_t** %io.addr, align 8, !dbg !40
  %Oxff = getelementptr inbounds %struct.r_io_t, %struct.r_io_t* %4, i32 0, i32 0, !dbg !41
  %5 = load i8, i8* %Oxff, align 1, !dbg !41
  %conv = zext i8 %5 to i32, !dbg !40
  %6 = trunc i32 %conv to i8, !dbg !42
  %7 = load i32, i32* %len.addr, align 4, !dbg !43
  %conv3 = sext i32 %7 to i64, !dbg !43
  call void @llvm.memset.p0i8.i64(i8* align 1 %3, i8 %6, i64 %conv3, i1 false), !dbg !42
  %8 = load i8*, i8** %buf.addr, align 8, !dbg !44
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* %8), !dbg !45
  store i32 1, i32* %retval, align 4, !dbg !46
  br label %return, !dbg !46

return:                                           ; preds = %if.end, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !47
  ret i32 %9, !dbg !47
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare dso_local i32 @printf(i8*, ...) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @internal_r_io_read_at(%struct.r_io_t* %io, i8* %buf, i32 %len) #0 !dbg !48 {
entry:
  %retval = alloca i1, align 1
  %io.addr = alloca %struct.r_io_t*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %ret = alloca i8, align 1
  store %struct.r_io_t* %io, %struct.r_io_t** %io.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.r_io_t** %io.addr, metadata !52, metadata !DIExpression()), !dbg !53
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !54, metadata !DIExpression()), !dbg !55
  store i32 %len, i32* %len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len.addr, metadata !56, metadata !DIExpression()), !dbg !57
  %0 = load i32, i32* %len.addr, align 4, !dbg !58
  %cmp = icmp slt i32 %0, 1, !dbg !60
  br i1 %cmp, label %if.then, label %if.end, !dbg !61

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !62
  br label %return, !dbg !62

if.end:                                           ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %ret, metadata !64, metadata !DIExpression()), !dbg !65
  %1 = load %struct.r_io_t*, %struct.r_io_t** %io.addr, align 8, !dbg !66
  %2 = load i8*, i8** %buf.addr, align 8, !dbg !67
  %3 = load i32, i32* %len.addr, align 4, !dbg !68
  %call = call i32 @r_io_pread_at(%struct.r_io_t* %1, i8* %2, i32 %3), !dbg !69
  %cmp1 = icmp sgt i32 %call, 0, !dbg !70
  %frombool = zext i1 %cmp1 to i8, !dbg !65
  store i8 %frombool, i8* %ret, align 1, !dbg !65
  %4 = load i8, i8* %ret, align 1, !dbg !71
  %tobool = trunc i8 %4 to i1, !dbg !71
  store i1 %tobool, i1* %retval, align 1, !dbg !72
  br label %return, !dbg !72

return:                                           ; preds = %if.end, %if.then
  %5 = load i1, i1* %retval, align 1, !dbg !73
  ret i1 %5, !dbg !73
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @r_io_read_at(%struct.r_io_t* %io, i8* %buf, i32 %len) #0 !dbg !74 {
entry:
  %retval = alloca i1, align 1
  %io.addr = alloca %struct.r_io_t*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  store %struct.r_io_t* %io, %struct.r_io_t** %io.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.r_io_t** %io.addr, metadata !75, metadata !DIExpression()), !dbg !76
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !77, metadata !DIExpression()), !dbg !78
  store i32 %len, i32* %len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len.addr, metadata !79, metadata !DIExpression()), !dbg !80
  %0 = load %struct.r_io_t*, %struct.r_io_t** %io.addr, align 8, !dbg !81
  %tobool = icmp ne %struct.r_io_t* %0, null, !dbg !81
  br i1 %tobool, label %land.lhs.true, label %if.then, !dbg !83

land.lhs.true:                                    ; preds = %entry
  %1 = load i8*, i8** %buf.addr, align 8, !dbg !84
  %tobool1 = icmp ne i8* %1, null, !dbg !84
  br i1 %tobool1, label %land.lhs.true2, label %if.then, !dbg !85

land.lhs.true2:                                   ; preds = %land.lhs.true
  %2 = load i32, i32* %len.addr, align 4, !dbg !86
  %cmp = icmp sge i32 %2, 0, !dbg !87
  br i1 %cmp, label %if.end, label %if.then, !dbg !88

if.then:                                          ; preds = %land.lhs.true2, %land.lhs.true, %entry
  store i1 false, i1* %retval, align 1, !dbg !89
  br label %return, !dbg !89

if.end:                                           ; preds = %land.lhs.true2
  %3 = load i32, i32* %len.addr, align 4, !dbg !91
  %cmp3 = icmp eq i32 %3, 0, !dbg !93
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !94

if.then4:                                         ; preds = %if.end
  store i1 false, i1* %retval, align 1, !dbg !95
  br label %return, !dbg !95

if.end5:                                          ; preds = %if.end
  %4 = load %struct.r_io_t*, %struct.r_io_t** %io.addr, align 8, !dbg !97
  %5 = load i8*, i8** %buf.addr, align 8, !dbg !98
  %6 = load i32, i32* %len.addr, align 4, !dbg !99
  %call = call zeroext i1 @internal_r_io_read_at(%struct.r_io_t* %4, i8* %5, i32 %6), !dbg !100
  store i1 %call, i1* %retval, align 1, !dbg !101
  br label %return, !dbg !101

return:                                           ; preds = %if.end5, %if.then4, %if.then
  %7 = load i1, i1* %retval, align 1, !dbg !102
  ret i1 %7, !dbg !102
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @objc_build_refs(%struct.RCoreObjc* %objc) #0 !dbg !103 {
entry:
  %retval = alloca i1, align 1
  %objc.addr = alloca %struct.RCoreObjc*, align 8
  %ss_const = alloca i64, align 8
  %ss_selrefs = alloca i64, align 8
  %maxsize = alloca i64, align 8
  %buf = alloca i8*, align 8
  store %struct.RCoreObjc* %objc, %struct.RCoreObjc** %objc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.RCoreObjc** %objc.addr, metadata !128, metadata !DIExpression()), !dbg !129
  call void @llvm.dbg.declare(metadata i64* %ss_const, metadata !130, metadata !DIExpression()), !dbg !131
  %0 = load %struct.RCoreObjc*, %struct.RCoreObjc** %objc.addr, align 8, !dbg !132
  %_const = getelementptr inbounds %struct.RCoreObjc, %struct.RCoreObjc* %0, i32 0, i32 3, !dbg !133
  %1 = load %struct.r_bin_section_t*, %struct.r_bin_section_t** %_const, align 8, !dbg !133
  %vsize = getelementptr inbounds %struct.r_bin_section_t, %struct.r_bin_section_t* %1, i32 0, i32 0, !dbg !134
  %2 = load i64, i64* %vsize, align 8, !dbg !134
  store i64 %2, i64* %ss_const, align 8, !dbg !131
  call void @llvm.dbg.declare(metadata i64* %ss_selrefs, metadata !135, metadata !DIExpression()), !dbg !136
  %3 = load %struct.RCoreObjc*, %struct.RCoreObjc** %objc.addr, align 8, !dbg !137
  %_selrefs = getelementptr inbounds %struct.RCoreObjc, %struct.RCoreObjc* %3, i32 0, i32 2, !dbg !138
  %4 = load %struct.r_bin_section_t*, %struct.r_bin_section_t** %_selrefs, align 8, !dbg !138
  %vsize1 = getelementptr inbounds %struct.r_bin_section_t, %struct.r_bin_section_t* %4, i32 0, i32 0, !dbg !139
  %5 = load i64, i64* %vsize1, align 8, !dbg !139
  store i64 %5, i64* %ss_selrefs, align 8, !dbg !136
  call void @llvm.dbg.declare(metadata i64* %maxsize, metadata !140, metadata !DIExpression()), !dbg !141
  %6 = load i64, i64* %ss_const, align 8, !dbg !142
  %7 = load i64, i64* %ss_selrefs, align 8, !dbg !142
  %cmp = icmp ugt i64 %6, %7, !dbg !142
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !142

cond.true:                                        ; preds = %entry
  %8 = load i64, i64* %ss_const, align 8, !dbg !142
  br label %cond.end, !dbg !142

cond.false:                                       ; preds = %entry
  %9 = load i64, i64* %ss_selrefs, align 8, !dbg !142
  br label %cond.end, !dbg !142

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %8, %cond.true ], [ %9, %cond.false ], !dbg !142
  store i64 %cond, i64* %maxsize, align 8, !dbg !141
  %10 = load i64, i64* %maxsize, align 8, !dbg !143
  %11 = load %struct.RCoreObjc*, %struct.RCoreObjc** %objc.addr, align 8, !dbg !143
  %file_size = getelementptr inbounds %struct.RCoreObjc, %struct.RCoreObjc* %11, i32 0, i32 1, !dbg !143
  %12 = load i64, i64* %file_size, align 8, !dbg !143
  %cmp2 = icmp ugt i64 %10, %12, !dbg !143
  br i1 %cmp2, label %cond.true3, label %cond.false5, !dbg !143

cond.true3:                                       ; preds = %cond.end
  %13 = load %struct.RCoreObjc*, %struct.RCoreObjc** %objc.addr, align 8, !dbg !143
  %file_size4 = getelementptr inbounds %struct.RCoreObjc, %struct.RCoreObjc* %13, i32 0, i32 1, !dbg !143
  %14 = load i64, i64* %file_size4, align 8, !dbg !143
  br label %cond.end6, !dbg !143

cond.false5:                                      ; preds = %cond.end
  %15 = load i64, i64* %maxsize, align 8, !dbg !143
  br label %cond.end6, !dbg !143

cond.end6:                                        ; preds = %cond.false5, %cond.true3
  %cond7 = phi i64 [ %14, %cond.true3 ], [ %15, %cond.false5 ], !dbg !143
  store i64 %cond7, i64* %maxsize, align 8, !dbg !144
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !145, metadata !DIExpression()), !dbg !146
  %16 = load i64, i64* %maxsize, align 8, !dbg !147
  %call = call noalias align 16 i8* @calloc(i64 1, i64 %16) #5, !dbg !148
  store i8* %call, i8** %buf, align 8, !dbg !146
  %17 = load i8*, i8** %buf, align 8, !dbg !149
  %tobool = icmp ne i8* %17, null, !dbg !149
  br i1 %tobool, label %if.end, label %if.then, !dbg !151

if.then:                                          ; preds = %cond.end6
  store i1 false, i1* %retval, align 1, !dbg !152
  br label %return, !dbg !152

if.end:                                           ; preds = %cond.end6
  %18 = load %struct.RCoreObjc*, %struct.RCoreObjc** %objc.addr, align 8, !dbg !154
  %core = getelementptr inbounds %struct.RCoreObjc, %struct.RCoreObjc* %18, i32 0, i32 0, !dbg !156
  %19 = load %struct.r_core_t*, %struct.r_core_t** %core, align 8, !dbg !156
  %io = getelementptr inbounds %struct.r_core_t, %struct.r_core_t* %19, i32 0, i32 0, !dbg !157
  %20 = load %struct.r_io_t*, %struct.r_io_t** %io, align 8, !dbg !157
  %21 = load i8*, i8** %buf, align 8, !dbg !158
  %22 = load i64, i64* %ss_const, align 8, !dbg !159
  %conv = trunc i64 %22 to i32, !dbg !159
  %call8 = call zeroext i1 @r_io_read_at(%struct.r_io_t* %20, i8* %21, i32 %conv), !dbg !160
  br i1 %call8, label %if.end11, label %if.then9, !dbg !161

if.then9:                                         ; preds = %if.end
  %23 = load i64, i64* %ss_const, align 8, !dbg !162
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.1, i64 0, i64 0), i64 %23), !dbg !164
  store i1 false, i1* %retval, align 1, !dbg !165
  br label %return, !dbg !165

if.end11:                                         ; preds = %if.end
  store i1 true, i1* %retval, align 1, !dbg !166
  br label %return, !dbg !166

return:                                           ; preds = %if.end11, %if.then9, %if.then
  %24 = load i1, i1* %retval, align 1, !dbg !167
  ret i1 %24, !dbg !167
}

; Function Attrs: nounwind
declare dso_local noalias align 16 i8* @calloc(i64, i64) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !168 {
entry:
  %io = alloca %struct.r_io_t, align 1
  %core = alloca %struct.r_core_t, align 8
  %selrefs = alloca %struct.r_bin_section_t, align 8
  %rconst = alloca %struct.r_bin_section_t, align 8
  %objc = alloca %struct.RCoreObjc, align 8
  call void @llvm.dbg.declare(metadata %struct.r_io_t* %io, metadata !171, metadata !DIExpression()), !dbg !172
  %Oxff = getelementptr inbounds %struct.r_io_t, %struct.r_io_t* %io, i32 0, i32 0, !dbg !173
  store i8 97, i8* %Oxff, align 1, !dbg !174
  call void @llvm.dbg.declare(metadata %struct.r_core_t* %core, metadata !175, metadata !DIExpression()), !dbg !176
  %io1 = getelementptr inbounds %struct.r_core_t, %struct.r_core_t* %core, i32 0, i32 0, !dbg !177
  store %struct.r_io_t* %io, %struct.r_io_t** %io1, align 8, !dbg !178
  call void @llvm.dbg.declare(metadata %struct.r_bin_section_t* %selrefs, metadata !179, metadata !DIExpression()), !dbg !180
  call void @llvm.dbg.declare(metadata %struct.r_bin_section_t* %rconst, metadata !181, metadata !DIExpression()), !dbg !182
  %vsize = getelementptr inbounds %struct.r_bin_section_t, %struct.r_bin_section_t* %selrefs, i32 0, i32 0, !dbg !183
  store i64 3, i64* %vsize, align 8, !dbg !184
  %vsize2 = getelementptr inbounds %struct.r_bin_section_t, %struct.r_bin_section_t* %rconst, i32 0, i32 0, !dbg !185
  store i64 10, i64* %vsize2, align 8, !dbg !186
  call void @llvm.dbg.declare(metadata %struct.RCoreObjc* %objc, metadata !187, metadata !DIExpression()), !dbg !188
  %core3 = getelementptr inbounds %struct.RCoreObjc, %struct.RCoreObjc* %objc, i32 0, i32 0, !dbg !189
  store %struct.r_core_t* %core, %struct.r_core_t** %core3, align 8, !dbg !190
  %file_size = getelementptr inbounds %struct.RCoreObjc, %struct.RCoreObjc* %objc, i32 0, i32 1, !dbg !191
  store i64 5, i64* %file_size, align 8, !dbg !192
  %_selrefs = getelementptr inbounds %struct.RCoreObjc, %struct.RCoreObjc* %objc, i32 0, i32 2, !dbg !193
  store %struct.r_bin_section_t* %selrefs, %struct.r_bin_section_t** %_selrefs, align 8, !dbg !194
  %_const = getelementptr inbounds %struct.RCoreObjc, %struct.RCoreObjc* %objc, i32 0, i32 3, !dbg !195
  store %struct.r_bin_section_t* %rconst, %struct.r_bin_section_t** %_const, align 8, !dbg !196
  %call = call zeroext i1 @objc_build_refs(%struct.RCoreObjc* %objc), !dbg !197
  ret i32 0, !dbg !198
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nofree nounwind willreturn writeonly }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4, !5, !6, !7}
!llvm.ident = !{!8}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/SVF-tools/SSE-TestCases/src/pass/CVE-2021-44975.c", directory: "/home/SVF-tools/SSE-TestCases")
!2 = !{}
!3 = !{i32 7, !"Dwarf Version", i32 4}
!4 = !{i32 2, !"Debug Info Version", i32 3}
!5 = !{i32 1, !"wchar_size", i32 4}
!6 = !{i32 7, !"uwtable", i32 1}
!7 = !{i32 7, !"frame-pointer", i32 2}
!8 = !{!"clang version 13.0.0"}
!9 = distinct !DISubprogram(name: "r_io_pread_at", scope: !10, file: !10, line: 37, type: !11, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!10 = !DIFile(filename: "src/pass/CVE-2021-44975.c", directory: "/home/SVF-tools/SSE-TestCases")
!11 = !DISubroutineType(types: !12)
!12 = !{!13, !14, !20, !13}
!13 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!14 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15, size: 64)
!15 = !DIDerivedType(tag: DW_TAG_typedef, name: "RIO", file: !10, line: 19, baseType: !16)
!16 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "r_io_t", file: !10, line: 17, size: 8, elements: !17)
!17 = !{!18}
!18 = !DIDerivedType(tag: DW_TAG_member, name: "Oxff", scope: !16, file: !10, line: 18, baseType: !19, size: 8)
!19 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !19, size: 64)
!21 = !DILocalVariable(name: "io", arg: 1, scope: !9, file: !10, line: 37, type: !14)
!22 = !DILocation(line: 37, column: 24, scope: !9)
!23 = !DILocalVariable(name: "buf", arg: 2, scope: !9, file: !10, line: 37, type: !20)
!24 = !DILocation(line: 37, column: 33, scope: !9)
!25 = !DILocalVariable(name: "len", arg: 3, scope: !9, file: !10, line: 37, type: !13)
!26 = !DILocation(line: 37, column: 42, scope: !9)
!27 = !DILocation(line: 38, column: 7, scope: !28)
!28 = distinct !DILexicalBlock(scope: !9, file: !10, line: 38, column: 5)
!29 = !DILocation(line: 38, column: 10, scope: !28)
!30 = !DILocation(line: 38, column: 13, scope: !28)
!31 = !DILocation(line: 38, column: 17, scope: !28)
!32 = !DILocation(line: 38, column: 20, scope: !28)
!33 = !DILocation(line: 38, column: 24, scope: !28)
!34 = !DILocation(line: 38, column: 5, scope: !9)
!35 = !DILocation(line: 39, column: 3, scope: !36)
!36 = distinct !DILexicalBlock(scope: !28, file: !10, line: 38, column: 31)
!37 = !DILocation(line: 43, column: 10, scope: !38)
!38 = distinct !DILexicalBlock(scope: !39, file: !10, line: 41, column: 12)
!39 = distinct !DILexicalBlock(scope: !9, file: !10, line: 41, column: 6)
!40 = !DILocation(line: 43, column: 15, scope: !38)
!41 = !DILocation(line: 43, column: 19, scope: !38)
!42 = !DILocation(line: 43, column: 3, scope: !38)
!43 = !DILocation(line: 43, column: 25, scope: !38)
!44 = !DILocation(line: 44, column: 18, scope: !38)
!45 = !DILocation(line: 44, column: 3, scope: !38)
!46 = !DILocation(line: 46, column: 2, scope: !9)
!47 = !DILocation(line: 47, column: 1, scope: !9)
!48 = distinct !DISubprogram(name: "internal_r_io_read_at", scope: !10, file: !10, line: 49, type: !49, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!49 = !DISubroutineType(types: !50)
!50 = !{!51, !14, !20, !13}
!51 = !DIBasicType(name: "_Bool", size: 8, encoding: DW_ATE_boolean)
!52 = !DILocalVariable(name: "io", arg: 1, scope: !48, file: !10, line: 49, type: !14)
!53 = !DILocation(line: 49, column: 33, scope: !48)
!54 = !DILocalVariable(name: "buf", arg: 2, scope: !48, file: !10, line: 49, type: !20)
!55 = !DILocation(line: 49, column: 42, scope: !48)
!56 = !DILocalVariable(name: "len", arg: 3, scope: !48, file: !10, line: 49, type: !13)
!57 = !DILocation(line: 49, column: 51, scope: !48)
!58 = !DILocation(line: 50, column: 6, scope: !59)
!59 = distinct !DILexicalBlock(scope: !48, file: !10, line: 50, column: 6)
!60 = !DILocation(line: 50, column: 10, scope: !59)
!61 = !DILocation(line: 50, column: 6, scope: !48)
!62 = !DILocation(line: 51, column: 3, scope: !63)
!63 = distinct !DILexicalBlock(scope: !59, file: !10, line: 50, column: 15)
!64 = !DILocalVariable(name: "ret", scope: !48, file: !10, line: 53, type: !51)
!65 = !DILocation(line: 53, column: 7, scope: !48)
!66 = !DILocation(line: 53, column: 28, scope: !48)
!67 = !DILocation(line: 53, column: 32, scope: !48)
!68 = !DILocation(line: 53, column: 37, scope: !48)
!69 = !DILocation(line: 53, column: 13, scope: !48)
!70 = !DILocation(line: 53, column: 42, scope: !48)
!71 = !DILocation(line: 54, column: 9, scope: !48)
!72 = !DILocation(line: 54, column: 2, scope: !48)
!73 = !DILocation(line: 55, column: 1, scope: !48)
!74 = distinct !DISubprogram(name: "r_io_read_at", scope: !10, file: !10, line: 58, type: !49, scopeLine: 58, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!75 = !DILocalVariable(name: "io", arg: 1, scope: !74, file: !10, line: 58, type: !14)
!76 = !DILocation(line: 58, column: 24, scope: !74)
!77 = !DILocalVariable(name: "buf", arg: 2, scope: !74, file: !10, line: 58, type: !20)
!78 = !DILocation(line: 58, column: 33, scope: !74)
!79 = !DILocalVariable(name: "len", arg: 3, scope: !74, file: !10, line: 58, type: !13)
!80 = !DILocation(line: 58, column: 42, scope: !74)
!81 = !DILocation(line: 59, column: 7, scope: !82)
!82 = distinct !DILexicalBlock(scope: !74, file: !10, line: 59, column: 5)
!83 = !DILocation(line: 59, column: 10, scope: !82)
!84 = !DILocation(line: 59, column: 13, scope: !82)
!85 = !DILocation(line: 59, column: 17, scope: !82)
!86 = !DILocation(line: 59, column: 20, scope: !82)
!87 = !DILocation(line: 59, column: 24, scope: !82)
!88 = !DILocation(line: 59, column: 5, scope: !74)
!89 = !DILocation(line: 60, column: 3, scope: !90)
!90 = distinct !DILexicalBlock(scope: !82, file: !10, line: 59, column: 31)
!91 = !DILocation(line: 62, column: 6, scope: !92)
!92 = distinct !DILexicalBlock(scope: !74, file: !10, line: 62, column: 6)
!93 = !DILocation(line: 62, column: 10, scope: !92)
!94 = !DILocation(line: 62, column: 6, scope: !74)
!95 = !DILocation(line: 63, column: 3, scope: !96)
!96 = distinct !DILexicalBlock(scope: !92, file: !10, line: 62, column: 16)
!97 = !DILocation(line: 65, column: 32, scope: !74)
!98 = !DILocation(line: 65, column: 36, scope: !74)
!99 = !DILocation(line: 65, column: 41, scope: !74)
!100 = !DILocation(line: 65, column: 9, scope: !74)
!101 = !DILocation(line: 65, column: 2, scope: !74)
!102 = !DILocation(line: 66, column: 1, scope: !74)
!103 = distinct !DISubprogram(name: "objc_build_refs", scope: !10, file: !10, line: 68, type: !104, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!104 = !DISubroutineType(types: !105)
!105 = !{!51, !106}
!106 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !107, size: 64)
!107 = !DIDerivedType(tag: DW_TAG_typedef, name: "RCoreObjc", file: !10, line: 35, baseType: !108)
!108 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !10, line: 30, size: 256, elements: !109)
!109 = !{!110, !116, !120, !127}
!110 = !DIDerivedType(tag: DW_TAG_member, name: "core", scope: !108, file: !10, line: 31, baseType: !111, size: 64)
!111 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !112, size: 64)
!112 = !DIDerivedType(tag: DW_TAG_typedef, name: "RCore", file: !10, line: 28, baseType: !113)
!113 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "r_core_t", file: !10, line: 25, size: 64, elements: !114)
!114 = !{!115}
!115 = !DIDerivedType(tag: DW_TAG_member, name: "io", scope: !113, file: !10, line: 26, baseType: !14, size: 64)
!116 = !DIDerivedType(tag: DW_TAG_member, name: "file_size", scope: !108, file: !10, line: 32, baseType: !117, size: 64, offset: 64)
!117 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !118, line: 46, baseType: !119)
!118 = !DIFile(filename: "SVF/llvm-13.0.0.obj/lib/clang/13.0.0/include/stddef.h", directory: "/home/SVF-tools")
!119 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!120 = !DIDerivedType(tag: DW_TAG_member, name: "_selrefs", scope: !108, file: !10, line: 33, baseType: !121, size: 64, offset: 128)
!121 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !122, size: 64)
!122 = !DIDerivedType(tag: DW_TAG_typedef, name: "RBinSection", file: !10, line: 23, baseType: !123)
!123 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "r_bin_section_t", file: !10, line: 21, size: 64, elements: !124)
!124 = !{!125}
!125 = !DIDerivedType(tag: DW_TAG_member, name: "vsize", scope: !123, file: !10, line: 22, baseType: !126, size: 64)
!126 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!127 = !DIDerivedType(tag: DW_TAG_member, name: "_const", scope: !108, file: !10, line: 34, baseType: !121, size: 64, offset: 192)
!128 = !DILocalVariable(name: "objc", arg: 1, scope: !103, file: !10, line: 68, type: !106)
!129 = !DILocation(line: 68, column: 33, scope: !103)
!130 = !DILocalVariable(name: "ss_const", scope: !103, file: !10, line: 69, type: !117)
!131 = !DILocation(line: 69, column: 9, scope: !103)
!132 = !DILocation(line: 69, column: 20, scope: !103)
!133 = !DILocation(line: 69, column: 26, scope: !103)
!134 = !DILocation(line: 69, column: 34, scope: !103)
!135 = !DILocalVariable(name: "ss_selrefs", scope: !103, file: !10, line: 70, type: !117)
!136 = !DILocation(line: 70, column: 9, scope: !103)
!137 = !DILocation(line: 70, column: 22, scope: !103)
!138 = !DILocation(line: 70, column: 28, scope: !103)
!139 = !DILocation(line: 70, column: 38, scope: !103)
!140 = !DILocalVariable(name: "maxsize", scope: !103, file: !10, line: 73, type: !117)
!141 = !DILocation(line: 73, column: 9, scope: !103)
!142 = !DILocation(line: 73, column: 19, scope: !103)
!143 = !DILocation(line: 74, column: 12, scope: !103)
!144 = !DILocation(line: 74, column: 10, scope: !103)
!145 = !DILocalVariable(name: "buf", scope: !103, file: !10, line: 76, type: !20)
!146 = !DILocation(line: 76, column: 7, scope: !103)
!147 = !DILocation(line: 76, column: 24, scope: !103)
!148 = !DILocation(line: 76, column: 13, scope: !103)
!149 = !DILocation(line: 77, column: 7, scope: !150)
!150 = distinct !DILexicalBlock(scope: !103, file: !10, line: 77, column: 6)
!151 = !DILocation(line: 77, column: 6, scope: !103)
!152 = !DILocation(line: 78, column: 3, scope: !153)
!153 = distinct !DILexicalBlock(scope: !150, file: !10, line: 77, column: 12)
!154 = !DILocation(line: 80, column: 21, scope: !155)
!155 = distinct !DILexicalBlock(scope: !103, file: !10, line: 80, column: 6)
!156 = !DILocation(line: 80, column: 27, scope: !155)
!157 = !DILocation(line: 80, column: 33, scope: !155)
!158 = !DILocation(line: 80, column: 37, scope: !155)
!159 = !DILocation(line: 80, column: 42, scope: !155)
!160 = !DILocation(line: 80, column: 7, scope: !155)
!161 = !DILocation(line: 80, column: 6, scope: !103)
!162 = !DILocation(line: 81, column: 61, scope: !163)
!163 = distinct !DILexicalBlock(scope: !155, file: !10, line: 80, column: 53)
!164 = !DILocation(line: 81, column: 3, scope: !163)
!165 = !DILocation(line: 82, column: 3, scope: !163)
!166 = !DILocation(line: 84, column: 2, scope: !103)
!167 = !DILocation(line: 85, column: 1, scope: !103)
!168 = distinct !DISubprogram(name: "main", scope: !10, file: !10, line: 87, type: !169, scopeLine: 87, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!169 = !DISubroutineType(types: !170)
!170 = !{!13}
!171 = !DILocalVariable(name: "io", scope: !168, file: !10, line: 88, type: !15)
!172 = !DILocation(line: 88, column: 6, scope: !168)
!173 = !DILocation(line: 89, column: 5, scope: !168)
!174 = !DILocation(line: 89, column: 10, scope: !168)
!175 = !DILocalVariable(name: "core", scope: !168, file: !10, line: 91, type: !112)
!176 = !DILocation(line: 91, column: 8, scope: !168)
!177 = !DILocation(line: 92, column: 7, scope: !168)
!178 = !DILocation(line: 92, column: 10, scope: !168)
!179 = !DILocalVariable(name: "selrefs", scope: !168, file: !10, line: 94, type: !122)
!180 = !DILocation(line: 94, column: 14, scope: !168)
!181 = !DILocalVariable(name: "rconst", scope: !168, file: !10, line: 95, type: !122)
!182 = !DILocation(line: 95, column: 14, scope: !168)
!183 = !DILocation(line: 96, column: 10, scope: !168)
!184 = !DILocation(line: 96, column: 16, scope: !168)
!185 = !DILocation(line: 97, column: 9, scope: !168)
!186 = !DILocation(line: 97, column: 15, scope: !168)
!187 = !DILocalVariable(name: "objc", scope: !168, file: !10, line: 99, type: !107)
!188 = !DILocation(line: 99, column: 12, scope: !168)
!189 = !DILocation(line: 100, column: 7, scope: !168)
!190 = !DILocation(line: 100, column: 12, scope: !168)
!191 = !DILocation(line: 101, column: 7, scope: !168)
!192 = !DILocation(line: 101, column: 17, scope: !168)
!193 = !DILocation(line: 102, column: 7, scope: !168)
!194 = !DILocation(line: 102, column: 16, scope: !168)
!195 = !DILocation(line: 103, column: 7, scope: !168)
!196 = !DILocation(line: 103, column: 14, scope: !168)
!197 = !DILocation(line: 105, column: 2, scope: !168)
!198 = !DILocation(line: 106, column: 1, scope: !168)
