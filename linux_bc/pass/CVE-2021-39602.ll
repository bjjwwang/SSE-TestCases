; ModuleID = 'linux_bc/pass/CVE-2021-39602.ll'
source_filename = "/home/SVF-tools/SSE-TestCases/src/pass/CVE-2021-39602.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.session = type { [1024 x i8] }

@.str = private unnamed_addr constant [256 x i8] c"dQTzRwmNuJFoD9pFIwx97jfTRv1rAbvZ0Wcz6FdQU6uBcM6TreKoHvS0418qcGBLSqRCK4o7K0VxcfZ8btrUiIGMYbvdFdXueAvE3DrvmwaoFb06t3ZkpNw9HrSB7xCsJmdo86ZhrrCMlIx0m7im6zwBM3qnjds3OW6seTegTihzANyeZQmH1ojYIb7nZJEBJkFu7Ov8IBifYUFjoZNVdaTEmD8CnXnthnDYB45ssxTkcsPMbF2oLycwepI0jmd\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.2 = private unnamed_addr constant [35 x i8] c"Create directory operation failed.\00", align 1
@.str.3 = private unnamed_addr constant [19 x i8] c"Permission denied.\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"\22%s\\%s\22 created\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !11 {
entry:
  %sess = alloca %struct.session, align 1
  call void @llvm.dbg.declare(metadata %struct.session* %sess, metadata !16, metadata !DIExpression()), !dbg !25
  %arg = getelementptr inbounds %struct.session, %struct.session* %sess, i32 0, i32 0, !dbg !26
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %arg, i64 0, i64 0, !dbg !27
  %call = call i8* @strcpy(i8* %arraydecay, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @.str, i64 0, i64 0)) #6, !dbg !28
  call void @do_mkd(%struct.session* %sess), !dbg !29
  ret i32 0, !dbg !30
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local i8* @strcpy(i8*, i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @do_mkd(%struct.session* %sess) #0 !dbg !31 {
entry:
  %sess.addr = alloca %struct.session*, align 8
  %buf = alloca [1024 x i8], align 16
  store %struct.session* %sess, %struct.session** %sess.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.session** %sess.addr, metadata !35, metadata !DIExpression()), !dbg !36
  %0 = load %struct.session*, %struct.session** %sess.addr, align 8, !dbg !37
  %arg = getelementptr inbounds %struct.session, %struct.session* %0, i32 0, i32 0, !dbg !39
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %arg, i64 0, i64 0, !dbg !37
  %call = call i32 @mkdir(i8* %arraydecay, i32 493) #6, !dbg !40
  %cmp = icmp slt i32 %call, 0, !dbg !41
  br i1 %cmp, label %if.then, label %if.end6, !dbg !42

if.then:                                          ; preds = %entry
  %call1 = call i32* @__errno_location() #7, !dbg !43
  %1 = load i32, i32* %call1, align 4, !dbg !43
  %cmp2 = icmp eq i32 %1, 17, !dbg !46
  br i1 %cmp2, label %if.then3, label %if.else, !dbg !47

if.then3:                                         ; preds = %if.then
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i64 0, i64 0)), !dbg !48
  br label %if.end, !dbg !50

if.else:                                          ; preds = %if.then
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0)), !dbg !51
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then3
  br label %if.end16, !dbg !53

if.end6:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata [1024 x i8]* %buf, metadata !54, metadata !DIExpression()), !dbg !55
  %2 = bitcast [1024 x i8]* %buf to i8*, !dbg !55
  call void @llvm.memset.p0i8.i64(i8* align 16 %2, i8 0, i64 1024, i1 false), !dbg !55
  %arraydecay7 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i64 0, i64 0, !dbg !56
  %call8 = call i8* @getcwd(i8* %arraydecay7, i64 1024) #6, !dbg !58
  %cmp9 = icmp ne i8* %call8, null, !dbg !59
  br i1 %cmp9, label %if.then10, label %if.end16, !dbg !60

if.then10:                                        ; preds = %if.end6
  %arraydecay11 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i64 0, i64 0, !dbg !61
  %arraydecay12 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i64 0, i64 0, !dbg !63
  %3 = load %struct.session*, %struct.session** %sess.addr, align 8, !dbg !64
  %arg13 = getelementptr inbounds %struct.session, %struct.session* %3, i32 0, i32 0, !dbg !65
  %arraydecay14 = getelementptr inbounds [1024 x i8], [1024 x i8]* %arg13, i64 0, i64 0, !dbg !64
  %call15 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay11, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i8* %arraydecay12, i8* %arraydecay14) #6, !dbg !66
  br label %if.end16, !dbg !67

if.end16:                                         ; preds = %if.then10, %if.end6, %if.end
  ret void, !dbg !68
}

; Function Attrs: nounwind
declare dso_local i32 @mkdir(i8*, i32) #2

; Function Attrs: nounwind readnone willreturn
declare dso_local i32* @__errno_location() #3

declare dso_local i32 @printf(i8*, ...) #4

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

; Function Attrs: nounwind
declare dso_local i8* @getcwd(i8*, i64) #2

; Function Attrs: nounwind
declare dso_local i32 @sprintf(i8*, i8*, ...) #2

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind readnone willreturn "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { argmemonly nofree nounwind willreturn writeonly }
attributes #6 = { nounwind }
attributes #7 = { nounwind readnone willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!5, !6, !7, !8, !9}
!llvm.ident = !{!10}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/SVF-tools/SSE-TestCases/src/pass/CVE-2021-39602.c", directory: "/home/SVF-tools/SSE-TestCases")
!2 = !{}
!3 = !{!4}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!5 = !{i32 7, !"Dwarf Version", i32 4}
!6 = !{i32 2, !"Debug Info Version", i32 3}
!7 = !{i32 1, !"wchar_size", i32 4}
!8 = !{i32 7, !"uwtable", i32 1}
!9 = !{i32 7, !"frame-pointer", i32 2}
!10 = !{!"clang version 13.0.0"}
!11 = distinct !DISubprogram(name: "main", scope: !12, file: !12, line: 43, type: !13, scopeLine: 43, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!12 = !DIFile(filename: "src/pass/CVE-2021-39602.c", directory: "/home/SVF-tools/SSE-TestCases")
!13 = !DISubroutineType(types: !14)
!14 = !{!15}
!15 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!16 = !DILocalVariable(name: "sess", scope: !11, file: !12, line: 44, type: !17)
!17 = !DIDerivedType(tag: DW_TAG_typedef, name: "session_t", file: !12, line: 23, baseType: !18)
!18 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "session", file: !12, line: 21, size: 8192, elements: !19)
!19 = !{!20}
!20 = !DIDerivedType(tag: DW_TAG_member, name: "arg", scope: !18, file: !12, line: 22, baseType: !21, size: 8192)
!21 = !DICompositeType(tag: DW_TAG_array_type, baseType: !22, size: 8192, elements: !23)
!22 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!23 = !{!24}
!24 = !DISubrange(count: 1024)
!25 = !DILocation(line: 44, column: 12, scope: !11)
!26 = !DILocation(line: 45, column: 17, scope: !11)
!27 = !DILocation(line: 45, column: 12, scope: !11)
!28 = !DILocation(line: 45, column: 5, scope: !11)
!29 = !DILocation(line: 47, column: 5, scope: !11)
!30 = !DILocation(line: 48, column: 1, scope: !11)
!31 = distinct !DISubprogram(name: "do_mkd", scope: !12, file: !12, line: 25, type: !32, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!32 = !DISubroutineType(types: !33)
!33 = !{null, !34}
!34 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17, size: 64)
!35 = !DILocalVariable(name: "sess", arg: 1, scope: !31, file: !12, line: 25, type: !34)
!36 = !DILocation(line: 25, column: 31, scope: !31)
!37 = !DILocation(line: 26, column: 11, scope: !38)
!38 = distinct !DILexicalBlock(scope: !31, file: !12, line: 26, column: 5)
!39 = !DILocation(line: 26, column: 17, scope: !38)
!40 = !DILocation(line: 26, column: 5, scope: !38)
!41 = !DILocation(line: 26, column: 28, scope: !38)
!42 = !DILocation(line: 26, column: 5, scope: !31)
!43 = !DILocation(line: 27, column: 6, scope: !44)
!44 = distinct !DILexicalBlock(scope: !45, file: !12, line: 27, column: 6)
!45 = distinct !DILexicalBlock(scope: !38, file: !12, line: 26, column: 33)
!46 = !DILocation(line: 27, column: 12, scope: !44)
!47 = !DILocation(line: 27, column: 6, scope: !45)
!48 = !DILocation(line: 28, column: 4, scope: !49)
!49 = distinct !DILexicalBlock(scope: !44, file: !12, line: 27, column: 23)
!50 = !DILocation(line: 29, column: 3, scope: !49)
!51 = !DILocation(line: 31, column: 4, scope: !52)
!52 = distinct !DILexicalBlock(scope: !44, file: !12, line: 30, column: 8)
!53 = !DILocation(line: 33, column: 3, scope: !45)
!54 = !DILocalVariable(name: "buf", scope: !31, file: !12, line: 35, type: !21)
!55 = !DILocation(line: 35, column: 7, scope: !31)
!56 = !DILocation(line: 36, column: 12, scope: !57)
!57 = distinct !DILexicalBlock(scope: !31, file: !12, line: 36, column: 5)
!58 = !DILocation(line: 36, column: 5, scope: !57)
!59 = !DILocation(line: 36, column: 34, scope: !57)
!60 = !DILocation(line: 36, column: 5, scope: !31)
!61 = !DILocation(line: 38, column: 11, scope: !62)
!62 = distinct !DILexicalBlock(scope: !57, file: !12, line: 36, column: 43)
!63 = !DILocation(line: 38, column: 37, scope: !62)
!64 = !DILocation(line: 38, column: 41, scope: !62)
!65 = !DILocation(line: 38, column: 47, scope: !62)
!66 = !DILocation(line: 38, column: 3, scope: !62)
!67 = !DILocation(line: 40, column: 2, scope: !62)
!68 = !DILocation(line: 41, column: 1, scope: !31)
