; ModuleID = 'linux_bc/pass/CVE-2021-45341.ll'
source_filename = "/home/SVF-tools/SSE-TestCases/src/pass/CVE-2021-45341.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2 = private unnamed_addr constant [668 x i8] c"255 513 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @Serialize(i8* %ifstr) #0 !dbg !9 {
entry:
  %ifstr.addr = alloca i8*, align 8
  %wd = alloca i32, align 4
  %buf = alloca [512 x i8], align 16
  %ifstr_cpy = alloca i8*, align 8
  %token = alloca i8*, align 8
  store i8* %ifstr, i8** %ifstr.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ifstr.addr, metadata !15, metadata !DIExpression()), !dbg !16
  call void @llvm.dbg.declare(metadata i32* %wd, metadata !17, metadata !DIExpression()), !dbg !19
  call void @llvm.dbg.declare(metadata [512 x i8]* %buf, metadata !20, metadata !DIExpression()), !dbg !24
  call void @llvm.dbg.declare(metadata i8** %ifstr_cpy, metadata !25, metadata !DIExpression()), !dbg !26
  %0 = load i8*, i8** %ifstr.addr, align 8, !dbg !27
  %call = call i64 @strlen(i8* %0) #5, !dbg !28
  %add = add i64 %call, 1, !dbg !29
  %call1 = call noalias align 16 i8* @malloc(i64 %add) #6, !dbg !30
  store i8* %call1, i8** %ifstr_cpy, align 8, !dbg !26
  %1 = load i8*, i8** %ifstr_cpy, align 8, !dbg !31
  %2 = load i8*, i8** %ifstr.addr, align 8, !dbg !32
  %call2 = call i8* @strcpy(i8* %1, i8* %2) #6, !dbg !33
  call void @llvm.dbg.declare(metadata i8** %token, metadata !34, metadata !DIExpression()), !dbg !35
  %3 = load i8*, i8** %ifstr_cpy, align 8, !dbg !36
  %call3 = call i8* @strtok(i8* %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)) #6, !dbg !37
  store i8* %call3, i8** %token, align 8, !dbg !35
  %call4 = call i8* @strtok(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)) #6, !dbg !38
  store i8* %call4, i8** %token, align 8, !dbg !41
  %4 = load i8*, i8** %token, align 8, !dbg !42
  %call5 = call i32 @atoi(i8* %4) #5, !dbg !43
  store i32 %call5, i32* %wd, align 4, !dbg !44
  %call6 = call i8* @strtok(i8* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !45
  store i8* %call6, i8** %token, align 8, !dbg !46
  %arraydecay = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 0, !dbg !47
  %5 = load i8*, i8** %token, align 8, !dbg !48
  %6 = load i32, i32* %wd, align 4, !dbg !49
  %conv = sext i32 %6 to i64, !dbg !49
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %arraydecay, i8* align 1 %5, i64 %conv, i1 false), !dbg !47
  %7 = load i32, i32* %wd, align 4, !dbg !50
  %idxprom = sext i32 %7 to i64, !dbg !51
  %arrayidx = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 %idxprom, !dbg !51
  store i8 0, i8* %arrayidx, align 1, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local noalias align 16 i8* @malloc(i64) #2

; Function Attrs: nounwind readonly willreturn
declare dso_local i64 @strlen(i8*) #3

; Function Attrs: nounwind
declare dso_local i8* @strcpy(i8*, i8*) #2

; Function Attrs: nounwind
declare dso_local i8* @strtok(i8*, i8*) #2

; Function Attrs: nounwind readonly willreturn
declare dso_local i32 @atoi(i8*) #3

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !54 {
entry:
  %ifstr = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %ifstr, metadata !57, metadata !DIExpression()), !dbg !58
  store i8* getelementptr inbounds ([668 x i8], [668 x i8]* @.str.2, i64 0, i64 0), i8** %ifstr, align 8, !dbg !58
  %0 = load i8*, i8** %ifstr, align 8, !dbg !59
  call void @Serialize(i8* %0), !dbg !60
  ret i32 0, !dbg !61
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind readonly willreturn "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { argmemonly nofree nounwind willreturn }
attributes #5 = { nounwind readonly willreturn }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4, !5, !6, !7}
!llvm.ident = !{!8}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/SVF-tools/SSE-TestCases/src/pass/CVE-2021-45341.c", directory: "/home/SVF-tools/SSE-TestCases")
!2 = !{}
!3 = !{i32 7, !"Dwarf Version", i32 4}
!4 = !{i32 2, !"Debug Info Version", i32 3}
!5 = !{i32 1, !"wchar_size", i32 4}
!6 = !{i32 7, !"uwtable", i32 1}
!7 = !{i32 7, !"frame-pointer", i32 2}
!8 = !{!"clang version 13.0.0"}
!9 = distinct !DISubprogram(name: "Serialize", scope: !10, file: !10, line: 13, type: !11, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!10 = !DIFile(filename: "src/pass/CVE-2021-45341.c", directory: "/home/SVF-tools/SSE-TestCases")
!11 = !DISubroutineType(types: !12)
!12 = !{null, !13}
!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64)
!14 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!15 = !DILocalVariable(name: "ifstr", arg: 1, scope: !9, file: !10, line: 13, type: !13)
!16 = !DILocation(line: 13, column: 22, scope: !9)
!17 = !DILocalVariable(name: "wd", scope: !9, file: !10, line: 14, type: !18)
!18 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!19 = !DILocation(line: 14, column: 9, scope: !9)
!20 = !DILocalVariable(name: "buf", scope: !9, file: !10, line: 15, type: !21)
!21 = !DICompositeType(tag: DW_TAG_array_type, baseType: !14, size: 4096, elements: !22)
!22 = !{!23}
!23 = !DISubrange(count: 512)
!24 = !DILocation(line: 15, column: 10, scope: !9)
!25 = !DILocalVariable(name: "ifstr_cpy", scope: !9, file: !10, line: 17, type: !13)
!26 = !DILocation(line: 17, column: 11, scope: !9)
!27 = !DILocation(line: 17, column: 37, scope: !9)
!28 = !DILocation(line: 17, column: 30, scope: !9)
!29 = !DILocation(line: 17, column: 44, scope: !9)
!30 = !DILocation(line: 17, column: 23, scope: !9)
!31 = !DILocation(line: 18, column: 12, scope: !9)
!32 = !DILocation(line: 18, column: 23, scope: !9)
!33 = !DILocation(line: 18, column: 5, scope: !9)
!34 = !DILocalVariable(name: "token", scope: !9, file: !10, line: 19, type: !13)
!35 = !DILocation(line: 19, column: 11, scope: !9)
!36 = !DILocation(line: 19, column: 26, scope: !9)
!37 = !DILocation(line: 19, column: 19, scope: !9)
!38 = !DILocation(line: 22, column: 17, scope: !39)
!39 = distinct !DILexicalBlock(scope: !40, file: !10, line: 21, column: 14)
!40 = distinct !DILexicalBlock(scope: !9, file: !10, line: 21, column: 8)
!41 = !DILocation(line: 22, column: 15, scope: !39)
!42 = !DILocation(line: 23, column: 19, scope: !39)
!43 = !DILocation(line: 23, column: 14, scope: !39)
!44 = !DILocation(line: 23, column: 12, scope: !39)
!45 = !DILocation(line: 25, column: 17, scope: !39)
!46 = !DILocation(line: 25, column: 15, scope: !39)
!47 = !DILocation(line: 27, column: 9, scope: !39)
!48 = !DILocation(line: 27, column: 21, scope: !39)
!49 = !DILocation(line: 27, column: 28, scope: !39)
!50 = !DILocation(line: 28, column: 13, scope: !39)
!51 = !DILocation(line: 28, column: 9, scope: !39)
!52 = !DILocation(line: 28, column: 17, scope: !39)
!53 = !DILocation(line: 31, column: 1, scope: !9)
!54 = distinct !DISubprogram(name: "main", scope: !10, file: !10, line: 33, type: !55, scopeLine: 33, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!55 = !DISubroutineType(types: !56)
!56 = !{!18}
!57 = !DILocalVariable(name: "ifstr", scope: !54, file: !10, line: 34, type: !13)
!58 = !DILocation(line: 34, column: 11, scope: !54)
!59 = !DILocation(line: 35, column: 15, scope: !54)
!60 = !DILocation(line: 35, column: 5, scope: !54)
!61 = !DILocation(line: 36, column: 1, scope: !54)
