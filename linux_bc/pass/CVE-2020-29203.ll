; ModuleID = 'linux_bc/pass/CVE-2020-29203.ll'
source_filename = "/home/SVF-tools/SSE-TestCases/src/pass/CVE-2020-29203.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.cJSON = type { %struct.cJSON*, i8*, i8* }
%struct.Hometown = type { [8 x i8] }

@.str = private unnamed_addr constant [5 x i8] c"name\00", align 1
@.str.1 = private unnamed_addr constant [79 x i8] c"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local %struct.cJSON* @cJSON_CreateString(i8* %string) #0 !dbg !21 {
entry:
  %string.addr = alloca i8*, align 8
  %item = alloca %struct.cJSON*, align 8
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !26, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item, metadata !28, metadata !DIExpression()), !dbg !29
  %call = call noalias align 16 i8* @malloc(i64 24) #6, !dbg !30
  %0 = bitcast i8* %call to %struct.cJSON*, !dbg !31
  store %struct.cJSON* %0, %struct.cJSON** %item, align 8, !dbg !29
  %1 = load i8*, i8** %string.addr, align 8, !dbg !32
  %call1 = call i8* @cJSON_strdup(i8* %1), !dbg !33
  %2 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !34
  %valuestring = getelementptr inbounds %struct.cJSON, %struct.cJSON* %2, i32 0, i32 1, !dbg !35
  store i8* %call1, i8** %valuestring, align 8, !dbg !36
  %3 = load %struct.cJSON*, %struct.cJSON** %item, align 8, !dbg !37
  ret %struct.cJSON* %3, !dbg !38
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local noalias align 16 i8* @malloc(i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @cJSON_strdup(i8* %str) #0 !dbg !39 {
entry:
  %str.addr = alloca i8*, align 8
  %len = alloca i64, align 8
  %copy = alloca i8*, align 8
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !42, metadata !DIExpression()), !dbg !43
  call void @llvm.dbg.declare(metadata i64* %len, metadata !44, metadata !DIExpression()), !dbg !48
  %0 = load i8*, i8** %str.addr, align 8, !dbg !49
  %call = call i64 @strlen(i8* %0) #7, !dbg !50
  %add = add i64 %call, 1, !dbg !51
  store i64 %add, i64* %len, align 8, !dbg !48
  call void @llvm.dbg.declare(metadata i8** %copy, metadata !52, metadata !DIExpression()), !dbg !53
  %1 = load i64, i64* %len, align 8, !dbg !54
  %call1 = call noalias align 16 i8* @malloc(i64 %1) #6, !dbg !55
  store i8* %call1, i8** %copy, align 8, !dbg !53
  %2 = load i8*, i8** %copy, align 8, !dbg !56
  %3 = load i8*, i8** %str.addr, align 8, !dbg !57
  %4 = load i64, i64* %len, align 8, !dbg !58
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2, i8* align 1 %3, i64 %4, i1 false), !dbg !59
  %5 = load i8*, i8** %copy, align 8, !dbg !60
  ret i8* %5, !dbg !61
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @cJSON_AddItemToArray(%struct.cJSON* %array, %struct.cJSON* %item) #0 !dbg !62 {
entry:
  %array.addr = alloca %struct.cJSON*, align 8
  %item.addr = alloca %struct.cJSON*, align 8
  %c = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %array, %struct.cJSON** %array.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %array.addr, metadata !65, metadata !DIExpression()), !dbg !66
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !67, metadata !DIExpression()), !dbg !68
  call void @llvm.dbg.declare(metadata %struct.cJSON** %c, metadata !69, metadata !DIExpression()), !dbg !70
  %0 = load %struct.cJSON*, %struct.cJSON** %array.addr, align 8, !dbg !71
  %child = getelementptr inbounds %struct.cJSON, %struct.cJSON* %0, i32 0, i32 0, !dbg !72
  %1 = load %struct.cJSON*, %struct.cJSON** %child, align 8, !dbg !72
  store %struct.cJSON* %1, %struct.cJSON** %c, align 8, !dbg !70
  %2 = load %struct.cJSON*, %struct.cJSON** %c, align 8, !dbg !73
  %tobool = icmp ne %struct.cJSON* %2, null, !dbg !73
  br i1 %tobool, label %if.end, label %if.then, !dbg !75

if.then:                                          ; preds = %entry
  %3 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !76
  %4 = load %struct.cJSON*, %struct.cJSON** %array.addr, align 8, !dbg !78
  %child1 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %4, i32 0, i32 0, !dbg !79
  store %struct.cJSON* %3, %struct.cJSON** %child1, align 8, !dbg !80
  br label %if.end, !dbg !81

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !82
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @cJSON_AddItemToObject(%struct.cJSON* %object, i8* %string, %struct.cJSON* %item) #0 !dbg !83 {
entry:
  %object.addr = alloca %struct.cJSON*, align 8
  %string.addr = alloca i8*, align 8
  %item.addr = alloca %struct.cJSON*, align 8
  store %struct.cJSON* %object, %struct.cJSON** %object.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %object.addr, metadata !86, metadata !DIExpression()), !dbg !87
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !88, metadata !DIExpression()), !dbg !89
  store %struct.cJSON* %item, %struct.cJSON** %item.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %item.addr, metadata !90, metadata !DIExpression()), !dbg !91
  %0 = load i8*, i8** %string.addr, align 8, !dbg !92
  %call = call i8* @cJSON_strdup(i8* %0), !dbg !93
  %1 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !94
  %string1 = getelementptr inbounds %struct.cJSON, %struct.cJSON* %1, i32 0, i32 2, !dbg !95
  store i8* %call, i8** %string1, align 8, !dbg !96
  %2 = load %struct.cJSON*, %struct.cJSON** %object.addr, align 8, !dbg !97
  %3 = load %struct.cJSON*, %struct.cJSON** %item.addr, align 8, !dbg !98
  call void @cJSON_AddItemToArray(%struct.cJSON* %2, %struct.cJSON* %3), !dbg !99
  ret void, !dbg !100
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !101 {
entry:
  %json = alloca %struct.cJSON*, align 8
  %test = alloca %struct.Hometown*, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %json, metadata !105, metadata !DIExpression()), !dbg !106
  %call = call noalias align 16 i8* @malloc(i64 24) #6, !dbg !107
  %0 = bitcast i8* %call to %struct.cJSON*, !dbg !108
  store %struct.cJSON* %0, %struct.cJSON** %json, align 8, !dbg !106
  %1 = load %struct.cJSON*, %struct.cJSON** %json, align 8, !dbg !109
  %call1 = call %struct.cJSON* @cJSON_CreateString(i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.1, i64 0, i64 0)), !dbg !110
  call void @cJSON_AddItemToObject(%struct.cJSON* %1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), %struct.cJSON* %call1), !dbg !111
  call void @llvm.dbg.declare(metadata %struct.Hometown** %test, metadata !112, metadata !DIExpression()), !dbg !121
  %2 = load %struct.cJSON*, %struct.cJSON** %json, align 8, !dbg !122
  %call2 = call i8* @json_to_struct(%struct.cJSON* %2), !dbg !123
  %3 = bitcast i8* %call2 to %struct.Hometown*, !dbg !123
  store %struct.Hometown* %3, %struct.Hometown** %test, align 8, !dbg !121
  ret i32 0, !dbg !124
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @json_to_struct(%struct.cJSON* %json_obj) #0 !dbg !125 {
entry:
  %json_obj.addr = alloca %struct.cJSON*, align 8
  %json_temp = alloca %struct.cJSON*, align 8
  %struct_hometown = alloca %struct.Hometown*, align 8
  store %struct.cJSON* %json_obj, %struct.cJSON** %json_obj.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cJSON** %json_obj.addr, metadata !129, metadata !DIExpression()), !dbg !130
  call void @llvm.dbg.declare(metadata %struct.cJSON** %json_temp, metadata !131, metadata !DIExpression()), !dbg !132
  call void @llvm.dbg.declare(metadata %struct.Hometown** %struct_hometown, metadata !133, metadata !DIExpression()), !dbg !132
  %call = call noalias align 16 i8* @malloc(i64 8) #6, !dbg !132
  %0 = bitcast i8* %call to %struct.Hometown*, !dbg !132
  store %struct.Hometown* %0, %struct.Hometown** %struct_hometown, align 8, !dbg !132
  %1 = load %struct.Hometown*, %struct.Hometown** %struct_hometown, align 8, !dbg !134
  %tobool = icmp ne %struct.Hometown* %1, null, !dbg !134
  br i1 %tobool, label %if.then, label %if.end, !dbg !132

if.then:                                          ; preds = %entry
  %2 = load %struct.Hometown*, %struct.Hometown** %struct_hometown, align 8, !dbg !134
  %3 = bitcast %struct.Hometown* %2 to i8*, !dbg !134
  call void @llvm.memset.p0i8.i64(i8* align 1 %3, i8 0, i64 8, i1 false), !dbg !134
  br label %if.end, !dbg !134

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.cJSON*, %struct.cJSON** %json_obj.addr, align 8, !dbg !136
  %child = getelementptr inbounds %struct.cJSON, %struct.cJSON* %4, i32 0, i32 0, !dbg !136
  %5 = load %struct.cJSON*, %struct.cJSON** %child, align 8, !dbg !136
  store %struct.cJSON* %5, %struct.cJSON** %json_temp, align 8, !dbg !136
  %6 = load %struct.cJSON*, %struct.cJSON** %json_temp, align 8, !dbg !137
  %tobool1 = icmp ne %struct.cJSON* %6, null, !dbg !137
  br i1 %tobool1, label %if.then2, label %if.end4, !dbg !136

if.then2:                                         ; preds = %if.end
  %7 = load %struct.Hometown*, %struct.Hometown** %struct_hometown, align 8, !dbg !137
  %name = getelementptr inbounds %struct.Hometown, %struct.Hometown* %7, i32 0, i32 0, !dbg !137
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %name, i64 0, i64 0, !dbg !137
  %8 = load %struct.cJSON*, %struct.cJSON** %json_temp, align 8, !dbg !137
  %valuestring = getelementptr inbounds %struct.cJSON, %struct.cJSON* %8, i32 0, i32 1, !dbg !137
  %9 = load i8*, i8** %valuestring, align 8, !dbg !137
  %call3 = call i8* @strcpy(i8* %arraydecay, i8* %9) #6, !dbg !137
  br label %if.end4, !dbg !137

if.end4:                                          ; preds = %if.then2, %if.end
  %10 = load %struct.Hometown*, %struct.Hometown** %struct_hometown, align 8, !dbg !139
  %11 = bitcast %struct.Hometown* %10 to i8*, !dbg !139
  ret i8* %11, !dbg !140
}

; Function Attrs: nounwind readonly willreturn
declare dso_local i64 @strlen(i8*) #3

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #4

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

; Function Attrs: nounwind
declare dso_local i8* @strcpy(i8*, i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind readonly willreturn "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { argmemonly nofree nounwind willreturn }
attributes #5 = { argmemonly nofree nounwind willreturn writeonly }
attributes #6 = { nounwind }
attributes #7 = { nounwind readonly willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!15, !16, !17, !18, !19}
!llvm.ident = !{!20}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/SVF-tools/SSE-TestCases/src/pass/CVE-2020-29203.c", directory: "/home/SVF-tools/SSE-TestCases")
!2 = !{}
!3 = !{!4, !12}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64)
!5 = !DIDerivedType(tag: DW_TAG_typedef, name: "cJSON", file: !6, line: 22, baseType: !7)
!6 = !DIFile(filename: "src/pass/CVE-2020-29203.c", directory: "/home/SVF-tools/SSE-TestCases")
!7 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cJSON", file: !6, line: 18, size: 192, elements: !8)
!8 = !{!9, !11, !14}
!9 = !DIDerivedType(tag: DW_TAG_member, name: "child", scope: !7, file: !6, line: 19, baseType: !10, size: 64)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!11 = !DIDerivedType(tag: DW_TAG_member, name: "valuestring", scope: !7, file: !6, line: 20, baseType: !12, size: 64, offset: 64)
!12 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !13, size: 64)
!13 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!14 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !7, file: !6, line: 21, baseType: !12, size: 64, offset: 128)
!15 = !{i32 7, !"Dwarf Version", i32 4}
!16 = !{i32 2, !"Debug Info Version", i32 3}
!17 = !{i32 1, !"wchar_size", i32 4}
!18 = !{i32 7, !"uwtable", i32 1}
!19 = !{i32 7, !"frame-pointer", i32 2}
!20 = !{!"clang version 13.0.0"}
!21 = distinct !DISubprogram(name: "cJSON_CreateString", scope: !6, file: !6, line: 41, type: !22, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!22 = !DISubroutineType(types: !23)
!23 = !{!4, !24}
!24 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !25, size: 64)
!25 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !13)
!26 = !DILocalVariable(name: "string", arg: 1, scope: !21, file: !6, line: 41, type: !24)
!27 = !DILocation(line: 41, column: 39, scope: !21)
!28 = !DILocalVariable(name: "item", scope: !21, file: !6, line: 42, type: !4)
!29 = !DILocation(line: 42, column: 12, scope: !21)
!30 = !DILocation(line: 42, column: 27, scope: !21)
!31 = !DILocation(line: 42, column: 19, scope: !21)
!32 = !DILocation(line: 43, column: 36, scope: !21)
!33 = !DILocation(line: 43, column: 23, scope: !21)
!34 = !DILocation(line: 43, column: 5, scope: !21)
!35 = !DILocation(line: 43, column: 11, scope: !21)
!36 = !DILocation(line: 43, column: 22, scope: !21)
!37 = !DILocation(line: 44, column: 12, scope: !21)
!38 = !DILocation(line: 44, column: 5, scope: !21)
!39 = distinct !DISubprogram(name: "cJSON_strdup", scope: !6, file: !6, line: 34, type: !40, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!40 = !DISubroutineType(types: !41)
!41 = !{!12, !24}
!42 = !DILocalVariable(name: "str", arg: 1, scope: !39, file: !6, line: 34, type: !24)
!43 = !DILocation(line: 34, column: 39, scope: !39)
!44 = !DILocalVariable(name: "len", scope: !39, file: !6, line: 35, type: !45)
!45 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !46, line: 46, baseType: !47)
!46 = !DIFile(filename: "SVF/llvm-13.0.0.obj/lib/clang/13.0.0/include/stddef.h", directory: "/home/SVF-tools")
!47 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!48 = !DILocation(line: 35, column: 14, scope: !39)
!49 = !DILocation(line: 35, column: 27, scope: !39)
!50 = !DILocation(line: 35, column: 20, scope: !39)
!51 = !DILocation(line: 35, column: 32, scope: !39)
!52 = !DILocalVariable(name: "copy", scope: !39, file: !6, line: 36, type: !12)
!53 = !DILocation(line: 36, column: 13, scope: !39)
!54 = !DILocation(line: 36, column: 34, scope: !39)
!55 = !DILocation(line: 36, column: 27, scope: !39)
!56 = !DILocation(line: 37, column: 14, scope: !39)
!57 = !DILocation(line: 37, column: 19, scope: !39)
!58 = !DILocation(line: 37, column: 23, scope: !39)
!59 = !DILocation(line: 37, column: 7, scope: !39)
!60 = !DILocation(line: 38, column: 14, scope: !39)
!61 = !DILocation(line: 38, column: 7, scope: !39)
!62 = distinct !DISubprogram(name: "cJSON_AddItemToArray", scope: !6, file: !6, line: 47, type: !63, scopeLine: 47, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!63 = !DISubroutineType(types: !64)
!64 = !{null, !4, !4}
!65 = !DILocalVariable(name: "array", arg: 1, scope: !62, file: !6, line: 47, type: !4)
!66 = !DILocation(line: 47, column: 34, scope: !62)
!67 = !DILocalVariable(name: "item", arg: 2, scope: !62, file: !6, line: 47, type: !4)
!68 = !DILocation(line: 47, column: 48, scope: !62)
!69 = !DILocalVariable(name: "c", scope: !62, file: !6, line: 48, type: !4)
!70 = !DILocation(line: 48, column: 12, scope: !62)
!71 = !DILocation(line: 48, column: 16, scope: !62)
!72 = !DILocation(line: 48, column: 23, scope: !62)
!73 = !DILocation(line: 49, column: 10, scope: !74)
!74 = distinct !DILexicalBlock(scope: !62, file: !6, line: 49, column: 9)
!75 = !DILocation(line: 49, column: 9, scope: !62)
!76 = !DILocation(line: 50, column: 24, scope: !77)
!77 = distinct !DILexicalBlock(scope: !74, file: !6, line: 49, column: 13)
!78 = !DILocation(line: 50, column: 9, scope: !77)
!79 = !DILocation(line: 50, column: 16, scope: !77)
!80 = !DILocation(line: 50, column: 22, scope: !77)
!81 = !DILocation(line: 51, column: 5, scope: !77)
!82 = !DILocation(line: 52, column: 1, scope: !62)
!83 = distinct !DISubprogram(name: "cJSON_AddItemToObject", scope: !6, file: !6, line: 54, type: !84, scopeLine: 54, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!84 = !DISubroutineType(types: !85)
!85 = !{null, !4, !24, !4}
!86 = !DILocalVariable(name: "object", arg: 1, scope: !83, file: !6, line: 54, type: !4)
!87 = !DILocation(line: 54, column: 35, scope: !83)
!88 = !DILocalVariable(name: "string", arg: 2, scope: !83, file: !6, line: 54, type: !24)
!89 = !DILocation(line: 54, column: 54, scope: !83)
!90 = !DILocalVariable(name: "item", arg: 3, scope: !83, file: !6, line: 54, type: !4)
!91 = !DILocation(line: 54, column: 68, scope: !83)
!92 = !DILocation(line: 55, column: 31, scope: !83)
!93 = !DILocation(line: 55, column: 18, scope: !83)
!94 = !DILocation(line: 55, column: 5, scope: !83)
!95 = !DILocation(line: 55, column: 11, scope: !83)
!96 = !DILocation(line: 55, column: 17, scope: !83)
!97 = !DILocation(line: 56, column: 26, scope: !83)
!98 = !DILocation(line: 56, column: 33, scope: !83)
!99 = !DILocation(line: 56, column: 5, scope: !83)
!100 = !DILocation(line: 57, column: 1, scope: !83)
!101 = distinct !DISubprogram(name: "main", scope: !6, file: !6, line: 65, type: !102, scopeLine: 65, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!102 = !DISubroutineType(types: !103)
!103 = !{!104}
!104 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!105 = !DILocalVariable(name: "json", scope: !101, file: !6, line: 66, type: !4)
!106 = !DILocation(line: 66, column: 10, scope: !101)
!107 = !DILocation(line: 66, column: 25, scope: !101)
!108 = !DILocation(line: 66, column: 17, scope: !101)
!109 = !DILocation(line: 67, column: 25, scope: !101)
!110 = !DILocation(line: 67, column: 39, scope: !101)
!111 = !DILocation(line: 67, column: 3, scope: !101)
!112 = !DILocalVariable(name: "test", scope: !101, file: !6, line: 68, type: !113)
!113 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !114, size: 64)
!114 = !DIDerivedType(tag: DW_TAG_typedef, name: "Hometown", file: !6, line: 15, baseType: !115)
!115 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !6, line: 13, size: 64, elements: !116)
!116 = !{!117}
!117 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !115, file: !6, line: 14, baseType: !118, size: 64)
!118 = !DICompositeType(tag: DW_TAG_array_type, baseType: !13, size: 64, elements: !119)
!119 = !{!120}
!120 = !DISubrange(count: 8)
!121 = !DILocation(line: 68, column: 14, scope: !101)
!122 = !DILocation(line: 68, column: 36, scope: !101)
!123 = !DILocation(line: 68, column: 21, scope: !101)
!124 = !DILocation(line: 70, column: 1, scope: !101)
!125 = distinct !DISubprogram(name: "json_to_struct", scope: !6, file: !6, line: 59, type: !126, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!126 = !DISubroutineType(types: !127)
!127 = !{!128, !4}
!128 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!129 = !DILocalVariable(name: "json_obj", arg: 1, scope: !125, file: !6, line: 59, type: !4)
!130 = !DILocation(line: 59, column: 36, scope: !125)
!131 = !DILocalVariable(name: "json_temp", scope: !125, file: !6, line: 60, type: !4)
!132 = !DILocation(line: 60, column: 3, scope: !125)
!133 = !DILocalVariable(name: "struct_hometown", scope: !125, file: !6, line: 60, type: !113)
!134 = !DILocation(line: 60, column: 3, scope: !135)
!135 = distinct !DILexicalBlock(scope: !125, file: !6, line: 60, column: 3)
!136 = !DILocation(line: 61, column: 3, scope: !125)
!137 = !DILocation(line: 61, column: 3, scope: !138)
!138 = distinct !DILexicalBlock(scope: !125, file: !6, line: 61, column: 3)
!139 = !DILocation(line: 62, column: 10, scope: !125)
!140 = !DILocation(line: 62, column: 3, scope: !125)
