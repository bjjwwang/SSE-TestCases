; ModuleID = 'mac_bc/pass/CVE-2022-26129.ll'
source_filename = "/Users/jiaweiwang/CLionProjects/0130-db/svf-z3/SSE-TestCases/src/pass/CVE-2022-26129.c"
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx12.0.0"

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @parse_update_subtlv(i8* noundef %a, i32 noundef %alen) #0 !dbg !9 {
entry:
  %a.addr = alloca i8*, align 8
  %alen.addr = alloca i32, align 4
  %type = alloca i32, align 4
  %len = alloca i32, align 4
  %i = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !18, metadata !DIExpression()), !dbg !19
  store i32 %alen, i32* %alen.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alen.addr, metadata !20, metadata !DIExpression()), !dbg !21
  call void @llvm.dbg.declare(metadata i32* %type, metadata !22, metadata !DIExpression()), !dbg !23
  call void @llvm.dbg.declare(metadata i32* %len, metadata !24, metadata !DIExpression()), !dbg !25
  call void @llvm.dbg.declare(metadata i32* %i, metadata !26, metadata !DIExpression()), !dbg !27
  store i32 0, i32* %i, align 4, !dbg !27
  br label %while.cond, !dbg !28

while.cond:                                       ; preds = %if.end12, %entry
  %0 = load i32, i32* %i, align 4, !dbg !29
  %1 = load i32, i32* %alen.addr, align 4, !dbg !30
  %cmp = icmp slt i32 %0, %1, !dbg !31
  br i1 %cmp, label %while.body, label %while.end, !dbg !28

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %a.addr, align 8, !dbg !32
  %3 = load i32, i32* %i, align 4, !dbg !34
  %idxprom = sext i32 %3 to i64, !dbg !32
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %idxprom, !dbg !32
  %4 = load i8, i8* %arrayidx, align 1, !dbg !32
  %conv = zext i8 %4 to i32, !dbg !32
  store i32 %conv, i32* %type, align 4, !dbg !35
  %5 = load i32, i32* %i, align 4, !dbg !36
  %add = add nsw i32 %5, 1, !dbg !38
  %6 = load i32, i32* %alen.addr, align 4, !dbg !39
  %cmp1 = icmp sgt i32 %add, %6, !dbg !40
  br i1 %cmp1, label %if.then, label %if.end, !dbg !41

if.then:                                          ; preds = %while.body
  br label %while.end, !dbg !42

if.end:                                           ; preds = %while.body
  %7 = load i8*, i8** %a.addr, align 8, !dbg !44
  %8 = load i32, i32* %i, align 4, !dbg !45
  %add3 = add nsw i32 %8, 1, !dbg !46
  %idxprom4 = sext i32 %add3 to i64, !dbg !44
  %arrayidx5 = getelementptr inbounds i8, i8* %7, i64 %idxprom4, !dbg !44
  %9 = load i8, i8* %arrayidx5, align 1, !dbg !44
  %conv6 = zext i8 %9 to i32, !dbg !44
  store i32 %conv6, i32* %len, align 4, !dbg !47
  %10 = load i32, i32* %i, align 4, !dbg !48
  %11 = load i32, i32* %len, align 4, !dbg !50
  %add7 = add nsw i32 %10, %11, !dbg !51
  %add8 = add nsw i32 %add7, 2, !dbg !52
  %12 = load i32, i32* %alen.addr, align 4, !dbg !53
  %cmp9 = icmp sgt i32 %add8, %12, !dbg !54
  br i1 %cmp9, label %if.then11, label %if.end12, !dbg !55

if.then11:                                        ; preds = %if.end
  br label %while.end, !dbg !56

if.end12:                                         ; preds = %if.end
  %13 = load i32, i32* %len, align 4, !dbg !58
  %add13 = add nsw i32 %13, 2, !dbg !59
  %14 = load i32, i32* %i, align 4, !dbg !60
  %add14 = add nsw i32 %14, %add13, !dbg !60
  store i32 %add14, i32* %i, align 4, !dbg !60
  br label %while.cond, !dbg !28, !llvm.loop !61

while.end:                                        ; preds = %if.then11, %if.then, %while.cond
  ret void, !dbg !64
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @main() #0 !dbg !65 {
entry:
  %a = alloca [5 x i8], align 1
  call void @llvm.dbg.declare(metadata [5 x i8]* %a, metadata !68, metadata !DIExpression()), !dbg !73
  %0 = bitcast [5 x i8]* %a to i8*, !dbg !73
  call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 0, i64 5, i1 false), !dbg !73
  %arraydecay = getelementptr inbounds [5 x i8], [5 x i8]* %a, i64 0, i64 0, !dbg !74
  call void @parse_update_subtlv(i8* noundef %arraydecay, i32 noundef 5), !dbg !75
  ret i32 0, !dbg !76
}

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { noinline nounwind optnone ssp uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nofree nounwind willreturn writeonly }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5, !6, !7}
!llvm.ident = !{!8}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "Homebrew clang version 14.0.6", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None, sysroot: "/Library/Developer/CommandLineTools/SDKs/MacOSX12.sdk", sdk: "MacOSX12.sdk")
!1 = !DIFile(filename: "/Users/jiaweiwang/CLionProjects/0130-db/svf-z3/SSE-TestCases/src/pass/CVE-2022-26129.c", directory: "/Users/jiaweiwang/CLionProjects/0130-db/svf-z3/SSE-TestCases")
!2 = !{i32 7, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{i32 7, !"PIC Level", i32 2}
!6 = !{i32 7, !"uwtable", i32 1}
!7 = !{i32 7, !"frame-pointer", i32 2}
!8 = !{!"Homebrew clang version 14.0.6"}
!9 = distinct !DISubprogram(name: "parse_update_subtlv", scope: !10, file: !10, line: 9, type: !11, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !17)
!10 = !DIFile(filename: "src/pass/CVE-2022-26129.c", directory: "/Users/jiaweiwang/CLionProjects/0130-db/svf-z3/SSE-TestCases")
!11 = !DISubroutineType(types: !12)
!12 = !{null, !13, !16}
!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64)
!14 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !15)
!15 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!16 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!17 = !{}
!18 = !DILocalVariable(name: "a", arg: 1, scope: !9, file: !10, line: 9, type: !13)
!19 = !DILocation(line: 9, column: 47, scope: !9)
!20 = !DILocalVariable(name: "alen", arg: 2, scope: !9, file: !10, line: 9, type: !16)
!21 = !DILocation(line: 9, column: 54, scope: !9)
!22 = !DILocalVariable(name: "type", scope: !9, file: !10, line: 10, type: !16)
!23 = !DILocation(line: 10, column: 9, scope: !9)
!24 = !DILocalVariable(name: "len", scope: !9, file: !10, line: 10, type: !16)
!25 = !DILocation(line: 10, column: 15, scope: !9)
!26 = !DILocalVariable(name: "i", scope: !9, file: !10, line: 10, type: !16)
!27 = !DILocation(line: 10, column: 20, scope: !9)
!28 = !DILocation(line: 12, column: 5, scope: !9)
!29 = !DILocation(line: 12, column: 11, scope: !9)
!30 = !DILocation(line: 12, column: 15, scope: !9)
!31 = !DILocation(line: 12, column: 13, scope: !9)
!32 = !DILocation(line: 13, column: 16, scope: !33)
!33 = distinct !DILexicalBlock(scope: !9, file: !10, line: 12, column: 21)
!34 = !DILocation(line: 13, column: 18, scope: !33)
!35 = !DILocation(line: 13, column: 14, scope: !33)
!36 = !DILocation(line: 15, column: 12, scope: !37)
!37 = distinct !DILexicalBlock(scope: !33, file: !10, line: 15, column: 12)
!38 = !DILocation(line: 15, column: 14, scope: !37)
!39 = !DILocation(line: 15, column: 20, scope: !37)
!40 = !DILocation(line: 15, column: 18, scope: !37)
!41 = !DILocation(line: 15, column: 12, scope: !33)
!42 = !DILocation(line: 16, column: 13, scope: !43)
!43 = distinct !DILexicalBlock(scope: !37, file: !10, line: 15, column: 26)
!44 = !DILocation(line: 20, column: 15, scope: !33)
!45 = !DILocation(line: 20, column: 17, scope: !33)
!46 = !DILocation(line: 20, column: 19, scope: !33)
!47 = !DILocation(line: 20, column: 13, scope: !33)
!48 = !DILocation(line: 22, column: 6, scope: !49)
!49 = distinct !DILexicalBlock(scope: !33, file: !10, line: 22, column: 6)
!50 = !DILocation(line: 22, column: 10, scope: !49)
!51 = !DILocation(line: 22, column: 8, scope: !49)
!52 = !DILocation(line: 22, column: 14, scope: !49)
!53 = !DILocation(line: 22, column: 20, scope: !49)
!54 = !DILocation(line: 22, column: 18, scope: !49)
!55 = !DILocation(line: 22, column: 6, scope: !33)
!56 = !DILocation(line: 23, column: 13, scope: !57)
!57 = distinct !DILexicalBlock(scope: !49, file: !10, line: 22, column: 26)
!58 = !DILocation(line: 26, column: 8, scope: !33)
!59 = !DILocation(line: 26, column: 12, scope: !33)
!60 = !DILocation(line: 26, column: 5, scope: !33)
!61 = distinct !{!61, !28, !62, !63}
!62 = !DILocation(line: 27, column: 2, scope: !9)
!63 = !{!"llvm.loop.mustprogress"}
!64 = !DILocation(line: 28, column: 1, scope: !9)
!65 = distinct !DISubprogram(name: "main", scope: !10, file: !10, line: 30, type: !66, scopeLine: 30, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !17)
!66 = !DISubroutineType(types: !67)
!67 = !{!16}
!68 = !DILocalVariable(name: "a", scope: !65, file: !10, line: 31, type: !69)
!69 = !DICompositeType(tag: DW_TAG_array_type, baseType: !70, size: 40, elements: !71)
!70 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!71 = !{!72}
!72 = !DISubrange(count: 5)
!73 = !DILocation(line: 31, column: 7, scope: !65)
!74 = !DILocation(line: 32, column: 22, scope: !65)
!75 = !DILocation(line: 32, column: 2, scope: !65)
!76 = !DILocation(line: 33, column: 1, scope: !65)
