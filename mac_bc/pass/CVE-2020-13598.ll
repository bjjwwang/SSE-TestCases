; ModuleID = 'mac_bc/pass/CVE-2020-13598.ll'
source_filename = "/Users/jiaweiwang/CLionProjects/0130-db/svf-z3/SSE-TestCases/src/pass/CVE-2020-13598.c"
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx12.0.0"

%struct.fs_dirent = type { [13 x i8] }
%struct.FILINFO = type { [256 x i8] }

@.str = private unnamed_addr constant [21 x i8] c"01234567890123456789\00", align 1

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @fatfs_stat(%struct.fs_dirent* noundef %entry1, %struct.FILINFO* noundef byval(%struct.FILINFO) align 8 %fno) #0 !dbg !9 {
entry:
  %entry.addr = alloca %struct.fs_dirent*, align 8
  store %struct.fs_dirent* %entry1, %struct.fs_dirent** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fs_dirent** %entry.addr, metadata !29, metadata !DIExpression()), !dbg !30
  call void @llvm.dbg.declare(metadata %struct.FILINFO* %fno, metadata !31, metadata !DIExpression()), !dbg !32
  %0 = load %struct.fs_dirent*, %struct.fs_dirent** %entry.addr, align 8, !dbg !33
  %name = getelementptr inbounds %struct.fs_dirent, %struct.fs_dirent* %0, i32 0, i32 0, !dbg !33
  %arraydecay = getelementptr inbounds [13 x i8], [13 x i8]* %name, i64 0, i64 0, !dbg !33
  %fname = getelementptr inbounds %struct.FILINFO, %struct.FILINFO* %fno, i32 0, i32 0, !dbg !33
  %arraydecay2 = getelementptr inbounds [256 x i8], [256 x i8]* %fname, i64 0, i64 0, !dbg !33
  %1 = load %struct.fs_dirent*, %struct.fs_dirent** %entry.addr, align 8, !dbg !33
  %name3 = getelementptr inbounds %struct.fs_dirent, %struct.fs_dirent* %1, i32 0, i32 0, !dbg !33
  %arraydecay4 = getelementptr inbounds [13 x i8], [13 x i8]* %name3, i64 0, i64 0, !dbg !33
  %2 = call i64 @llvm.objectsize.i64.p0i8(i8* %arraydecay4, i1 false, i1 true, i1 false), !dbg !33
  %call = call i8* @__strcpy_chk(i8* noundef %arraydecay, i8* noundef %arraydecay2, i64 noundef %2) #3, !dbg !33
  ret void, !dbg !36
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare i8* @__strcpy_chk(i8* noundef, i8* noundef, i64 noundef) #2

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.objectsize.i64.p0i8(i8*, i1 immarg, i1 immarg, i1 immarg) #1

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @main() #0 !dbg !37 {
entry:
  %fsdir = alloca %struct.fs_dirent, align 1
  %filinfo = alloca %struct.FILINFO, align 8
  call void @llvm.dbg.declare(metadata %struct.fs_dirent* %fsdir, metadata !41, metadata !DIExpression()), !dbg !42
  call void @llvm.dbg.declare(metadata %struct.FILINFO* %filinfo, metadata !43, metadata !DIExpression()), !dbg !44
  %fname = getelementptr inbounds %struct.FILINFO, %struct.FILINFO* %filinfo, i32 0, i32 0, !dbg !45
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %fname, i64 0, i64 0, !dbg !45
  %call = call i8* @__strcpy_chk(i8* noundef %arraydecay, i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i64 noundef 256) #3, !dbg !45
  call void @fatfs_stat(%struct.fs_dirent* noundef %fsdir, %struct.FILINFO* noundef byval(%struct.FILINFO) align 8 %filinfo), !dbg !46
  ret i32 0, !dbg !47
}

attributes #0 = { noinline nounwind optnone ssp uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5, !6, !7}
!llvm.ident = !{!8}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "Homebrew clang version 14.0.6", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None, sysroot: "/Library/Developer/CommandLineTools/SDKs/MacOSX12.sdk", sdk: "MacOSX12.sdk")
!1 = !DIFile(filename: "/Users/jiaweiwang/CLionProjects/0130-db/svf-z3/SSE-TestCases/src/pass/CVE-2020-13598.c", directory: "/Users/jiaweiwang/CLionProjects/0130-db/svf-z3/SSE-TestCases")
!2 = !{i32 7, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{i32 7, !"PIC Level", i32 2}
!6 = !{i32 7, !"uwtable", i32 1}
!7 = !{i32 7, !"frame-pointer", i32 2}
!8 = !{!"Homebrew clang version 14.0.6"}
!9 = distinct !DISubprogram(name: "fatfs_stat", scope: !10, file: !10, line: 29, type: !11, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !28)
!10 = !DIFile(filename: "src/pass/CVE-2020-13598.c", directory: "/Users/jiaweiwang/CLionProjects/0130-db/svf-z3/SSE-TestCases")
!11 = !DISubroutineType(types: !12)
!12 = !{null, !13, !21}
!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64)
!14 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fs_dirent", file: !10, line: 25, size: 104, elements: !15)
!15 = !{!16}
!16 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !14, file: !10, line: 26, baseType: !17, size: 104)
!17 = !DICompositeType(tag: DW_TAG_array_type, baseType: !18, size: 104, elements: !19)
!18 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!19 = !{!20}
!20 = !DISubrange(count: 13)
!21 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILINFO", file: !10, line: 23, baseType: !22)
!22 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !10, line: 17, size: 2048, elements: !23)
!23 = !{!24}
!24 = !DIDerivedType(tag: DW_TAG_member, name: "fname", scope: !22, file: !10, line: 19, baseType: !25, size: 2048)
!25 = !DICompositeType(tag: DW_TAG_array_type, baseType: !18, size: 2048, elements: !26)
!26 = !{!27}
!27 = !DISubrange(count: 256)
!28 = !{}
!29 = !DILocalVariable(name: "entry", arg: 1, scope: !9, file: !10, line: 29, type: !13)
!30 = !DILocation(line: 29, column: 35, scope: !9)
!31 = !DILocalVariable(name: "fno", arg: 2, scope: !9, file: !10, line: 29, type: !21)
!32 = !DILocation(line: 29, column: 50, scope: !9)
!33 = !DILocation(line: 32, column: 3, scope: !34)
!34 = distinct !DILexicalBlock(scope: !35, file: !10, line: 30, column: 15)
!35 = distinct !DILexicalBlock(scope: !9, file: !10, line: 30, column: 9)
!36 = !DILocation(line: 34, column: 1, scope: !9)
!37 = distinct !DISubprogram(name: "main", scope: !10, file: !10, line: 36, type: !38, scopeLine: 36, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !28)
!38 = !DISubroutineType(types: !39)
!39 = !{!40}
!40 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!41 = !DILocalVariable(name: "fsdir", scope: !37, file: !10, line: 37, type: !14)
!42 = !DILocation(line: 37, column: 22, scope: !37)
!43 = !DILocalVariable(name: "filinfo", scope: !37, file: !10, line: 38, type: !21)
!44 = !DILocation(line: 38, column: 13, scope: !37)
!45 = !DILocation(line: 39, column: 5, scope: !37)
!46 = !DILocation(line: 40, column: 5, scope: !37)
!47 = !DILocation(line: 41, column: 1, scope: !37)
