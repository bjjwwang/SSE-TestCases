; ModuleID = 'mac_bc/pass/CVE-2022-34913.ll'
source_filename = "/Users/jiaweiwang/CLionProjects/0130-db/svf-z3/SSE-TestCases/src/pass/CVE-2022-34913.c"
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx12.0.0"

%struct.__sFILE = type { i8*, i32, i32, i16, i16, %struct.__sbuf, i32, i8*, i32 (i8*)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i32 (i8*, i8*, i32)*, %struct.__sbuf, %struct.__sFILEX*, i32, [3 x i8], [1 x i8], %struct.__sbuf, i32, i64 }
%struct.__sFILEX = type opaque
%struct.__sbuf = type { i8*, i32 }

@.str = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.1 = private unnamed_addr constant [20 x i8] c"Unable to open '%s'\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"fseek failed\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"ftell failed\00", align 1
@.str.4 = private unnamed_addr constant [13 x i8] c"fread failed\00", align 1

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @md2roff(i8* noundef %docname, i8* noundef %source) #0 !dbg !13 {
entry:
  %docname.addr = alloca i8*, align 8
  %source.addr = alloca i8*, align 8
  %p = alloca i8*, align 8
  %appname = alloca [64 x i8], align 16
  store i8* %docname, i8** %docname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %docname.addr, metadata !20, metadata !DIExpression()), !dbg !21
  store i8* %source, i8** %source.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %source.addr, metadata !22, metadata !DIExpression()), !dbg !23
  call void @llvm.dbg.declare(metadata i8** %p, metadata !24, metadata !DIExpression()), !dbg !25
  %0 = load i8*, i8** %source.addr, align 8, !dbg !26
  store i8* %0, i8** %p, align 8, !dbg !25
  call void @llvm.dbg.declare(metadata [64 x i8]* %appname, metadata !27, metadata !DIExpression()), !dbg !31
  br label %while.cond, !dbg !32

while.cond:                                       ; preds = %while.body, %entry
  %1 = load i8*, i8** %p, align 8, !dbg !35
  %2 = load i8, i8* %1, align 1, !dbg !36
  %conv = sext i8 %2 to i32, !dbg !36
  %call = call i32 @isspace(i32 noundef %conv) #7, !dbg !37
  %tobool = icmp ne i32 %call, 0, !dbg !32
  br i1 %tobool, label %while.body, label %while.end, !dbg !32

while.body:                                       ; preds = %while.cond
  %3 = load i8*, i8** %p, align 8, !dbg !38
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1, !dbg !38
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !38
  br label %while.cond, !dbg !32, !llvm.loop !40

while.end:                                        ; preds = %while.cond
  %4 = load i8*, i8** %p, align 8, !dbg !43
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 0, !dbg !43
  %5 = load i8, i8* %arrayidx, align 1, !dbg !43
  %conv1 = sext i8 %5 to i32, !dbg !43
  %cmp = icmp ne i32 %conv1, 35, !dbg !45
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !46

lor.lhs.false:                                    ; preds = %while.end
  %6 = load i8*, i8** %p, align 8, !dbg !47
  %arrayidx3 = getelementptr inbounds i8, i8* %6, i64 1, !dbg !47
  %7 = load i8, i8* %arrayidx3, align 1, !dbg !47
  %conv4 = sext i8 %7 to i32, !dbg !47
  %call5 = call i32 @isblank(i32 noundef %conv4) #7, !dbg !48
  %tobool6 = icmp ne i32 %call5, 0, !dbg !48
  br i1 %tobool6, label %if.end, label %if.then, !dbg !49

if.then:                                          ; preds = %lor.lhs.false, %while.end
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %appname, i64 0, i64 0, !dbg !50
  %8 = load i8*, i8** %docname.addr, align 8, !dbg !50
  %call7 = call i8* @__strcpy_chk(i8* noundef %arraydecay, i8* noundef %8, i64 noundef 64) #8, !dbg !50
  br label %if.end, !dbg !52

if.end:                                           ; preds = %if.then, %lor.lhs.false
  ret void, !dbg !53
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind readonly willreturn
declare i32 @isspace(i32 noundef) #2

; Function Attrs: nounwind readonly willreturn
declare i32 @isblank(i32 noundef) #2

; Function Attrs: nounwind
declare i8* @__strcpy_chk(i8* noundef, i8* noundef, i64 noundef) #3

; Function Attrs: noinline nounwind optnone ssp uwtable
define i8* @loadfile(i8* noundef %filename) #0 !dbg !54 {
entry:
  %filename.addr = alloca i8*, align 8
  %len = alloca i32, align 4
  %fp = alloca %struct.__sFILE*, align 8
  %buf = alloca i8*, align 8
  store i8* %filename, i8** %filename.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %filename.addr, metadata !57, metadata !DIExpression()), !dbg !58
  call void @llvm.dbg.declare(metadata i32* %len, metadata !59, metadata !DIExpression()), !dbg !61
  store i32 -1, i32* %len, align 4, !dbg !61
  call void @llvm.dbg.declare(metadata %struct.__sFILE** %fp, metadata !62, metadata !DIExpression()), !dbg !121
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !122, metadata !DIExpression()), !dbg !123
  store i8* null, i8** %buf, align 8, !dbg !123
  %0 = load i8*, i8** %filename.addr, align 8, !dbg !124
  %cmp = icmp ne i8* %0, null, !dbg !126
  br i1 %cmp, label %if.then, label %if.end31, !dbg !127

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %filename.addr, align 8, !dbg !128
  %call = call %struct.__sFILE* @"\01_fopen"(i8* noundef %1, i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !130
  store %struct.__sFILE* %call, %struct.__sFILE** %fp, align 8, !dbg !131
  %2 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8, !dbg !132
  %cmp1 = icmp eq %struct.__sFILE* %2, null, !dbg !134
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !135

if.then2:                                         ; preds = %if.then
  %3 = load i8*, i8** %filename.addr, align 8, !dbg !136
  %call3 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0), i8* noundef %3), !dbg !138
  call void @exit(i32 noundef 1) #9, !dbg !139
  unreachable, !dbg !139

if.end:                                           ; preds = %if.then
  %4 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8, !dbg !140
  %call4 = call i32 @fseek(%struct.__sFILE* noundef %4, i64 noundef 0, i32 noundef 2), !dbg !142
  %cmp5 = icmp eq i32 %call4, -1, !dbg !143
  br i1 %cmp5, label %if.then6, label %if.end8, !dbg !144

if.then6:                                         ; preds = %if.end
  %call7 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0)), !dbg !145
  call void @exit(i32 noundef 1) #9, !dbg !147
  unreachable, !dbg !147

if.end8:                                          ; preds = %if.end
  %5 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8, !dbg !148
  %call9 = call i64 @ftell(%struct.__sFILE* noundef %5), !dbg !149
  %conv = trunc i64 %call9 to i32, !dbg !149
  store i32 %conv, i32* %len, align 4, !dbg !150
  %6 = load i32, i32* %len, align 4, !dbg !151
  %cmp10 = icmp eq i32 %6, -1, !dbg !153
  br i1 %cmp10, label %if.then12, label %if.end14, !dbg !154

if.then12:                                        ; preds = %if.end8
  %call13 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i64 0, i64 0)), !dbg !155
  call void @exit(i32 noundef 1) #9, !dbg !157
  unreachable, !dbg !157

if.end14:                                         ; preds = %if.end8
  %7 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8, !dbg !158
  %call15 = call i32 @fseek(%struct.__sFILE* noundef %7, i64 noundef 0, i32 noundef 0), !dbg !160
  %cmp16 = icmp eq i32 %call15, -1, !dbg !161
  br i1 %cmp16, label %if.then18, label %if.end20, !dbg !162

if.then18:                                        ; preds = %if.end14
  %call19 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0)), !dbg !163
  call void @exit(i32 noundef 1) #9, !dbg !165
  unreachable, !dbg !165

if.end20:                                         ; preds = %if.end14
  %8 = load i32, i32* %len, align 4, !dbg !166
  %add = add nsw i32 %8, 1, !dbg !167
  %conv21 = sext i32 %add to i64, !dbg !166
  %call22 = call i8* @malloc(i64 noundef %conv21) #10, !dbg !168
  store i8* %call22, i8** %buf, align 8, !dbg !169
  %9 = load i8*, i8** %buf, align 8, !dbg !170
  %10 = load i32, i32* %len, align 4, !dbg !172
  %conv23 = sext i32 %10 to i64, !dbg !172
  %11 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8, !dbg !173
  %call24 = call i64 @fread(i8* noundef %9, i64 noundef %conv23, i64 noundef 1, %struct.__sFILE* noundef %11), !dbg !174
  %cmp25 = icmp eq i64 %call24, -1, !dbg !175
  br i1 %cmp25, label %if.then27, label %if.end29, !dbg !176

if.then27:                                        ; preds = %if.end20
  %call28 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i64 0, i64 0)), !dbg !177
  call void @exit(i32 noundef 1) #9, !dbg !179
  unreachable, !dbg !179

if.end29:                                         ; preds = %if.end20
  %12 = load i8*, i8** %buf, align 8, !dbg !180
  %13 = load i32, i32* %len, align 4, !dbg !181
  %idxprom = sext i32 %13 to i64, !dbg !180
  %arrayidx = getelementptr inbounds i8, i8* %12, i64 %idxprom, !dbg !180
  store i8 0, i8* %arrayidx, align 1, !dbg !182
  %14 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8, !dbg !183
  %call30 = call i32 @fclose(%struct.__sFILE* noundef %14), !dbg !184
  br label %if.end31, !dbg !185

if.end31:                                         ; preds = %if.end29, %entry
  %15 = load i8*, i8** %buf, align 8, !dbg !186
  ret i8* %15, !dbg !187
}

declare %struct.__sFILE* @"\01_fopen"(i8* noundef, i8* noundef) #4

declare i32 @printf(i8* noundef, ...) #4

; Function Attrs: noreturn
declare void @exit(i32 noundef) #5

declare i32 @fseek(%struct.__sFILE* noundef, i64 noundef, i32 noundef) #4

declare i64 @ftell(%struct.__sFILE* noundef) #4

; Function Attrs: allocsize(0)
declare i8* @malloc(i64 noundef) #6

declare i64 @fread(i8* noundef, i64 noundef, i64 noundef, %struct.__sFILE* noundef) #4

declare i32 @fclose(%struct.__sFILE* noundef) #4

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @main(i32 noundef %argc, i8** noundef %argv) #0 !dbg !188 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %files = alloca [64 x i32], align 16
  %fc = alloca i32, align 4
  %i = alloca i32, align 4
  %i7 = alloca i32, align 4
  %buf = alloca i8*, align 8
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !192, metadata !DIExpression()), !dbg !193
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !194, metadata !DIExpression()), !dbg !195
  call void @llvm.dbg.declare(metadata [64 x i32]* %files, metadata !196, metadata !DIExpression()), !dbg !198
  call void @llvm.dbg.declare(metadata i32* %fc, metadata !199, metadata !DIExpression()), !dbg !200
  store i32 0, i32* %fc, align 4, !dbg !200
  call void @llvm.dbg.declare(metadata i32* %i, metadata !201, metadata !DIExpression()), !dbg !203
  store i32 1, i32* %i, align 4, !dbg !203
  br label %for.cond, !dbg !204

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !205
  %1 = load i32, i32* %argc.addr, align 4, !dbg !207
  %cmp = icmp slt i32 %0, %1, !dbg !208
  br i1 %cmp, label %for.body, label %for.end, !dbg !209

for.body:                                         ; preds = %for.cond
  %2 = load i8**, i8*** %argv.addr, align 8, !dbg !210
  %3 = load i32, i32* %i, align 4, !dbg !213
  %idxprom = sext i32 %3 to i64, !dbg !210
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 %idxprom, !dbg !210
  %4 = load i8*, i8** %arrayidx, align 8, !dbg !210
  %arrayidx1 = getelementptr inbounds i8, i8* %4, i64 0, !dbg !210
  %5 = load i8, i8* %arrayidx1, align 1, !dbg !210
  %conv = sext i8 %5 to i32, !dbg !210
  %cmp2 = icmp ne i32 %conv, 45, !dbg !214
  br i1 %cmp2, label %if.then, label %if.end, !dbg !215

if.then:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4, !dbg !216
  %7 = load i32, i32* %fc, align 4, !dbg !218
  %idxprom4 = sext i32 %7 to i64, !dbg !219
  %arrayidx5 = getelementptr inbounds [64 x i32], [64 x i32]* %files, i64 0, i64 %idxprom4, !dbg !219
  store i32 %6, i32* %arrayidx5, align 4, !dbg !220
  %8 = load i32, i32* %fc, align 4, !dbg !221
  %inc = add nsw i32 %8, 1, !dbg !221
  store i32 %inc, i32* %fc, align 4, !dbg !221
  br label %if.end, !dbg !222

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !223

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %i, align 4, !dbg !224
  %inc6 = add nsw i32 %9, 1, !dbg !224
  store i32 %inc6, i32* %i, align 4, !dbg !224
  br label %for.cond, !dbg !225, !llvm.loop !226

for.end:                                          ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %i7, metadata !228, metadata !DIExpression()), !dbg !230
  store i32 0, i32* %i7, align 4, !dbg !230
  br label %for.cond8, !dbg !231

for.cond8:                                        ; preds = %for.inc20, %for.end
  %10 = load i32, i32* %i7, align 4, !dbg !232
  %11 = load i32, i32* %fc, align 4, !dbg !234
  %cmp9 = icmp slt i32 %10, %11, !dbg !235
  br i1 %cmp9, label %for.body11, label %for.end22, !dbg !236

for.body11:                                       ; preds = %for.cond8
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !237, metadata !DIExpression()), !dbg !239
  %12 = load i8**, i8*** %argv.addr, align 8, !dbg !240
  %13 = load i32, i32* %i7, align 4, !dbg !241
  %idxprom12 = sext i32 %13 to i64, !dbg !242
  %arrayidx13 = getelementptr inbounds [64 x i32], [64 x i32]* %files, i64 0, i64 %idxprom12, !dbg !242
  %14 = load i32, i32* %arrayidx13, align 4, !dbg !242
  %idxprom14 = sext i32 %14 to i64, !dbg !240
  %arrayidx15 = getelementptr inbounds i8*, i8** %12, i64 %idxprom14, !dbg !240
  %15 = load i8*, i8** %arrayidx15, align 8, !dbg !240
  %call = call i8* @loadfile(i8* noundef %15), !dbg !243
  store i8* %call, i8** %buf, align 8, !dbg !239
  %16 = load i8**, i8*** %argv.addr, align 8, !dbg !244
  %17 = load i32, i32* %i7, align 4, !dbg !245
  %idxprom16 = sext i32 %17 to i64, !dbg !246
  %arrayidx17 = getelementptr inbounds [64 x i32], [64 x i32]* %files, i64 0, i64 %idxprom16, !dbg !246
  %18 = load i32, i32* %arrayidx17, align 4, !dbg !246
  %idxprom18 = sext i32 %18 to i64, !dbg !244
  %arrayidx19 = getelementptr inbounds i8*, i8** %16, i64 %idxprom18, !dbg !244
  %19 = load i8*, i8** %arrayidx19, align 8, !dbg !244
  %20 = load i8*, i8** %buf, align 8, !dbg !247
  call void @md2roff(i8* noundef %19, i8* noundef %20), !dbg !248
  %21 = load i8*, i8** %buf, align 8, !dbg !249
  call void @free(i8* noundef %21), !dbg !250
  br label %for.inc20, !dbg !251

for.inc20:                                        ; preds = %for.body11
  %22 = load i32, i32* %i7, align 4, !dbg !252
  %inc21 = add nsw i32 %22, 1, !dbg !252
  store i32 %inc21, i32* %i7, align 4, !dbg !252
  br label %for.cond8, !dbg !253, !llvm.loop !254

for.end22:                                        ; preds = %for.cond8
  %23 = load i32, i32* %retval, align 4, !dbg !256
  ret i32 %23, !dbg !256
}

declare void @free(i8* noundef) #4

attributes #0 = { noinline nounwind optnone ssp uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { nounwind readonly willreturn "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #4 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #6 = { allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #7 = { nounwind readonly willreturn }
attributes #8 = { nounwind }
attributes #9 = { noreturn }
attributes #10 = { allocsize(0) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!6, !7, !8, !9, !10, !11}
!llvm.ident = !{!12}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "Homebrew clang version 14.0.6", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, retainedTypes: !2, splitDebugInlining: false, nameTableKind: None, sysroot: "/Library/Developer/CommandLineTools/SDKs/MacOSX12.sdk", sdk: "MacOSX12.sdk")
!1 = !DIFile(filename: "/Users/jiaweiwang/CLionProjects/0130-db/svf-z3/SSE-TestCases/src/pass/CVE-2022-34913.c", directory: "/Users/jiaweiwang/CLionProjects/0130-db/svf-z3/SSE-TestCases")
!2 = !{!3, !4}
!3 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64)
!5 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!6 = !{i32 7, !"Dwarf Version", i32 4}
!7 = !{i32 2, !"Debug Info Version", i32 3}
!8 = !{i32 1, !"wchar_size", i32 4}
!9 = !{i32 7, !"PIC Level", i32 2}
!10 = !{i32 7, !"uwtable", i32 1}
!11 = !{i32 7, !"frame-pointer", i32 2}
!12 = !{!"Homebrew clang version 14.0.6"}
!13 = distinct !DISubprogram(name: "md2roff", scope: !14, file: !14, line: 18, type: !15, scopeLine: 18, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !19)
!14 = !DIFile(filename: "src/pass/CVE-2022-34913.c", directory: "/Users/jiaweiwang/CLionProjects/0130-db/svf-z3/SSE-TestCases")
!15 = !DISubroutineType(types: !16)
!16 = !{null, !17, !17}
!17 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !18, size: 64)
!18 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5)
!19 = !{}
!20 = !DILocalVariable(name: "docname", arg: 1, scope: !13, file: !14, line: 18, type: !17)
!21 = !DILocation(line: 18, column: 26, scope: !13)
!22 = !DILocalVariable(name: "source", arg: 2, scope: !13, file: !14, line: 18, type: !17)
!23 = !DILocation(line: 18, column: 47, scope: !13)
!24 = !DILocalVariable(name: "p", scope: !13, file: !14, line: 19, type: !17)
!25 = !DILocation(line: 19, column: 14, scope: !13)
!26 = !DILocation(line: 19, column: 18, scope: !13)
!27 = !DILocalVariable(name: "appname", scope: !13, file: !14, line: 20, type: !28)
!28 = !DICompositeType(tag: DW_TAG_array_type, baseType: !5, size: 512, elements: !29)
!29 = !{!30}
!30 = !DISubrange(count: 64)
!31 = !DILocation(line: 20, column: 7, scope: !13)
!32 = !DILocation(line: 23, column: 3, scope: !33)
!33 = distinct !DILexicalBlock(scope: !34, file: !14, line: 22, column: 12)
!34 = distinct !DILexicalBlock(scope: !13, file: !14, line: 22, column: 6)
!35 = !DILocation(line: 23, column: 20, scope: !33)
!36 = !DILocation(line: 23, column: 19, scope: !33)
!37 = !DILocation(line: 23, column: 11, scope: !33)
!38 = !DILocation(line: 24, column: 6, scope: !39)
!39 = distinct !DILexicalBlock(scope: !33, file: !14, line: 23, column: 25)
!40 = distinct !{!40, !32, !41, !42}
!41 = !DILocation(line: 25, column: 3, scope: !33)
!42 = !{!"llvm.loop.mustprogress"}
!43 = !DILocation(line: 27, column: 7, scope: !44)
!44 = distinct !DILexicalBlock(scope: !33, file: !14, line: 27, column: 7)
!45 = !DILocation(line: 27, column: 12, scope: !44)
!46 = !DILocation(line: 27, column: 19, scope: !44)
!47 = !DILocation(line: 27, column: 31, scope: !44)
!48 = !DILocation(line: 27, column: 23, scope: !44)
!49 = !DILocation(line: 27, column: 7, scope: !33)
!50 = !DILocation(line: 29, column: 4, scope: !51)
!51 = distinct !DILexicalBlock(scope: !44, file: !14, line: 27, column: 39)
!52 = !DILocation(line: 30, column: 3, scope: !51)
!53 = !DILocation(line: 32, column: 1, scope: !13)
!54 = distinct !DISubprogram(name: "loadfile", scope: !14, file: !14, line: 34, type: !55, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !19)
!55 = !DISubroutineType(types: !56)
!56 = !{!4, !17}
!57 = !DILocalVariable(name: "filename", arg: 1, scope: !54, file: !14, line: 34, type: !17)
!58 = !DILocation(line: 34, column: 28, scope: !54)
!59 = !DILocalVariable(name: "len", scope: !54, file: !14, line: 35, type: !60)
!60 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!61 = !DILocation(line: 35, column: 6, scope: !54)
!62 = !DILocalVariable(name: "fp", scope: !54, file: !14, line: 36, type: !63)
!63 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !64, size: 64)
!64 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !65, line: 157, baseType: !66)
!65 = !DIFile(filename: "/Library/Developer/CommandLineTools/SDKs/MacOSX12.sdk/usr/include/_stdio.h", directory: "")
!66 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__sFILE", file: !65, line: 126, size: 1216, elements: !67)
!67 = !{!68, !71, !72, !73, !75, !76, !81, !82, !83, !87, !91, !101, !105, !106, !109, !110, !114, !118, !119, !120}
!68 = !DIDerivedType(tag: DW_TAG_member, name: "_p", scope: !66, file: !65, line: 127, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !70, size: 64)
!70 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!71 = !DIDerivedType(tag: DW_TAG_member, name: "_r", scope: !66, file: !65, line: 128, baseType: !60, size: 32, offset: 64)
!72 = !DIDerivedType(tag: DW_TAG_member, name: "_w", scope: !66, file: !65, line: 129, baseType: !60, size: 32, offset: 96)
!73 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !66, file: !65, line: 130, baseType: !74, size: 16, offset: 128)
!74 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!75 = !DIDerivedType(tag: DW_TAG_member, name: "_file", scope: !66, file: !65, line: 131, baseType: !74, size: 16, offset: 144)
!76 = !DIDerivedType(tag: DW_TAG_member, name: "_bf", scope: !66, file: !65, line: 132, baseType: !77, size: 128, offset: 192)
!77 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__sbuf", file: !65, line: 92, size: 128, elements: !78)
!78 = !{!79, !80}
!79 = !DIDerivedType(tag: DW_TAG_member, name: "_base", scope: !77, file: !65, line: 93, baseType: !69, size: 64)
!80 = !DIDerivedType(tag: DW_TAG_member, name: "_size", scope: !77, file: !65, line: 94, baseType: !60, size: 32, offset: 64)
!81 = !DIDerivedType(tag: DW_TAG_member, name: "_lbfsize", scope: !66, file: !65, line: 133, baseType: !60, size: 32, offset: 320)
!82 = !DIDerivedType(tag: DW_TAG_member, name: "_cookie", scope: !66, file: !65, line: 136, baseType: !3, size: 64, offset: 384)
!83 = !DIDerivedType(tag: DW_TAG_member, name: "_close", scope: !66, file: !65, line: 137, baseType: !84, size: 64, offset: 448)
!84 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !85, size: 64)
!85 = !DISubroutineType(types: !86)
!86 = !{!60, !3}
!87 = !DIDerivedType(tag: DW_TAG_member, name: "_read", scope: !66, file: !65, line: 138, baseType: !88, size: 64, offset: 512)
!88 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !89, size: 64)
!89 = !DISubroutineType(types: !90)
!90 = !{!60, !3, !4, !60}
!91 = !DIDerivedType(tag: DW_TAG_member, name: "_seek", scope: !66, file: !65, line: 139, baseType: !92, size: 64, offset: 576)
!92 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !93, size: 64)
!93 = !DISubroutineType(types: !94)
!94 = !{!95, !3, !95, !60}
!95 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !65, line: 81, baseType: !96)
!96 = !DIDerivedType(tag: DW_TAG_typedef, name: "__darwin_off_t", file: !97, line: 71, baseType: !98)
!97 = !DIFile(filename: "/Library/Developer/CommandLineTools/SDKs/MacOSX12.sdk/usr/include/sys/_types.h", directory: "")
!98 = !DIDerivedType(tag: DW_TAG_typedef, name: "__int64_t", file: !99, line: 48, baseType: !100)
!99 = !DIFile(filename: "/Library/Developer/CommandLineTools/SDKs/MacOSX12.sdk/usr/include/i386/_types.h", directory: "")
!100 = !DIBasicType(name: "long long", size: 64, encoding: DW_ATE_signed)
!101 = !DIDerivedType(tag: DW_TAG_member, name: "_write", scope: !66, file: !65, line: 140, baseType: !102, size: 64, offset: 640)
!102 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !103, size: 64)
!103 = !DISubroutineType(types: !104)
!104 = !{!60, !3, !17, !60}
!105 = !DIDerivedType(tag: DW_TAG_member, name: "_ub", scope: !66, file: !65, line: 143, baseType: !77, size: 128, offset: 704)
!106 = !DIDerivedType(tag: DW_TAG_member, name: "_extra", scope: !66, file: !65, line: 144, baseType: !107, size: 64, offset: 832)
!107 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!108 = !DICompositeType(tag: DW_TAG_structure_type, name: "__sFILEX", file: !65, line: 98, flags: DIFlagFwdDecl)
!109 = !DIDerivedType(tag: DW_TAG_member, name: "_ur", scope: !66, file: !65, line: 145, baseType: !60, size: 32, offset: 896)
!110 = !DIDerivedType(tag: DW_TAG_member, name: "_ubuf", scope: !66, file: !65, line: 148, baseType: !111, size: 24, offset: 928)
!111 = !DICompositeType(tag: DW_TAG_array_type, baseType: !70, size: 24, elements: !112)
!112 = !{!113}
!113 = !DISubrange(count: 3)
!114 = !DIDerivedType(tag: DW_TAG_member, name: "_nbuf", scope: !66, file: !65, line: 149, baseType: !115, size: 8, offset: 952)
!115 = !DICompositeType(tag: DW_TAG_array_type, baseType: !70, size: 8, elements: !116)
!116 = !{!117}
!117 = !DISubrange(count: 1)
!118 = !DIDerivedType(tag: DW_TAG_member, name: "_lb", scope: !66, file: !65, line: 152, baseType: !77, size: 128, offset: 960)
!119 = !DIDerivedType(tag: DW_TAG_member, name: "_blksize", scope: !66, file: !65, line: 155, baseType: !60, size: 32, offset: 1088)
!120 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !66, file: !65, line: 156, baseType: !95, size: 64, offset: 1152)
!121 = !DILocation(line: 36, column: 8, scope: !54)
!122 = !DILocalVariable(name: "buf", scope: !54, file: !14, line: 37, type: !4)
!123 = !DILocation(line: 37, column: 8, scope: !54)
!124 = !DILocation(line: 39, column: 7, scope: !125)
!125 = distinct !DILexicalBlock(scope: !54, file: !14, line: 39, column: 7)
!126 = !DILocation(line: 39, column: 16, scope: !125)
!127 = !DILocation(line: 39, column: 7, scope: !54)
!128 = !DILocation(line: 40, column: 14, scope: !129)
!129 = distinct !DILexicalBlock(scope: !125, file: !14, line: 39, column: 26)
!130 = !DILocation(line: 40, column: 8, scope: !129)
!131 = !DILocation(line: 40, column: 6, scope: !129)
!132 = !DILocation(line: 41, column: 7, scope: !133)
!133 = distinct !DILexicalBlock(scope: !129, file: !14, line: 41, column: 7)
!134 = !DILocation(line: 41, column: 10, scope: !133)
!135 = !DILocation(line: 41, column: 7, scope: !129)
!136 = !DILocation(line: 42, column: 34, scope: !137)
!137 = distinct !DILexicalBlock(scope: !133, file: !14, line: 41, column: 19)
!138 = !DILocation(line: 42, column: 4, scope: !137)
!139 = !DILocation(line: 43, column: 4, scope: !137)
!140 = !DILocation(line: 45, column: 13, scope: !141)
!141 = distinct !DILexicalBlock(scope: !129, file: !14, line: 45, column: 7)
!142 = !DILocation(line: 45, column: 7, scope: !141)
!143 = !DILocation(line: 45, column: 31, scope: !141)
!144 = !DILocation(line: 45, column: 7, scope: !129)
!145 = !DILocation(line: 46, column: 4, scope: !146)
!146 = distinct !DILexicalBlock(scope: !141, file: !14, line: 45, column: 38)
!147 = !DILocation(line: 47, column: 4, scope: !146)
!148 = !DILocation(line: 49, column: 15, scope: !129)
!149 = !DILocation(line: 49, column: 9, scope: !129)
!150 = !DILocation(line: 49, column: 7, scope: !129)
!151 = !DILocation(line: 50, column: 7, scope: !152)
!152 = distinct !DILexicalBlock(scope: !129, file: !14, line: 50, column: 7)
!153 = !DILocation(line: 50, column: 11, scope: !152)
!154 = !DILocation(line: 50, column: 7, scope: !129)
!155 = !DILocation(line: 51, column: 4, scope: !156)
!156 = distinct !DILexicalBlock(scope: !152, file: !14, line: 50, column: 18)
!157 = !DILocation(line: 52, column: 4, scope: !156)
!158 = !DILocation(line: 54, column: 12, scope: !159)
!159 = distinct !DILexicalBlock(scope: !129, file: !14, line: 54, column: 6)
!160 = !DILocation(line: 54, column: 6, scope: !159)
!161 = !DILocation(line: 54, column: 30, scope: !159)
!162 = !DILocation(line: 54, column: 6, scope: !129)
!163 = !DILocation(line: 55, column: 4, scope: !164)
!164 = distinct !DILexicalBlock(scope: !159, file: !14, line: 54, column: 37)
!165 = !DILocation(line: 56, column: 4, scope: !164)
!166 = !DILocation(line: 58, column: 25, scope: !129)
!167 = !DILocation(line: 58, column: 28, scope: !129)
!168 = !DILocation(line: 58, column: 18, scope: !129)
!169 = !DILocation(line: 58, column: 7, scope: !129)
!170 = !DILocation(line: 59, column: 12, scope: !171)
!171 = distinct !DILexicalBlock(scope: !129, file: !14, line: 59, column: 6)
!172 = !DILocation(line: 59, column: 17, scope: !171)
!173 = !DILocation(line: 59, column: 25, scope: !171)
!174 = !DILocation(line: 59, column: 6, scope: !171)
!175 = !DILocation(line: 59, column: 29, scope: !171)
!176 = !DILocation(line: 59, column: 6, scope: !129)
!177 = !DILocation(line: 60, column: 4, scope: !178)
!178 = distinct !DILexicalBlock(scope: !171, file: !14, line: 59, column: 36)
!179 = !DILocation(line: 61, column: 4, scope: !178)
!180 = !DILocation(line: 63, column: 3, scope: !129)
!181 = !DILocation(line: 63, column: 7, scope: !129)
!182 = !DILocation(line: 63, column: 12, scope: !129)
!183 = !DILocation(line: 64, column: 10, scope: !129)
!184 = !DILocation(line: 64, column: 3, scope: !129)
!185 = !DILocation(line: 65, column: 2, scope: !129)
!186 = !DILocation(line: 67, column: 9, scope: !54)
!187 = !DILocation(line: 67, column: 2, scope: !54)
!188 = distinct !DISubprogram(name: "main", scope: !14, file: !14, line: 70, type: !189, scopeLine: 70, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !19)
!189 = !DISubroutineType(types: !190)
!190 = !{!60, !60, !191}
!191 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!192 = !DILocalVariable(name: "argc", arg: 1, scope: !188, file: !14, line: 70, type: !60)
!193 = !DILocation(line: 70, column: 14, scope: !188)
!194 = !DILocalVariable(name: "argv", arg: 2, scope: !188, file: !14, line: 70, type: !191)
!195 = !DILocation(line: 70, column: 26, scope: !188)
!196 = !DILocalVariable(name: "files", scope: !188, file: !14, line: 71, type: !197)
!197 = !DICompositeType(tag: DW_TAG_array_type, baseType: !60, size: 2048, elements: !29)
!198 = !DILocation(line: 71, column: 6, scope: !188)
!199 = !DILocalVariable(name: "fc", scope: !188, file: !14, line: 72, type: !60)
!200 = !DILocation(line: 72, column: 6, scope: !188)
!201 = !DILocalVariable(name: "i", scope: !202, file: !14, line: 74, type: !60)
!202 = distinct !DILexicalBlock(scope: !188, file: !14, line: 74, column: 2)
!203 = !DILocation(line: 74, column: 12, scope: !202)
!204 = !DILocation(line: 74, column: 8, scope: !202)
!205 = !DILocation(line: 74, column: 19, scope: !206)
!206 = distinct !DILexicalBlock(scope: !202, file: !14, line: 74, column: 2)
!207 = !DILocation(line: 74, column: 23, scope: !206)
!208 = !DILocation(line: 74, column: 21, scope: !206)
!209 = !DILocation(line: 74, column: 2, scope: !202)
!210 = !DILocation(line: 75, column: 8, scope: !211)
!211 = distinct !DILexicalBlock(scope: !212, file: !14, line: 75, column: 8)
!212 = distinct !DILexicalBlock(scope: !206, file: !14, line: 74, column: 36)
!213 = !DILocation(line: 75, column: 13, scope: !211)
!214 = !DILocation(line: 75, column: 19, scope: !211)
!215 = !DILocation(line: 75, column: 8, scope: !212)
!216 = !DILocation(line: 77, column: 16, scope: !217)
!217 = distinct !DILexicalBlock(scope: !211, file: !14, line: 75, column: 28)
!218 = !DILocation(line: 77, column: 10, scope: !217)
!219 = !DILocation(line: 77, column: 4, scope: !217)
!220 = !DILocation(line: 77, column: 14, scope: !217)
!221 = !DILocation(line: 78, column: 7, scope: !217)
!222 = !DILocation(line: 79, column: 3, scope: !217)
!223 = !DILocation(line: 80, column: 2, scope: !212)
!224 = !DILocation(line: 74, column: 31, scope: !206)
!225 = !DILocation(line: 74, column: 2, scope: !206)
!226 = distinct !{!226, !209, !227, !42}
!227 = !DILocation(line: 80, column: 2, scope: !202)
!228 = !DILocalVariable(name: "i", scope: !229, file: !14, line: 82, type: !60)
!229 = distinct !DILexicalBlock(scope: !188, file: !14, line: 82, column: 2)
!230 = !DILocation(line: 82, column: 12, scope: !229)
!231 = !DILocation(line: 82, column: 8, scope: !229)
!232 = !DILocation(line: 82, column: 19, scope: !233)
!233 = distinct !DILexicalBlock(scope: !229, file: !14, line: 82, column: 2)
!234 = !DILocation(line: 82, column: 23, scope: !233)
!235 = !DILocation(line: 82, column: 21, scope: !233)
!236 = !DILocation(line: 82, column: 2, scope: !229)
!237 = !DILocalVariable(name: "buf", scope: !238, file: !14, line: 83, type: !4)
!238 = distinct !DILexicalBlock(scope: !233, file: !14, line: 82, column: 34)
!239 = !DILocation(line: 83, column: 9, scope: !238)
!240 = !DILocation(line: 83, column: 24, scope: !238)
!241 = !DILocation(line: 83, column: 35, scope: !238)
!242 = !DILocation(line: 83, column: 29, scope: !238)
!243 = !DILocation(line: 83, column: 15, scope: !238)
!244 = !DILocation(line: 84, column: 11, scope: !238)
!245 = !DILocation(line: 84, column: 22, scope: !238)
!246 = !DILocation(line: 84, column: 16, scope: !238)
!247 = !DILocation(line: 84, column: 27, scope: !238)
!248 = !DILocation(line: 84, column: 3, scope: !238)
!249 = !DILocation(line: 85, column: 8, scope: !238)
!250 = !DILocation(line: 85, column: 3, scope: !238)
!251 = !DILocation(line: 86, column: 2, scope: !238)
!252 = !DILocation(line: 82, column: 29, scope: !233)
!253 = !DILocation(line: 82, column: 2, scope: !233)
!254 = distinct !{!254, !236, !255, !42}
!255 = !DILocation(line: 86, column: 2, scope: !229)
!256 = !DILocation(line: 87, column: 1, scope: !188)
