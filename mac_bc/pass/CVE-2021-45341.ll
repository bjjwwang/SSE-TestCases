; ModuleID = 'mac_bc/pass/CVE-2021-45341.ll'
source_filename = "/Users/jiaweiwang/CLionProjects/0130-db/svf-z3/SSE-TestCases/src/pass/CVE-2021-45341.c"
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx12.0.0"

@.str = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2 = private unnamed_addr constant [668 x i8] c"255 513 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789 0123456789\00", align 1

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @Serialize(i8* noundef %ifstr) #0 !dbg !9 {
entry:
  %ifstr.addr = alloca i8*, align 8
  %wd = alloca i32, align 4
  %buf = alloca [512 x i8], align 16
  %ifstr_cpy = alloca i8*, align 8
  %token = alloca i8*, align 8
  store i8* %ifstr, i8** %ifstr.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ifstr.addr, metadata !16, metadata !DIExpression()), !dbg !17
  call void @llvm.dbg.declare(metadata i32* %wd, metadata !18, metadata !DIExpression()), !dbg !20
  call void @llvm.dbg.declare(metadata [512 x i8]* %buf, metadata !21, metadata !DIExpression()), !dbg !25
  call void @llvm.dbg.declare(metadata i8** %ifstr_cpy, metadata !26, metadata !DIExpression()), !dbg !27
  %0 = load i8*, i8** %ifstr.addr, align 8, !dbg !28
  %call = call i64 @strlen(i8* noundef %0), !dbg !29
  %add = add i64 %call, 1, !dbg !30
  %call1 = call i8* @malloc(i64 noundef %add) #5, !dbg !31
  store i8* %call1, i8** %ifstr_cpy, align 8, !dbg !27
  %1 = load i8*, i8** %ifstr_cpy, align 8, !dbg !32
  %2 = load i8*, i8** %ifstr.addr, align 8, !dbg !32
  %3 = load i8*, i8** %ifstr_cpy, align 8, !dbg !32
  %4 = call i64 @llvm.objectsize.i64.p0i8(i8* %3, i1 false, i1 true, i1 false), !dbg !32
  %call2 = call i8* @__strcpy_chk(i8* noundef %1, i8* noundef %2, i64 noundef %4) #6, !dbg !32
  call void @llvm.dbg.declare(metadata i8** %token, metadata !33, metadata !DIExpression()), !dbg !34
  %5 = load i8*, i8** %ifstr_cpy, align 8, !dbg !35
  %call3 = call i8* @strtok(i8* noundef %5, i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !36
  store i8* %call3, i8** %token, align 8, !dbg !34
  %call4 = call i8* @strtok(i8* noundef null, i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !37
  store i8* %call4, i8** %token, align 8, !dbg !40
  %6 = load i8*, i8** %token, align 8, !dbg !41
  %call5 = call i32 @atoi(i8* noundef %6), !dbg !42
  store i32 %call5, i32* %wd, align 4, !dbg !43
  %call6 = call i8* @strtok(i8* noundef null, i8* noundef getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0)), !dbg !44
  store i8* %call6, i8** %token, align 8, !dbg !45
  %arraydecay = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 0, !dbg !46
  %7 = load i8*, i8** %token, align 8, !dbg !46
  %8 = load i32, i32* %wd, align 4, !dbg !46
  %conv = sext i32 %8 to i64, !dbg !46
  %call7 = call i8* @__memcpy_chk(i8* noundef %arraydecay, i8* noundef %7, i64 noundef %conv, i64 noundef 512) #6, !dbg !46
  %9 = load i32, i32* %wd, align 4, !dbg !47
  %idxprom = sext i32 %9 to i64, !dbg !48
  %arrayidx = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 %idxprom, !dbg !48
  store i8 0, i8* %arrayidx, align 1, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: allocsize(0)
declare i8* @malloc(i64 noundef) #2

declare i64 @strlen(i8* noundef) #3

; Function Attrs: nounwind
declare i8* @__strcpy_chk(i8* noundef, i8* noundef, i64 noundef) #4

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.objectsize.i64.p0i8(i8*, i1 immarg, i1 immarg, i1 immarg) #1

declare i8* @strtok(i8* noundef, i8* noundef) #3

declare i32 @atoi(i8* noundef) #3

; Function Attrs: nounwind
declare i8* @__memcpy_chk(i8* noundef, i8* noundef, i64 noundef, i64 noundef) #4

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @main() #0 !dbg !51 {
entry:
  %ifstr = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %ifstr, metadata !54, metadata !DIExpression()), !dbg !55
  store i8* getelementptr inbounds ([668 x i8], [668 x i8]* @.str.2, i64 0, i64 0), i8** %ifstr, align 8, !dbg !55
  %0 = load i8*, i8** %ifstr, align 8, !dbg !56
  call void @Serialize(i8* noundef %0), !dbg !57
  ret i32 0, !dbg !58
}

attributes #0 = { noinline nounwind optnone ssp uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #5 = { allocsize(0) }
attributes #6 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5, !6, !7}
!llvm.ident = !{!8}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "Homebrew clang version 14.0.6", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None, sysroot: "/Library/Developer/CommandLineTools/SDKs/MacOSX12.sdk", sdk: "MacOSX12.sdk")
!1 = !DIFile(filename: "/Users/jiaweiwang/CLionProjects/0130-db/svf-z3/SSE-TestCases/src/pass/CVE-2021-45341.c", directory: "/Users/jiaweiwang/CLionProjects/0130-db/svf-z3/SSE-TestCases")
!2 = !{i32 7, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{i32 7, !"PIC Level", i32 2}
!6 = !{i32 7, !"uwtable", i32 1}
!7 = !{i32 7, !"frame-pointer", i32 2}
!8 = !{!"Homebrew clang version 14.0.6"}
!9 = distinct !DISubprogram(name: "Serialize", scope: !10, file: !10, line: 13, type: !11, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !15)
!10 = !DIFile(filename: "src/pass/CVE-2021-45341.c", directory: "/Users/jiaweiwang/CLionProjects/0130-db/svf-z3/SSE-TestCases")
!11 = !DISubroutineType(types: !12)
!12 = !{null, !13}
!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64)
!14 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!15 = !{}
!16 = !DILocalVariable(name: "ifstr", arg: 1, scope: !9, file: !10, line: 13, type: !13)
!17 = !DILocation(line: 13, column: 22, scope: !9)
!18 = !DILocalVariable(name: "wd", scope: !9, file: !10, line: 14, type: !19)
!19 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!20 = !DILocation(line: 14, column: 9, scope: !9)
!21 = !DILocalVariable(name: "buf", scope: !9, file: !10, line: 15, type: !22)
!22 = !DICompositeType(tag: DW_TAG_array_type, baseType: !14, size: 4096, elements: !23)
!23 = !{!24}
!24 = !DISubrange(count: 512)
!25 = !DILocation(line: 15, column: 10, scope: !9)
!26 = !DILocalVariable(name: "ifstr_cpy", scope: !9, file: !10, line: 17, type: !13)
!27 = !DILocation(line: 17, column: 11, scope: !9)
!28 = !DILocation(line: 17, column: 37, scope: !9)
!29 = !DILocation(line: 17, column: 30, scope: !9)
!30 = !DILocation(line: 17, column: 44, scope: !9)
!31 = !DILocation(line: 17, column: 23, scope: !9)
!32 = !DILocation(line: 18, column: 5, scope: !9)
!33 = !DILocalVariable(name: "token", scope: !9, file: !10, line: 19, type: !13)
!34 = !DILocation(line: 19, column: 11, scope: !9)
!35 = !DILocation(line: 19, column: 26, scope: !9)
!36 = !DILocation(line: 19, column: 19, scope: !9)
!37 = !DILocation(line: 22, column: 17, scope: !38)
!38 = distinct !DILexicalBlock(scope: !39, file: !10, line: 21, column: 14)
!39 = distinct !DILexicalBlock(scope: !9, file: !10, line: 21, column: 8)
!40 = !DILocation(line: 22, column: 15, scope: !38)
!41 = !DILocation(line: 23, column: 19, scope: !38)
!42 = !DILocation(line: 23, column: 14, scope: !38)
!43 = !DILocation(line: 23, column: 12, scope: !38)
!44 = !DILocation(line: 25, column: 17, scope: !38)
!45 = !DILocation(line: 25, column: 15, scope: !38)
!46 = !DILocation(line: 27, column: 9, scope: !38)
!47 = !DILocation(line: 28, column: 13, scope: !38)
!48 = !DILocation(line: 28, column: 9, scope: !38)
!49 = !DILocation(line: 28, column: 17, scope: !38)
!50 = !DILocation(line: 31, column: 1, scope: !9)
!51 = distinct !DISubprogram(name: "main", scope: !10, file: !10, line: 33, type: !52, scopeLine: 33, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !15)
!52 = !DISubroutineType(types: !53)
!53 = !{!19}
!54 = !DILocalVariable(name: "ifstr", scope: !51, file: !10, line: 34, type: !13)
!55 = !DILocation(line: 34, column: 11, scope: !51)
!56 = !DILocation(line: 35, column: 15, scope: !51)
!57 = !DILocation(line: 35, column: 5, scope: !51)
!58 = !DILocation(line: 36, column: 1, scope: !51)
