; ModuleID = 'mac_bc/pass/CVE-2022-26126.ll'
source_filename = "/Users/jiaweiwang/CLionProjects/0130-db/svf-z3/SSE-TestCases/src/pass/CVE-2022-26126.c"
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx12.0.0"

%struct.yang_data = type { [1024 x i8], i8* }

@.str = private unnamed_addr constant [27 x i8] c"/frr-isisd:id-len-mismatch\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"%s/raw-pdu\00", align 1
@__const.main.a = private unnamed_addr constant [3 x i8] c"123", align 1

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @strlcpy2(i8* noundef %dst, i8* noundef %src, i64 noundef %maxlen) #0 !dbg !9 {
entry:
  %dst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %maxlen.addr = alloca i64, align 8
  %srclen = alloca i64, align 8
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !23, metadata !DIExpression()), !dbg !24
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !25, metadata !DIExpression()), !dbg !26
  store i64 %maxlen, i64* %maxlen.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %maxlen.addr, metadata !27, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.declare(metadata i64* %srclen, metadata !29, metadata !DIExpression()), !dbg !31
  %0 = load i8*, i8** %src.addr, align 8, !dbg !32
  %call = call i64 @strlen(i8* noundef %0), !dbg !33
  store i64 %call, i64* %srclen, align 8, !dbg !31
  %1 = load i64, i64* %srclen, align 8, !dbg !34
  %add = add i64 %1, 1, !dbg !36
  %2 = load i64, i64* %maxlen.addr, align 8, !dbg !37
  %cmp = icmp ult i64 %add, %2, !dbg !38
  br i1 %cmp, label %if.then, label %if.else, !dbg !39

if.then:                                          ; preds = %entry
  %3 = load i8*, i8** %dst.addr, align 8, !dbg !40
  %4 = load i8*, i8** %src.addr, align 8, !dbg !40
  %5 = load i64, i64* %srclen, align 8, !dbg !40
  %add1 = add i64 %5, 1, !dbg !40
  %6 = load i8*, i8** %dst.addr, align 8, !dbg !40
  %7 = call i64 @llvm.objectsize.i64.p0i8(i8* %6, i1 false, i1 true, i1 false), !dbg !40
  %call2 = call i8* @__memcpy_chk(i8* noundef %3, i8* noundef %4, i64 noundef %add1, i64 noundef %7) #6, !dbg !40
  br label %if.end7, !dbg !42

if.else:                                          ; preds = %entry
  %8 = load i64, i64* %maxlen.addr, align 8, !dbg !43
  %cmp3 = icmp ne i64 %8, 0, !dbg !45
  br i1 %cmp3, label %if.then4, label %if.end, !dbg !46

if.then4:                                         ; preds = %if.else
  %9 = load i8*, i8** %dst.addr, align 8, !dbg !47
  %10 = load i8*, i8** %src.addr, align 8, !dbg !47
  %11 = load i64, i64* %maxlen.addr, align 8, !dbg !47
  %sub = sub i64 %11, 1, !dbg !47
  %12 = load i8*, i8** %dst.addr, align 8, !dbg !47
  %13 = call i64 @llvm.objectsize.i64.p0i8(i8* %12, i1 false, i1 true, i1 false), !dbg !47
  %call5 = call i8* @__memcpy_chk(i8* noundef %9, i8* noundef %10, i64 noundef %sub, i64 noundef %13) #6, !dbg !47
  %14 = load i8*, i8** %dst.addr, align 8, !dbg !49
  %15 = load i64, i64* %maxlen.addr, align 8, !dbg !50
  %sub6 = sub i64 %15, 1, !dbg !51
  %arrayidx = getelementptr inbounds i8, i8* %14, i64 %sub6, !dbg !49
  store i8 0, i8* %arrayidx, align 1, !dbg !52
  br label %if.end, !dbg !53

if.end:                                           ; preds = %if.then4, %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end, %if.then
  %16 = load i64, i64* %srclen, align 8, !dbg !54
  ret i64 %16, !dbg !55
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i64 @strlen(i8* noundef) #2

; Function Attrs: nounwind
declare i8* @__memcpy_chk(i8* noundef, i8* noundef, i64 noundef, i64 noundef) #3

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.objectsize.i64.p0i8(i8*, i1 immarg, i1 immarg, i1 immarg) #1

; Function Attrs: noinline nounwind optnone ssp uwtable
define %struct.yang_data* @yang_data_new(i8* noundef %xpath, i8* noundef %value) #0 !dbg !56 {
entry:
  %xpath.addr = alloca i8*, align 8
  %value.addr = alloca i8*, align 8
  %data = alloca %struct.yang_data*, align 8
  store i8* %xpath, i8** %xpath.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %xpath.addr, metadata !67, metadata !DIExpression()), !dbg !68
  store i8* %value, i8** %value.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %value.addr, metadata !69, metadata !DIExpression()), !dbg !70
  call void @llvm.dbg.declare(metadata %struct.yang_data** %data, metadata !71, metadata !DIExpression()), !dbg !72
  %call = call i8* @calloc(i64 noundef 1, i64 noundef 1032) #7, !dbg !73
  %0 = bitcast i8* %call to %struct.yang_data*, !dbg !73
  store %struct.yang_data* %0, %struct.yang_data** %data, align 8, !dbg !74
  %1 = load %struct.yang_data*, %struct.yang_data** %data, align 8, !dbg !75
  %xpath1 = getelementptr inbounds %struct.yang_data, %struct.yang_data* %1, i32 0, i32 0, !dbg !76
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %xpath1, i64 0, i64 0, !dbg !75
  %2 = load i8*, i8** %xpath.addr, align 8, !dbg !77
  %call2 = call i64 @strlcpy2(i8* noundef %arraydecay, i8* noundef %2, i64 noundef 1024), !dbg !78
  %3 = load i8*, i8** %value.addr, align 8, !dbg !79
  %tobool = icmp ne i8* %3, null, !dbg !79
  br i1 %tobool, label %if.then, label %if.end, !dbg !81

if.then:                                          ; preds = %entry
  %4 = load i8*, i8** %value.addr, align 8, !dbg !82
  %call3 = call i8* @strdup(i8* noundef %4), !dbg !83
  %5 = load %struct.yang_data*, %struct.yang_data** %data, align 8, !dbg !84
  %value4 = getelementptr inbounds %struct.yang_data, %struct.yang_data* %5, i32 0, i32 1, !dbg !85
  store i8* %call3, i8** %value4, align 8, !dbg !86
  br label %if.end, !dbg !84

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.yang_data*, %struct.yang_data** %data, align 8, !dbg !87
  ret %struct.yang_data* %6, !dbg !88
}

; Function Attrs: allocsize(0,1)
declare i8* @calloc(i64 noundef, i64 noundef) #4

declare i8* @strdup(i8* noundef) #2

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @isis_notif_id_len_mismatch(i8* noundef %raw_pdu) #0 !dbg !89 {
entry:
  %raw_pdu.addr = alloca i8*, align 8
  %xpath = alloca i8*, align 8
  %xpath_arg = alloca [1024 x i8], align 16
  %data = alloca %struct.yang_data*, align 8
  store i8* %raw_pdu, i8** %raw_pdu.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %raw_pdu.addr, metadata !92, metadata !DIExpression()), !dbg !93
  call void @llvm.dbg.declare(metadata i8** %xpath, metadata !94, metadata !DIExpression()), !dbg !95
  store i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0), i8** %xpath, align 8, !dbg !95
  call void @llvm.dbg.declare(metadata [1024 x i8]* %xpath_arg, metadata !96, metadata !DIExpression()), !dbg !97
  call void @llvm.dbg.declare(metadata %struct.yang_data** %data, metadata !98, metadata !DIExpression()), !dbg !99
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %xpath_arg, i64 0, i64 0, !dbg !100
  %0 = load i8*, i8** %xpath, align 8, !dbg !100
  %call = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* noundef %arraydecay, i64 noundef 1024, i32 noundef 0, i64 noundef 1024, i8* noundef getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* noundef %0), !dbg !100
  %arraydecay1 = getelementptr inbounds [1024 x i8], [1024 x i8]* %xpath_arg, i64 0, i64 0, !dbg !101
  %1 = load i8*, i8** %raw_pdu.addr, align 8, !dbg !102
  %call2 = call %struct.yang_data* @yang_data_new(i8* noundef %arraydecay1, i8* noundef %1), !dbg !103
  store %struct.yang_data* %call2, %struct.yang_data** %data, align 8, !dbg !104
  ret void, !dbg !105
}

declare i32 @__snprintf_chk(i8* noundef, i64 noundef, i32 noundef, i64 noundef, i8* noundef, ...) #2

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @main() #0 !dbg !106 {
entry:
  %a = alloca [3 x i8], align 1
  call void @llvm.dbg.declare(metadata [3 x i8]* %a, metadata !110, metadata !DIExpression()), !dbg !114
  %0 = bitcast [3 x i8]* %a to i8*, !dbg !114
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 getelementptr inbounds ([3 x i8], [3 x i8]* @__const.main.a, i32 0, i32 0), i64 3, i1 false), !dbg !114
  %arraydecay = getelementptr inbounds [3 x i8], [3 x i8]* %a, i64 0, i64 0, !dbg !115
  call void @isis_notif_id_len_mismatch(i8* noundef %arraydecay), !dbg !116
  ret i32 0, !dbg !117
}

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #5

attributes #0 = { noinline nounwind optnone ssp uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #4 = { allocsize(0,1) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #5 = { argmemonly nofree nounwind willreturn }
attributes #6 = { nounwind }
attributes #7 = { allocsize(0,1) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5, !6, !7}
!llvm.ident = !{!8}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "Homebrew clang version 14.0.6", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None, sysroot: "/Library/Developer/CommandLineTools/SDKs/MacOSX12.sdk", sdk: "MacOSX12.sdk")
!1 = !DIFile(filename: "/Users/jiaweiwang/CLionProjects/0130-db/svf-z3/SSE-TestCases/src/pass/CVE-2022-26126.c", directory: "/Users/jiaweiwang/CLionProjects/0130-db/svf-z3/SSE-TestCases")
!2 = !{i32 7, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{i32 7, !"PIC Level", i32 2}
!6 = !{i32 7, !"uwtable", i32 1}
!7 = !{i32 7, !"frame-pointer", i32 2}
!8 = !{!"Homebrew clang version 14.0.6"}
!9 = distinct !DISubprogram(name: "strlcpy2", scope: !10, file: !10, line: 19, type: !11, scopeLine: 19, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !22)
!10 = !DIFile(filename: "src/pass/CVE-2022-26126.c", directory: "/Users/jiaweiwang/CLionProjects/0130-db/svf-z3/SSE-TestCases")
!11 = !DISubroutineType(types: !12)
!12 = !{!13, !18, !20, !13}
!13 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !14, line: 31, baseType: !15)
!14 = !DIFile(filename: "/Library/Developer/CommandLineTools/SDKs/MacOSX12.sdk/usr/include/sys/_types/_size_t.h", directory: "")
!15 = !DIDerivedType(tag: DW_TAG_typedef, name: "__darwin_size_t", file: !16, line: 94, baseType: !17)
!16 = !DIFile(filename: "/Library/Developer/CommandLineTools/SDKs/MacOSX12.sdk/usr/include/i386/_types.h", directory: "")
!17 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
!18 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !19, size: 64)
!19 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !21, size: 64)
!21 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !19)
!22 = !{}
!23 = !DILocalVariable(name: "dst", arg: 1, scope: !9, file: !10, line: 19, type: !18)
!24 = !DILocation(line: 19, column: 24, scope: !9)
!25 = !DILocalVariable(name: "src", arg: 2, scope: !9, file: !10, line: 19, type: !20)
!26 = !DILocation(line: 19, column: 42, scope: !9)
!27 = !DILocalVariable(name: "maxlen", arg: 3, scope: !9, file: !10, line: 19, type: !13)
!28 = !DILocation(line: 19, column: 54, scope: !9)
!29 = !DILocalVariable(name: "srclen", scope: !9, file: !10, line: 20, type: !30)
!30 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !13)
!31 = !DILocation(line: 20, column: 18, scope: !9)
!32 = !DILocation(line: 20, column: 34, scope: !9)
!33 = !DILocation(line: 20, column: 27, scope: !9)
!34 = !DILocation(line: 21, column: 9, scope: !35)
!35 = distinct !DILexicalBlock(scope: !9, file: !10, line: 21, column: 9)
!36 = !DILocation(line: 21, column: 16, scope: !35)
!37 = !DILocation(line: 21, column: 22, scope: !35)
!38 = !DILocation(line: 21, column: 20, scope: !35)
!39 = !DILocation(line: 21, column: 9, scope: !9)
!40 = !DILocation(line: 22, column: 9, scope: !41)
!41 = distinct !DILexicalBlock(scope: !35, file: !10, line: 21, column: 30)
!42 = !DILocation(line: 23, column: 5, scope: !41)
!43 = !DILocation(line: 24, column: 14, scope: !44)
!44 = distinct !DILexicalBlock(scope: !35, file: !10, line: 24, column: 14)
!45 = !DILocation(line: 24, column: 21, scope: !44)
!46 = !DILocation(line: 24, column: 14, scope: !35)
!47 = !DILocation(line: 25, column: 9, scope: !48)
!48 = distinct !DILexicalBlock(scope: !44, file: !10, line: 24, column: 27)
!49 = !DILocation(line: 26, column: 9, scope: !48)
!50 = !DILocation(line: 26, column: 13, scope: !48)
!51 = !DILocation(line: 26, column: 19, scope: !48)
!52 = !DILocation(line: 26, column: 23, scope: !48)
!53 = !DILocation(line: 27, column: 5, scope: !48)
!54 = !DILocation(line: 28, column: 12, scope: !9)
!55 = !DILocation(line: 28, column: 5, scope: !9)
!56 = distinct !DISubprogram(name: "yang_data_new", scope: !10, file: !10, line: 31, type: !57, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !22)
!57 = !DISubroutineType(types: !58)
!58 = !{!59, !20, !20}
!59 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !60, size: 64)
!60 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "yang_data", file: !10, line: 12, size: 8256, elements: !61)
!61 = !{!62, !66}
!62 = !DIDerivedType(tag: DW_TAG_member, name: "xpath", scope: !60, file: !10, line: 14, baseType: !63, size: 8192)
!63 = !DICompositeType(tag: DW_TAG_array_type, baseType: !19, size: 8192, elements: !64)
!64 = !{!65}
!65 = !DISubrange(count: 1024)
!66 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !60, file: !10, line: 16, baseType: !18, size: 64, offset: 8192)
!67 = !DILocalVariable(name: "xpath", arg: 1, scope: !56, file: !10, line: 31, type: !20)
!68 = !DILocation(line: 31, column: 45, scope: !56)
!69 = !DILocalVariable(name: "value", arg: 2, scope: !56, file: !10, line: 31, type: !20)
!70 = !DILocation(line: 31, column: 64, scope: !56)
!71 = !DILocalVariable(name: "data", scope: !56, file: !10, line: 32, type: !59)
!72 = !DILocation(line: 32, column: 20, scope: !56)
!73 = !DILocation(line: 33, column: 9, scope: !56)
!74 = !DILocation(line: 33, column: 7, scope: !56)
!75 = !DILocation(line: 34, column: 11, scope: !56)
!76 = !DILocation(line: 34, column: 17, scope: !56)
!77 = !DILocation(line: 34, column: 24, scope: !56)
!78 = !DILocation(line: 34, column: 2, scope: !56)
!79 = !DILocation(line: 36, column: 6, scope: !80)
!80 = distinct !DILexicalBlock(scope: !56, file: !10, line: 36, column: 6)
!81 = !DILocation(line: 36, column: 6, scope: !56)
!82 = !DILocation(line: 37, column: 24, scope: !80)
!83 = !DILocation(line: 37, column: 17, scope: !80)
!84 = !DILocation(line: 37, column: 3, scope: !80)
!85 = !DILocation(line: 37, column: 9, scope: !80)
!86 = !DILocation(line: 37, column: 15, scope: !80)
!87 = !DILocation(line: 38, column: 9, scope: !56)
!88 = !DILocation(line: 38, column: 2, scope: !56)
!89 = distinct !DISubprogram(name: "isis_notif_id_len_mismatch", scope: !10, file: !10, line: 41, type: !90, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !22)
!90 = !DISubroutineType(types: !91)
!91 = !{null, !20}
!92 = !DILocalVariable(name: "raw_pdu", arg: 1, scope: !89, file: !10, line: 41, type: !20)
!93 = !DILocation(line: 41, column: 45, scope: !89)
!94 = !DILocalVariable(name: "xpath", scope: !89, file: !10, line: 42, type: !20)
!95 = !DILocation(line: 42, column: 15, scope: !89)
!96 = !DILocalVariable(name: "xpath_arg", scope: !89, file: !10, line: 43, type: !63)
!97 = !DILocation(line: 43, column: 8, scope: !89)
!98 = !DILocalVariable(name: "data", scope: !89, file: !10, line: 44, type: !59)
!99 = !DILocation(line: 44, column: 21, scope: !89)
!100 = !DILocation(line: 45, column: 3, scope: !89)
!101 = !DILocation(line: 46, column: 26, scope: !89)
!102 = !DILocation(line: 46, column: 37, scope: !89)
!103 = !DILocation(line: 46, column: 12, scope: !89)
!104 = !DILocation(line: 46, column: 10, scope: !89)
!105 = !DILocation(line: 47, column: 1, scope: !89)
!106 = distinct !DISubprogram(name: "main", scope: !10, file: !10, line: 49, type: !107, scopeLine: 49, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !22)
!107 = !DISubroutineType(types: !108)
!108 = !{!109}
!109 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!110 = !DILocalVariable(name: "a", scope: !106, file: !10, line: 50, type: !111)
!111 = !DICompositeType(tag: DW_TAG_array_type, baseType: !19, size: 24, elements: !112)
!112 = !{!113}
!113 = !DISubrange(count: 3)
!114 = !DILocation(line: 50, column: 10, scope: !106)
!115 = !DILocation(line: 51, column: 32, scope: !106)
!116 = !DILocation(line: 51, column: 5, scope: !106)
!117 = !DILocation(line: 52, column: 1, scope: !106)
