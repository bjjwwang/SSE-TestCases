; ModuleID = 'mac_bc/pass/CVE-2022-34835.ll'
source_filename = "/Users/jiaweiwang/CLionProjects/0130-db/svf-z3/SSE-TestCases/src/pass/CVE-2022-34835.c"
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx12.0.0"

%struct.i2c_msg = type { i8* }

@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @do_i2c_md(i32 noundef %argc, i8** noundef %argv) #0 !dbg !9 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %length = alloca i32, align 4
  %nbytes = alloca i32, align 4
  %linebytes = alloca i32, align 4
  %linebuf = alloca [16 x i8], align 16
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !19, metadata !DIExpression()), !dbg !20
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !21, metadata !DIExpression()), !dbg !22
  call void @llvm.dbg.declare(metadata i32* %length, metadata !23, metadata !DIExpression()), !dbg !27
  store i32 0, i32* %length, align 4, !dbg !27
  call void @llvm.dbg.declare(metadata i32* %nbytes, metadata !28, metadata !DIExpression()), !dbg !31
  call void @llvm.dbg.declare(metadata i32* %linebytes, metadata !32, metadata !DIExpression()), !dbg !33
  %0 = load i32, i32* %argc.addr, align 4, !dbg !34
  %cmp = icmp slt i32 %0, 3, !dbg !36
  br i1 %cmp, label %if.then, label %if.end, !dbg !37

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4, !dbg !38
  br label %return, !dbg !38

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %argc.addr, align 4, !dbg !40
  %cmp1 = icmp sgt i32 %1, 3, !dbg !42
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !43

if.then2:                                         ; preds = %if.end
  %2 = load i8**, i8*** %argv.addr, align 8, !dbg !44
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 3, !dbg !44
  %3 = load i8*, i8** %arrayidx, align 8, !dbg !44
  %call = call i64 @strtol(i8* noundef %3, i8** noundef null, i32 noundef 16), !dbg !46
  %conv = trunc i64 %call to i32, !dbg !46
  store i32 %conv, i32* %length, align 4, !dbg !47
  br label %if.end3, !dbg !48

if.end3:                                          ; preds = %if.then2, %if.end
  %4 = load i32, i32* %length, align 4, !dbg !49
  store i32 %4, i32* %nbytes, align 4, !dbg !50
  br label %do.body, !dbg !51

do.body:                                          ; preds = %do.cond, %if.end3
  call void @llvm.dbg.declare(metadata [16 x i8]* %linebuf, metadata !52, metadata !DIExpression()), !dbg !58
  %5 = load i32, i32* %nbytes, align 4, !dbg !59
  %cmp4 = icmp sgt i32 %5, 16, !dbg !60
  br i1 %cmp4, label %cond.true, label %cond.false, !dbg !61

cond.true:                                        ; preds = %do.body
  br label %cond.end, !dbg !61

cond.false:                                       ; preds = %do.body
  %6 = load i32, i32* %nbytes, align 4, !dbg !62
  br label %cond.end, !dbg !61

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 16, %cond.true ], [ %6, %cond.false ], !dbg !61
  store i32 %cond, i32* %linebytes, align 4, !dbg !63
  %7 = load i32, i32* %linebytes, align 4, !dbg !64
  %call6 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %7), !dbg !65
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %linebuf, i64 0, i64 0, !dbg !66
  %8 = load i32, i32* %linebytes, align 4, !dbg !67
  %call7 = call i32 @i2c_read_bytewise(i8* noundef %arraydecay, i32 noundef %8), !dbg !68
  %9 = load i32, i32* %linebytes, align 4, !dbg !69
  %10 = load i32, i32* %nbytes, align 4, !dbg !70
  %sub = sub nsw i32 %10, %9, !dbg !70
  store i32 %sub, i32* %nbytes, align 4, !dbg !70
  br label %do.cond, !dbg !71

do.cond:                                          ; preds = %cond.end
  %11 = load i32, i32* %nbytes, align 4, !dbg !72
  %cmp8 = icmp sgt i32 %11, 0, !dbg !73
  br i1 %cmp8, label %do.body, label %do.end, !dbg !71, !llvm.loop !74

do.end:                                           ; preds = %do.cond
  store i32 0, i32* %retval, align 4, !dbg !77
  br label %return, !dbg !77

return:                                           ; preds = %do.end, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !78
  ret i32 %12, !dbg !78
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i64 @strtol(i8* noundef, i8** noundef, i32 noundef) #2

declare i32 @printf(i8* noundef, ...) #2

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @i2c_read_bytewise(i8* noundef %buffer, i32 noundef %len) #0 !dbg !79 {
entry:
  %buffer.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %msg = alloca [2 x %struct.i2c_msg], align 16
  %ptr = alloca %struct.i2c_msg*, align 8
  %i = alloca i32, align 4
  store i8* %buffer, i8** %buffer.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buffer.addr, metadata !85, metadata !DIExpression()), !dbg !86
  store i32 %len, i32* %len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len.addr, metadata !87, metadata !DIExpression()), !dbg !88
  call void @llvm.dbg.declare(metadata [2 x %struct.i2c_msg]* %msg, metadata !89, metadata !DIExpression()), !dbg !96
  call void @llvm.dbg.declare(metadata %struct.i2c_msg** %ptr, metadata !97, metadata !DIExpression()), !dbg !99
  call void @llvm.dbg.declare(metadata i32* %i, metadata !100, metadata !DIExpression()), !dbg !101
  store i32 0, i32* %i, align 4, !dbg !102
  br label %for.cond, !dbg !104

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !105
  %1 = load i32, i32* %len.addr, align 4, !dbg !107
  %cmp = icmp ult i32 %0, %1, !dbg !108
  br i1 %cmp, label %for.body, label %for.end, !dbg !109

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [2 x %struct.i2c_msg], [2 x %struct.i2c_msg]* %msg, i64 0, i64 0, !dbg !110
  %add.ptr = getelementptr inbounds %struct.i2c_msg, %struct.i2c_msg* %arraydecay, i64 1, !dbg !112
  store %struct.i2c_msg* %add.ptr, %struct.i2c_msg** %ptr, align 8, !dbg !113
  %2 = load i8*, i8** %buffer.addr, align 8, !dbg !114
  %3 = load i32, i32* %i, align 4, !dbg !115
  %idxprom = sext i32 %3 to i64, !dbg !114
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %idxprom, !dbg !114
  %4 = load %struct.i2c_msg*, %struct.i2c_msg** %ptr, align 8, !dbg !116
  %buf = getelementptr inbounds %struct.i2c_msg, %struct.i2c_msg* %4, i32 0, i32 0, !dbg !117
  store i8* %arrayidx, i8** %buf, align 8, !dbg !118
  %5 = load %struct.i2c_msg*, %struct.i2c_msg** %ptr, align 8, !dbg !119
  %incdec.ptr = getelementptr inbounds %struct.i2c_msg, %struct.i2c_msg* %5, i32 1, !dbg !119
  store %struct.i2c_msg* %incdec.ptr, %struct.i2c_msg** %ptr, align 8, !dbg !119
  br label %for.inc, !dbg !120

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4, !dbg !121
  %inc = add nsw i32 %6, 1, !dbg !121
  store i32 %inc, i32* %i, align 4, !dbg !121
  br label %for.cond, !dbg !122, !llvm.loop !123

for.end:                                          ; preds = %for.cond
  ret i32 0, !dbg !125
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @main(i32 noundef %argc, i8** noundef %argv) #0 !dbg !126 {
entry:
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !130, metadata !DIExpression()), !dbg !131
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !132, metadata !DIExpression()), !dbg !133
  %0 = load i32, i32* %argc.addr, align 4, !dbg !134
  %1 = load i8**, i8*** %argv.addr, align 8, !dbg !135
  %call = call i32 @do_i2c_md(i32 noundef %0, i8** noundef %1), !dbg !136
  ret i32 0, !dbg !137
}

attributes #0 = { noinline nounwind optnone ssp uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5, !6, !7}
!llvm.ident = !{!8}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "Homebrew clang version 14.0.6", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None, sysroot: "/Library/Developer/CommandLineTools/SDKs/MacOSX12.sdk", sdk: "MacOSX12.sdk")
!1 = !DIFile(filename: "/Users/jiaweiwang/CLionProjects/0130-db/svf-z3/SSE-TestCases/src/pass/CVE-2022-34835.c", directory: "/Users/jiaweiwang/CLionProjects/0130-db/svf-z3/SSE-TestCases")
!2 = !{i32 7, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{i32 7, !"PIC Level", i32 2}
!6 = !{i32 7, !"uwtable", i32 1}
!7 = !{i32 7, !"frame-pointer", i32 2}
!8 = !{!"Homebrew clang version 14.0.6"}
!9 = distinct !DISubprogram(name: "do_i2c_md", scope: !10, file: !10, line: 15, type: !11, scopeLine: 15, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !18)
!10 = !DIFile(filename: "src/pass/CVE-2022-34835.c", directory: "/Users/jiaweiwang/CLionProjects/0130-db/svf-z3/SSE-TestCases")
!11 = !DISubroutineType(types: !12)
!12 = !{!13, !13, !14}
!13 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!14 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15, size: 64)
!15 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !16)
!16 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17, size: 64)
!17 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!18 = !{}
!19 = !DILocalVariable(name: "argc", arg: 1, scope: !9, file: !10, line: 15, type: !13)
!20 = !DILocation(line: 15, column: 19, scope: !9)
!21 = !DILocalVariable(name: "argv", arg: 2, scope: !9, file: !10, line: 15, type: !14)
!22 = !DILocation(line: 15, column: 37, scope: !9)
!23 = !DILocalVariable(name: "length", scope: !9, file: !10, line: 16, type: !24)
!24 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !25, line: 31, baseType: !26)
!25 = !DIFile(filename: "/Library/Developer/CommandLineTools/SDKs/MacOSX12.sdk/usr/include/_types/_uint32_t.h", directory: "")
!26 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!27 = !DILocation(line: 16, column: 11, scope: !9)
!28 = !DILocalVariable(name: "nbytes", scope: !9, file: !10, line: 17, type: !29)
!29 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !30, line: 30, baseType: !13)
!30 = !DIFile(filename: "/Library/Developer/CommandLineTools/SDKs/MacOSX12.sdk/usr/include/sys/_types/_int32_t.h", directory: "")
!31 = !DILocation(line: 17, column: 10, scope: !9)
!32 = !DILocalVariable(name: "linebytes", scope: !9, file: !10, line: 18, type: !29)
!33 = !DILocation(line: 18, column: 10, scope: !9)
!34 = !DILocation(line: 20, column: 6, scope: !35)
!35 = distinct !DILexicalBlock(scope: !9, file: !10, line: 20, column: 6)
!36 = !DILocation(line: 20, column: 11, scope: !35)
!37 = !DILocation(line: 20, column: 6, scope: !9)
!38 = !DILocation(line: 21, column: 3, scope: !39)
!39 = distinct !DILexicalBlock(scope: !35, file: !10, line: 20, column: 16)
!40 = !DILocation(line: 24, column: 6, scope: !41)
!41 = distinct !DILexicalBlock(scope: !9, file: !10, line: 24, column: 6)
!42 = !DILocation(line: 24, column: 11, scope: !41)
!43 = !DILocation(line: 24, column: 6, scope: !9)
!44 = !DILocation(line: 25, column: 19, scope: !45)
!45 = distinct !DILexicalBlock(scope: !41, file: !10, line: 24, column: 16)
!46 = !DILocation(line: 25, column: 12, scope: !45)
!47 = !DILocation(line: 25, column: 10, scope: !45)
!48 = !DILocation(line: 26, column: 2, scope: !45)
!49 = !DILocation(line: 28, column: 11, scope: !9)
!50 = !DILocation(line: 28, column: 9, scope: !9)
!51 = !DILocation(line: 29, column: 2, scope: !9)
!52 = !DILocalVariable(name: "linebuf", scope: !53, file: !10, line: 30, type: !54)
!53 = distinct !DILexicalBlock(scope: !9, file: !10, line: 29, column: 5)
!54 = !DICompositeType(tag: DW_TAG_array_type, baseType: !55, size: 128, elements: !56)
!55 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!56 = !{!57}
!57 = !DISubrange(count: 16)
!58 = !DILocation(line: 30, column: 17, scope: !53)
!59 = !DILocation(line: 31, column: 16, scope: !53)
!60 = !DILocation(line: 31, column: 23, scope: !53)
!61 = !DILocation(line: 31, column: 15, scope: !53)
!62 = !DILocation(line: 31, column: 58, scope: !53)
!63 = !DILocation(line: 31, column: 13, scope: !53)
!64 = !DILocation(line: 32, column: 18, scope: !53)
!65 = !DILocation(line: 32, column: 3, scope: !53)
!66 = !DILocation(line: 33, column: 21, scope: !53)
!67 = !DILocation(line: 33, column: 30, scope: !53)
!68 = !DILocation(line: 33, column: 3, scope: !53)
!69 = !DILocation(line: 34, column: 13, scope: !53)
!70 = !DILocation(line: 34, column: 10, scope: !53)
!71 = !DILocation(line: 35, column: 2, scope: !53)
!72 = !DILocation(line: 35, column: 11, scope: !9)
!73 = !DILocation(line: 35, column: 18, scope: !9)
!74 = distinct !{!74, !51, !75, !76}
!75 = !DILocation(line: 35, column: 21, scope: !9)
!76 = !{!"llvm.loop.mustprogress"}
!77 = !DILocation(line: 37, column: 2, scope: !9)
!78 = !DILocation(line: 38, column: 1, scope: !9)
!79 = distinct !DISubprogram(name: "i2c_read_bytewise", scope: !10, file: !10, line: 45, type: !80, scopeLine: 45, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !18)
!80 = !DISubroutineType(types: !81)
!81 = !{!13, !82, !24}
!82 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !83, size: 64)
!83 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !84, line: 31, baseType: !55)
!84 = !DIFile(filename: "/Library/Developer/CommandLineTools/SDKs/MacOSX12.sdk/usr/include/_types/_uint8_t.h", directory: "")
!85 = !DILocalVariable(name: "buffer", arg: 1, scope: !79, file: !10, line: 45, type: !82)
!86 = !DILocation(line: 45, column: 32, scope: !79)
!87 = !DILocalVariable(name: "len", arg: 2, scope: !79, file: !10, line: 45, type: !24)
!88 = !DILocation(line: 45, column: 49, scope: !79)
!89 = !DILocalVariable(name: "msg", scope: !79, file: !10, line: 46, type: !90)
!90 = !DICompositeType(tag: DW_TAG_array_type, baseType: !91, size: 128, elements: !94)
!91 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "i2c_msg", file: !10, line: 40, size: 64, elements: !92)
!92 = !{!93}
!93 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !91, file: !10, line: 41, baseType: !82, size: 64)
!94 = !{!95}
!95 = !DISubrange(count: 2)
!96 = !DILocation(line: 46, column: 17, scope: !79)
!97 = !DILocalVariable(name: "ptr", scope: !79, file: !10, line: 46, type: !98)
!98 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !91, size: 64)
!99 = !DILocation(line: 46, column: 26, scope: !79)
!100 = !DILocalVariable(name: "i", scope: !79, file: !10, line: 47, type: !13)
!101 = !DILocation(line: 47, column: 6, scope: !79)
!102 = !DILocation(line: 50, column: 9, scope: !103)
!103 = distinct !DILexicalBlock(scope: !79, file: !10, line: 50, column: 2)
!104 = !DILocation(line: 50, column: 7, scope: !103)
!105 = !DILocation(line: 50, column: 14, scope: !106)
!106 = distinct !DILexicalBlock(scope: !103, file: !10, line: 50, column: 2)
!107 = !DILocation(line: 50, column: 18, scope: !106)
!108 = !DILocation(line: 50, column: 16, scope: !106)
!109 = !DILocation(line: 50, column: 2, scope: !103)
!110 = !DILocation(line: 51, column: 9, scope: !111)
!111 = distinct !DILexicalBlock(scope: !106, file: !10, line: 50, column: 28)
!112 = !DILocation(line: 51, column: 13, scope: !111)
!113 = !DILocation(line: 51, column: 7, scope: !111)
!114 = !DILocation(line: 53, column: 15, scope: !111)
!115 = !DILocation(line: 53, column: 22, scope: !111)
!116 = !DILocation(line: 53, column: 3, scope: !111)
!117 = !DILocation(line: 53, column: 8, scope: !111)
!118 = !DILocation(line: 53, column: 12, scope: !111)
!119 = !DILocation(line: 54, column: 6, scope: !111)
!120 = !DILocation(line: 55, column: 2, scope: !111)
!121 = !DILocation(line: 50, column: 24, scope: !106)
!122 = !DILocation(line: 50, column: 2, scope: !106)
!123 = distinct !{!123, !109, !124, !76}
!124 = !DILocation(line: 55, column: 2, scope: !103)
!125 = !DILocation(line: 57, column: 2, scope: !79)
!126 = distinct !DISubprogram(name: "main", scope: !10, file: !10, line: 60, type: !127, scopeLine: 60, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !18)
!127 = !DISubroutineType(types: !128)
!128 = !{!13, !13, !129}
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !16, size: 64)
!130 = !DILocalVariable(name: "argc", arg: 1, scope: !126, file: !10, line: 60, type: !13)
!131 = !DILocation(line: 60, column: 14, scope: !126)
!132 = !DILocalVariable(name: "argv", arg: 2, scope: !126, file: !10, line: 60, type: !129)
!133 = !DILocation(line: 60, column: 26, scope: !126)
!134 = !DILocation(line: 61, column: 12, scope: !126)
!135 = !DILocation(line: 61, column: 18, scope: !126)
!136 = !DILocation(line: 61, column: 2, scope: !126)
!137 = !DILocation(line: 62, column: 1, scope: !126)
